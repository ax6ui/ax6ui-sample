/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		16: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = 'text/javascript';
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + ".js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 17);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AX6Info__ = __webpack_require__(2);


/**
 * @module AX6Util
 */

const _toString = Object.prototype.toString;
const _hasOwnProperty = Object.prototype.hasOwnProperty;
const _fnToString = Function.prototype.toString;
const objectCtorString = _fnToString.call(Object);

const reIsJson = /^(["'](\\.|[^"\\\n\r])*?["']|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/,
      reMs = /^-ms-/,
      reSnakeCase = /[\-_]([\da-z])/gi,
      reCamelCase = /([A-Z])/g,
      reDot = /\./,
      reInt = /[-|+]?[\D]/gi,
      reNotNum = /\D/gi,
      reMoneySplit = new RegExp('([0-9])([0-9][0-9][0-9][,.])'),
      reAmp = /&/g,
      reEq = /=/,
      reClassNameSplit = /[ ]+/g;

function each(O, _fn) {
  if (isNothing(O)) return [];
  let key,
      i = 0,
      l = O.length,
      isObj = l === undefined || typeof O === "function";
  if (isObj) {
    for (key in O) {
      if (typeof O[key] != "undefined") if (_fn.call(O[key], key, O[key]) === false) break;
    }
  } else {
    for (; i < l;) {
      if (typeof O[i] != "undefined") if (_fn.call(O[i], i, O[i++]) === false) break;
    }
  }
  return O;
}

function search(O, _fn) {
  if (isNothing(O)) return -1;
  if (isObject(O)) {
    for (let key in O) {
      if (typeof O[key] != "undefined" && isFunction(_fn) && _fn.call(O[key], key, O[key])) {
        return key;
        break;
      } else if (O[key] == _fn) {
        return key;
        break;
      }
    }
  } else {
    for (let i = 0, l = O.length; i < l; i++) {
      if (typeof O[i] != "undefined" && isFunction(_fn) && _fn.call(O[i], i, O[i])) {
        return i;
        break;
      } else if (O[i] == _fn) {
        return i;
        break;
      }
    }
  }
  return -1;
}

function filter(O, _fn) {
  if (isNothing(O)) return [];
  let k,
      i = 0,
      l = O.length,
      results = [],
      fnResult;
  if (isObject(O)) {
    for (k in O) {
      if (typeof O[k] != "undefined") {
        if (fnResult = _fn.call(O[k], k, O[k])) results.push(O[k]);
      }
    }
  } else {
    for (; i < l;) {
      if (typeof O[i] != "undefined") {
        if (fnResult = _fn.call(O[i], i, O[i])) results.push(O[i]);
        i++;
      }
    }
  }
  return results;
}

function toJson(O) {
  let jsonString = "";
  if (isArray(O)) {
    let i = 0,
        l = O.length;
    jsonString += "[";
    for (; i < l; i++) {
      if (i > 0) jsonString += ",";
      jsonString += toJson(O[i]);
    }
    jsonString += "]";
  } else if (isObject(O)) {
    jsonString += "{";
    let jsonObjectBody = [];
    each(O, function (key, value) {
      jsonObjectBody.push('"' + key + '": ' + toJson(value));
    });
    jsonString += jsonObjectBody.join(", ");
    jsonString += "}";
  } else if (isString(O)) {
    jsonString = '"' + O + '"';
  } else if (isNumber(O)) {
    jsonString = O;
  } else if (isUndefined(O)) {
    jsonString = "undefined";
  } else if (isFunction(O)) {
    jsonString = '"{Function}"';
  } else {
    jsonString = O;
  }
  return jsonString;
}

function parseJson(str, force) {
  if (force || reIsJson.test(str)) {
    try {
      return new Function('', 'return ' + str)();
    } catch (e) {
      return { error: 500, msg: 'syntax error' };
    }
  } else {
    return { error: 500, msg: 'syntax error' };
  }
}

function getType(O) {
  let typeName;
  if (O != null && O == O.window) {
    typeName = "window";
  } else if (!!(O && O.nodeType == 1)) {
    typeName = "element";
  } else if (!!(O && O.nodeType == 11)) {
    typeName = "fragment";
  } else if (O === null) {
    typeName = "null";
  } else if (typeof O === "undefined") {
    typeName = "undefined";
  } else if (_toString.call(O) == "[object Object]") {
    typeName = "object";
  } else if (_toString.call(O) == "[object Array]") {
    typeName = "array";
  } else if (_toString.call(O) == "[object String]") {
    typeName = "string";
  } else if (_toString.call(O) == "[object Number]") {
    typeName = "number";
  } else if (_toString.call(O) == "[object NodeList]") {
    typeName = "nodelist";
  } else if (typeof O === "function") {
    typeName = "function";
  }
  return typeName;
}

function isWindow(O) {
  return O != null && O == O.window;
}

function isElement(O) {
  return !!(O && (O.nodeType == 1 || O.nodeType == 11));
}

function isObject(O) {
  return _toString.call(O) == "[object Object]";
}

function isArray(O) {
  return _toString.call(O) == "[object Array]";
}

function isFunction(O) {
  return typeof O === "function";
}

function isString(O) {
  return _toString.call(O) == "[object String]";
}

function isNumber(O) {
  return _toString.call(O) == "[object Number]";
}

function isNodelist(O) {
  return !!(_toString.call(O) == "[object NodeList]" || typeof O !== "undefined" && O && O[0] && O[0].nodeType == 1);
}

function isUndefined(O) {
  return typeof O === "undefined";
}

function isNothing(O) {
  return typeof O === "undefined" || O === null || O === "";
}

function isDate(O) {
  return O instanceof Date && !isNaN(O.valueOf());
}

function isDateFormat(O) {
  let result = false;

  if (!O) {} else if (O instanceof Date && !isNaN(O.valueOf())) {
    result = true;
  } else {
    if (O.length > 7) {
      if (date(O) instanceof Date) {
        return true;
      }
    }
    O = O.replace(/\D/g, '');
    if (O.length > 7) {
      let mm = O.substr(4, 2),
          dd = O.substr(6, 2);

      O = date(O);
      if (O.getMonth() == mm - 1 && O.getDate() == dd) {
        result = true;
      }
    }
  }
  return result;
}

function isPlainObject(O) {
  let proto, constructor;

  if (!O || _toString.call(O) !== "[object Object]") return false;
  proto = Object.getPrototypeOf(O);

  if (!proto) {
    return true;
  }

  constructor = _hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof constructor === "function" && _fnToString.call(constructor) === objectCtorString;
}

function first(O) {
  if (isObject(O)) {
    let keys = Object.keys(O);
    let item = {};
    item[keys[0]] = O[keys[0]];
    return item;
  } else if (isArray(O)) {
    return O[0];
  } else {
    console.error("AX6Util.object.first", "argument type error");
    return undefined;
  }
}

function last(O) {
  if (isObject(O)) {
    let keys = Object.keys(O);
    let item = {};
    item[keys[keys.length - 1]] = O[keys[keys.length - 1]];
    return item;
  } else if (isArray(O)) {
    return O[O.length - 1];
  } else {
    console.error("AX6Util.object.last", "argument type error");
    return undefined;
  }
}

function setCookie(cn, cv, exdays, opts) {
  let expire;
  if (typeof exdays === "number") {
    expire = new Date();
    expire.setDate(expire.getDate() + exdays);
  }
  opts = opts || {};
  return doc.cookie = [escape(cn), '=', escape(cv), expire ? "; expires=" + expire.toUTCString() : "", // use expires attribute, max-age is not supported by IE
  opts.path ? "; path=" + opts.path : "", opts.domain ? "; domain=" + opts.domain : "", opts.secure ? "; secure" : ""].join("");
}

function getCookie(cname) {
  let name = cname + "=";
  let ca = doc.cookie.split(';'),
      i = 0,
      l = ca.length;
  for (; i < l; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') c = c.substring(1);
    if (c.indexOf(name) != -1) return unescape(c.substring(name.length, c.length));
  }
  return "";
}

function alert(O) {
  win.alert(toJson(O));
  return O;
}

function left(str, pos) {
  if (typeof str === "undefined" || typeof pos === "undefined") return "";
  if (isString(pos)) {
    return str.indexOf(pos) > -1 ? str.substr(0, str.indexOf(pos)) : "";
  } else if (isNumber(pos)) {
    return str.substr(0, pos);
  } else {
    return "";
  }
}

function right(str, pos) {
  if (typeof str === "undefined" || typeof pos === "undefined") return "";
  str = '' + str;
  if (isString(pos)) {
    return str.lastIndexOf(pos) > -1 ? str.substr(str.lastIndexOf(pos) + 1) : "";
  } else if (isNumber(pos)) {
    return str.substr(str.length - pos);
  } else {
    return "";
  }
}

function camelCase(str) {
  return str.replace(reMs, "ms-").replace(reSnakeCase, function (all, letter) {
    return letter.toUpperCase();
  });
}

function snakeCase(str) {
  return camelCase(str).replace(reCamelCase, function (all, letter) {
    return "-" + letter.toLowerCase();
  });
}

function number(str, cond) {
  let result,
      pair = ('' + str).split(reDot),
      isMinus,
      returnValue;

  isMinus = Number(pair[0].replace(/,/g, "")) < 0 || pair[0] == "-0";
  returnValue = 0.0;
  pair[0] = pair[0].replace(reInt, "");

  if (pair[1]) {
    pair[1] = pair[1].replace(reNotNum, "");
    returnValue = Number(pair[0] + "." + pair[1]) || 0;
  } else {
    returnValue = Number(pair[0]) || 0;
  }
  result = isMinus ? -returnValue : returnValue;

  each(cond, function (k, c) {
    if (k == "round") {
      if (isNumber(c)) {
        if (c < 0) {
          result = +(Math.round(result + "e-" + Math.abs(c)) + "e+" + Math.abs(c));
        } else {
          result = +(Math.round(result + "e+" + c) + "e-" + c);
        }
      } else {
        result = Math.round(result);
      }
    }
    if (k == "floor") {
      result = Math.floor(result);
    }
    if (k == "ceil") {
      result = Math.ceil(result);
    } else if (k == "money") {
      result = function (val) {
        var txtNumber = '' + val;
        if (isNaN(txtNumber) || txtNumber == "") {
          return "";
        } else {
          var arrNumber = txtNumber.split('.');
          arrNumber[0] += '.';
          do {
            arrNumber[0] = arrNumber[0].replace(reMoneySplit, '$1,$2');
          } while (reMoneySplit.test(arrNumber[0]));
          if (arrNumber.length > 1) {
            return arrNumber.join('');
          } else {
            return arrNumber[0].split('.')[0];
          }
        }
      }(result);
    } else if (k == "abs") {
      result = Math.abs(Number(result));
    } else if (k == "byte") {
      result = function (val) {
        val = Number(result);
        var nUnit = "KB";
        var myByte = val / 1024;
        if (myByte / 1024 > 1) {
          nUnit = "MB";
          myByte = myByte / 1024;
        }
        if (myByte / 1024 > 1) {
          nUnit = "GB";
          myByte = myByte / 1024;
        }
        return number(myByte, { round: 1 }) + nUnit;
      }(result);
    }
  });

  return result;
}

function toArray(O) {
  if (typeof O.length != "undefined") return Array.prototype.slice.call(O);
  return [];
}

function param(O, cond) {
  var p;
  if (isString(O) && typeof cond !== "undefined" && cond == "param") {
    return O;
  } else if (isString(O) && typeof cond !== "undefined" && cond == "object" || isString(O) && typeof cond === "undefined") {
    p = {};
    each(O.split(reAmp), function () {
      var item = this.split(reEq);
      if (!p[item[0]]) p[item[0]] = item[1];else {
        if (isString(p[item[0]])) p[item[0]] = [p[item[0]]];
        p[item[0]].push(item[1]);
      }
    });
    return p;
  } else {
    p = [];
    each(O, function (k, v) {
      p.push(k + "=" + escape(v));
    });
    return p.join('&');
  }
}

function encode(s) {
  return encodeURIComponent(s);
}

function decode(s) {
  return decodeURIComponent(s);
}

function error() {
  __WEBPACK_IMPORTED_MODULE_0__AX6Info__["a" /* default */].onerror.apply(this, arguments);
}

function localDate(yy, mm, dd, hh, mi, ss) {
  var utcD, localD;
  localD = new Date();
  if (mm < 0) mm = 0;
  if (typeof hh === "undefined") hh = 12;
  if (typeof mi === "undefined") mi = 0;
  utcD = new Date(Date.UTC(yy, mm, dd || 1, hh, mi, ss || 0));

  if (mm == 0 && dd == 1 && utcD.getUTCHours() + utcD.getTimezoneOffset() / 60 < 0) {
    utcD.setUTCHours(0);
  } else {
    utcD.setUTCHours(utcD.getUTCHours() + utcD.getTimezoneOffset() / 60);
  }
  return utcD;
}

function date(d, cond) {
  let yy,
      mm,
      dd,
      hh,
      mi,
      aDateTime,
      aTimes,
      aTime,
      aDate,
      va,
      ISO_8601 = /^\d{4}(-\d\d(-\d\d(T\d\d:\d\d(:\d\d)?(\.\d+)?(([+-]\d\d:\d\d)|Z)?)?)?)?$/i,
      ISO_8601_FULL = /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i;

  if (isString(d)) {
    if (d.length == 0) {
      d = new Date();
    } else if (d.length > 15) {
      if (ISO_8601_FULL.test(d) || ISO_8601.test(d)) {
        d = new Date(d);
      } else {
        aDateTime = d.split(/ /g), aTimes, aTime, aDate = aDateTime[0].split(/\D/g), yy = aDate[0];
        mm = parseFloat(aDate[1]);
        dd = parseFloat(aDate[2]);
        aTime = aDateTime[1] || "09:00";
        aTimes = aTime.substring(0, 5).split(":");
        hh = parseFloat(aTimes[0]);
        mi = parseFloat(aTimes[1]);
        if (right(aTime, 2) === "AM" || right(aTime, 2) === "PM") hh += 12;
        d = localDate(yy, mm - 1, dd, hh, mi);
      }
    } else if (d.length == 14) {
      va = d.replace(/\D/g, "");
      d = localDate(va.substr(0, 4), va.substr(4, 2) - 1, number(va.substr(6, 2)), number(va.substr(8, 2)), number(va.substr(10, 2)), number(va.substr(12, 2)));
    } else if (d.length > 7) {
      va = d.replace(/\D/g, "");
      d = localDate(va.substr(0, 4), va.substr(4, 2) - 1, number(va.substr(6, 2)));
    } else if (d.length > 4) {
      va = d.replace(/\D/g, "");
      d = localDate(va.substr(0, 4), va.substr(4, 2) - 1, 1);
    } else if (d.length > 2) {
      va = d.replace(/\D/g, "");
      return localDate(va.substr(0, 4), va.substr(4, 2) - 1, 1);
    } else {
      d = new Date();
    }
  }
  if (typeof cond === "undefined" || typeof d === "undefined") {
    return d;
  } else {
    if ("add" in cond) {
      d = function (_d, opts) {
        let yy,
            mm,
            dd,
            mxdd,
            DyMilli = 1000 * 60 * 60 * 24;

        if (typeof opts["d"] !== "undefined") {
          _d.setTime(_d.getTime() + opts["d"] * DyMilli);
        } else if (typeof opts["m"] !== "undefined") {
          yy = _d.getFullYear();
          mm = _d.getMonth();
          dd = _d.getDate();
          yy = yy + parseInt(opts["m"] / 12);
          mm += opts["m"] % 12;
          mxdd = daysOfMonth(yy, mm);
          if (mxdd < dd) dd = mxdd;
          _d = new Date(yy, mm, dd, 12);
        } else if (typeof opts["y"] !== "undefined") {
          _d.setTime(_d.getTime() + opts["y"] * 365 * DyMilli);
        } else if (typeof opts["h"] !== "undefined") {
          _d.setTime(_d.getTime() + opts["h"] * 1000 * 60 * 60);
        }

        return _d;
      }(new Date(d), cond["add"]);
    }
    if ("set" in cond) {
      d = function (_d, opts) {
        let yy,
            mm,
            dd,
            processor = {
          "firstDayOfMonth": function (date) {
            yy = date.getFullYear();
            mm = date.getMonth();
            dd = 1;
            return new Date(yy, mm, dd, 12);
          },
          "lastDayOfMonth": function (date) {
            yy = date.getFullYear();
            mm = date.getMonth();
            dd = daysOfMonth(yy, mm);
            return new Date(yy, mm, dd, 12);
          }
        };
        if (opts in processor) {
          return processor[opts](_d);
        } else {
          return _d;
        }
      }(new Date(d), cond["set"]);
    }
    if ("return" in cond) {
      return function () {

        let fStr = cond["return"],
            nY,
            nM,
            nD,
            nH,
            nMM,
            nS,
            nDW,
            yre,
            regY,
            mre,
            regM,
            dre,
            regD,
            hre,
            regH,
            mire,
            regMI,
            sre,
            regS,
            dwre,
            regDW;

        nY = d.getUTCFullYear();
        nM = setDigit(d.getMonth() + 1, 2);
        nD = setDigit(d.getDate(), 2);
        nH = setDigit(d.getHours(), 2);
        nMM = setDigit(d.getMinutes(), 2);
        nS = setDigit(d.getSeconds(), 2);
        nDW = d.getDay();

        yre = /[^y]*(yyyy)[^y]*/gi;
        yre.exec(fStr);
        regY = RegExp.$1;
        mre = /[^m]*(MM)[^m]*/g;
        mre.exec(fStr);
        regM = RegExp.$1;
        dre = /[^d]*(dd)[^d]*/gi;
        dre.exec(fStr);
        regD = RegExp.$1;
        hre = /[^h]*(hh)[^h]*/gi;
        hre.exec(fStr);
        regH = RegExp.$1;
        mire = /[^m]*(mm)[^i]*/g;
        mire.exec(fStr);
        regMI = RegExp.$1;
        sre = /[^s]*(ss)[^s]*/gi;
        sre.exec(fStr);
        regS = RegExp.$1;
        dwre = /[^d]*(dw)[^w]*/gi;
        dwre.exec(fStr);
        regDW = RegExp.$1;

        if (regY === "yyyy") {
          fStr = fStr.replace(regY, right(nY, regY.length));
        }
        if (regM === "MM") {
          if (regM.length == 1) nM = d.getMonth() + 1;
          fStr = fStr.replace(regM, nM);
        }
        if (regD === "dd") {
          if (regD.length == 1) nD = d.getDate();
          fStr = fStr.replace(regD, nD);
        }
        if (regH === "hh") {
          fStr = fStr.replace(regH, nH);
        }
        if (regMI === "mm") {
          fStr = fStr.replace(regMI, nMM);
        }
        if (regS === "ss") {
          fStr = fStr.replace(regS, nS);
        }
        if (regDW == "dw") {
          fStr = fStr.replace(regDW, __WEBPACK_IMPORTED_MODULE_0__AX6Info__["a" /* default */].weekNames[nDW].label);
        }
        return fStr;
      }();
    } else {
      return d;
    }
  }
}

function dday(d, cond) {
  let memoryDay = date(d),
      DyMilli = 1000 * 60 * 60 * 24,
      today = new Date(),
      diffnum,
      thisYearMemoryDay;

  function getDayTime(_d) {
    return Math.floor(_d.getTime() / DyMilli) * DyMilli;
  }

  if (typeof cond === "undefined") {
    diffnum = number((getDayTime(memoryDay) - getDayTime(today)) / DyMilli, { floor: true });
    return diffnum;
  } else {
    diffnum = number((getDayTime(memoryDay) - getDayTime(today)) / DyMilli, { floor: true });
    if (cond["today"]) {
      today = date(cond.today);
      diffnum = number((getDayTime(memoryDay) - getDayTime(today)) / DyMilli, { floor: true });
    }
    if (cond["thisYear"]) {
      thisYearMemoryDay = new Date(today.getFullYear(), memoryDay.getMonth(), memoryDay.getDate());
      diffnum = number((getDayTime(thisYearMemoryDay) - getDayTime(today)) / DyMilli, { floor: true });
      if (diffnum < 0) {
        thisYearMemoryDay = new Date(today.getFullYear() + 1, memoryDay.getMonth(), memoryDay.getDate());
        diffnum = number((getDayTime(thisYearMemoryDay) - getDayTime(today)) / DyMilli, { floor: true });
      }
    }
    if (cond["age"]) {
      thisYearMemoryDay = new Date(today.getFullYear(), memoryDay.getMonth(), memoryDay.getDate());
      diffnum = thisYearMemoryDay.getFullYear() - memoryDay.getFullYear();
    }

    return diffnum;
  }
}

function weeksOfMonth(d) {
  let myDate = date(d);
  return {
    year: myDate.getFullYear(),
    month: myDate.getMonth() + 1,
    count: parseInt(myDate.getDate() / 7 + 1)
  };
}

function daysOfMonth(y, m) {
  if (m == 3 || m == 5 || m == 8 || m == 10) {
    return 30;
  } else if (m == 1) {
    return y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ? 29 : 28;
  } else {
    return 31;
  }
}

function setDigit(num, length, padder, radix) {
  let s = num.toString(radix || 10);
  return times(padder || '0', length - s.length) + s;
}

function times(s, count) {
  return count < 1 ? '' : new Array(count + 1).join(s);
}

function findParentNode(_target, cond) {
  if (_target) {
    while (function () {
      let result = true;
      if (typeof cond === "undefined") {
        _target = _target.parentNode ? _target.parentNode : false;
      } else if (isFunction(cond)) {
        result = cond(_target);
      } else if (isObject(cond)) {
        for (let k in cond) {
          if (k === "tagname") {
            if (_target.tagName.toLocaleLowerCase() != cond[k]) {
              result = false;
              break;
            }
          } else if (k === "clazz" || k === "class_name") {
            if ("className" in _target) {
              let klasss = _target.className.split(reClassNameSplit),
                  hasClass = false;

              for (let a = 0; a < klasss.length; a++) {
                if (klasss[a] == cond[k]) {
                  hasClass = true;
                  break;
                }
              }
              result = hasClass;
            } else {
              result = false;
              break;
            }
          } else {
            // 그외 속성값들.
            if (_target.getAttribute) {
              if (_target.getAttribute(k) != cond[k]) {
                result = false;
                break;
              }
            } else {
              result = false;
              break;
            }
          }
        }
      }
      return !result;
    }()) {
      if (_target.parentNode && _target.parentNode.parentNode) {
        _target = _target.parentNode;
      } else {
        _target = false;
        break;
      }
    }
  }
  return _target;
}

function cssNumber(val) {
  let re = /\D?(\d+)([a-zA-Z%]*)/i,
      found = ('' + val).match(re),
      unit = found[2] || "px";

  return found[1] + unit;
}

function css(val) {
  let returns;
  if (isObject(val)) {
    returns = '';
    for (let k in val) {
      returns += k + ':' + val[k] + ';';
    }
    return returns;
  } else if (isString(val)) {
    returns = {};
    let valSplited = val.split(/[ ]*;[ ]*/g);
    valSplited.forEach(function (v) {
      if ((v = v.trim()) !== "") {
        var vSplited = v.split(/[ ]*:[ ]*/g);
        returns[vSplited[0]] = vSplited[1];
      }
    });
    return returns;
  }
}

function stopEvent(e) {
  // 이벤트 중지 구문
  if (!e) e = window.event;

  //e.cancelBubble is supported by IE -
  // this will kill the bubbling process.
  e.cancelBubble = true;
  e.returnValue = false;

  //e.stopPropagation works only in Firefox.
  if (e.stopPropagation) e.stopPropagation();
  if (e.preventDefault) e.preventDefault();

  return false;
  // 이벤트 중지 구문 끝
}

const selectRange = function () {
  const processor = {
    'textRange': {
      'selectAll': function (el, range, offset) {},
      'arr': function (el, range, offset) {
        range.moveStart("character", offset[0]); // todo ie node select 체크필요
        range.collapse();
        range.moveEnd("character", offset[1]);
      },
      'start': function (el, range, offset) {
        range.moveStart("character", 0);
        range.collapse();
      },
      'end': function (el, range, offset) {
        range.moveStart("character", range.text.length);
        range.collapse();
      }
    },
    'range': {
      'selectAll': function (el, range, offset) {
        range.selectNodeContents(el);
      },
      'arr': function (el, range, offset) {
        if (isObject(offset[0])) {
          range.setStart(offset[0].node, offset[0].offset);
          range.setEnd(offset[1].node, offset[1].offset);
        } else {
          range.setStart(el.firstChild, offset[0]);
          range.setEnd(el.firstChild, offset[1]);
        }
      },
      'start': function (el, range, offset) {
        range.selectNodeContents(el);
        range.collapse(true);
      },
      'end': function (el, range, offset) {
        range.selectNodeContents(el);
        range.collapse(false);
      }
    }
  };
  return function (el, offset) {
    let range, rangeType, selection;

    if (el instanceof jQuery) {
      el = el.get(0);
    }
    if (!el) return;

    // 레인지 타입 선택
    if (doc.body.createTextRange) {
      range = document.body.createTextRange();
      range.moveToElementText(el);
      rangeType = "textRange";
    } else if (window.getSelection) {
      selection = window.getSelection();
      range = document.createRange();
      rangeType = "range";
    }

    // range 적용
    if (typeof offset == "undefined") {
      processor[rangeType].selectAll.call(this, el, range, offset);
    } else if (isArray(offset)) {
      processor[rangeType].arr.call(this, el, range, offset);
    } else {
      for (var key in processor[rangeType]) {
        if (offset == key) {
          processor[rangeType][key].call(this, el, range, offset);
          break;
        }
      }
    }

    // 포커스 및 셀렉트
    if (doc.body.createTextRange) {
      range.select();
      el.focus();
    } else if (window.getSelection) {
      el.focus();
      selection.removeAllRanges();
      selection.addRange(range);
    }
  };
}();

// https://github.com/lodash/lodash/blob/master/debounce.js
const debounce = function (func, wait, options) {
  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;

  let lastInvokeTime = 0;
  let leading = false;
  let maxing = false;
  let trailing = true;

  if (typeof func != 'function') {
    throw new TypeError('Expected a function');
  }
  wait = +wait || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    const args = lastArgs;
    const thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    const result = wait - timeSinceLastCall;

    return maxing ? Math.min(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    const time = Date.now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(Date.now());
  }

  function debounced(...args) {
    const time = Date.now();
    const isInvoking = shouldInvoke(time);

    lastArgs = args;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
};

//https://github.com/lodash/lodash/blob/master/throttle.js
const throttle = function (func, wait, options) {
  let leading = true;
  let trailing = true;

  if (typeof func != 'function') {
    throw new TypeError('Expected a function');
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
};

function deepCopy(obj) {
  let r, l;
  if (typeof obj == 'object') {
    if (isArray(obj)) {
      l = obj.length;
      r = new Array(l);
      for (let i = 0; i < l; i++) {
        r[i] = deepCopy(obj[i]);
      }
      return r;
    } else {
      return Object.assign({}, obj);
    }
  }
  return obj;
}

// jQuery extend
function extend() {
  let options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

  // Handle a deep copy situation
  if (typeof target === "boolean") {
    deep = target;

    // Skip the boolean and the target
    target = arguments[i] || {};
    i++;
  }

  // Handle case when target is a string or something (possible in deep copy)
  if (typeof target !== "object" && !isFunction(target)) {
    target = {};
  }

  // Extend jQuery itself if only one argument is passed
  if (i === length) {
    target = this;
    i--;
  }

  for (; i < length; i++) {

    // Only deal with non-null/undefined values
    if ((options = arguments[i]) != null) {

      // Extend the base object
      for (name in options) {
        src = target[name];
        copy = options[name];

        // Prevent never-ending loop
        if (target === copy) {
          continue;
        }

        // Recurse if we're merging plain objects or arrays
        if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {

          if (copyIsArray) {
            copyIsArray = false;
            clone = src && isArray(src) ? src : [];
          } else {
            clone = src && isPlainObject(src) ? src : {};
          }

          // Never move original objects, clone them
          target[name] = extend(deep, clone, copy);

          // Don't bring in undefined values
        } else if (copy !== undefined) {
          target[name] = copy;
        }
      }
    }
  }

  // Return the modified object
  return target;
}

function escapeHtml(s) {
  if (_toString.call(s) != "[object String]") return s;
  if (!s) return "";
  return s.replace(/[\<\>\&\"]/gm, function (match) {
    switch (match) {
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case "&":
        return "&amp;";
      case "\"":
        return "&quot;";
      default:
        return match;
    }
  });
}

function unescapeHtml(s) {
  if (_toString.call(s) != "[object String]") return s;
  if (!s) return "";
  return s.replace(/(&lt;)|(&gt;)|(&amp;)|(&quot;)/gm, function (match) {
    switch (match) {
      case "&lt;":
        return "<";
      case "&gt;":
        return ">";
      case "&amp;":
        return "&";
      case "&quot;":
        return "\"";
      default:
        return match;
    }
  });
}

/**
 * @namespace ax6string
 * @example
 * ```js
 * AX6Util.string("{0} is dead").format("A");
 * AX6Util.string("String").escape();
 * AX6Util.string("String").unescape();
 * AX6Util.string("String").encode();
 * AX6Util.string("String").decode();
 * AX6Util.string("String").left(1);
 * AX6Util.string("String").right(1);
 * AX6Util.string("String").camelCase();
 * AX6Util.string("String").snakeCase();
 * ```
 */

function string(_string) {
  return new function (_string) {
    this.value = _string;
    this.toString = function () {
      return this.value;
    };
    this.format = function () {
      let args = [];
      for (let i = 0, l = arguments.length; i < l; i++) {
        args = args.concat(arguments[i]);
      }
      return this.value.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] != 'undefined' ? args[number] : match;
      });
    };
    this.escape = function () {
      return escapeHtml(this.value);
    };
    this.unescape = function () {
      return unescapeHtml(this.value);
    };
    this.encode = function () {
      return encode(this.value);
    };
    this.decode = function () {
      return decode(this.value);
    };
    this.left = function (_pos) {
      return left(this.value, _pos);
    };
    this.right = function (_pos) {
      return right(this.value, _pos);
    };
    this.camelCase = function () {
      return camelCase(this.value);
    };
    this.snakeCase = function () {
      return snakeCase(this.value);
    };
  }(_string);
}

function color(_hexColor) {

  const matchers = function () {

    // <http://www.w3.org/TR/css3-values/#integers>
    const CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    const CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    const CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    const PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    const PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();

  const convertObject = function (_color) {
    let match;
    if (match = matchers.rgb.exec(_color)) {
      return { r: match[1], g: match[2], b: match[3] };
    }
    if (match = matchers.rgba.exec(_color)) {
      return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if (match = matchers.hsl.exec(_color)) {
      return { h: match[1], s: match[2], l: match[3] };
    }
    if (match = matchers.hsla.exec(_color)) {
      return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if (match = matchers.hsv.exec(_color)) {
      return { h: match[1], s: match[2], v: match[3] };
    }
    if (match = matchers.hsva.exec(_color)) {
      return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if (match = matchers.hex8.exec(_color)) {
      return {
        r: parseInt(match[1], 16),
        g: parseInt(match[2], 16),
        b: parseInt(match[3], 16),
        a: parseInt(match[4] / 255, 16),
        format: "hex8"
      };
    }
    if (match = matchers.hex6.exec(_color)) {
      return {
        r: parseInt(match[1], 16),
        g: parseInt(match[2], 16),
        b: parseInt(match[3], 16),
        format: "hex"
      };
    }
    if (match = matchers.hex4.exec(_color)) {
      return {
        r: parseInt(match[1] + '' + match[1], 16),
        g: parseInt(match[2] + '' + match[2], 16),
        b: parseInt(match[3] + '' + match[3], 16),
        a: parseInt(match[4] + '' + match[4], 16),
        format: "hex8"
      };
    }
    if (match = matchers.hex3.exec(_color)) {
      return {
        r: parseInt(match[1] + '' + match[1], 16),
        g: parseInt(match[2] + '' + match[2], 16),
        b: parseInt(match[3] + '' + match[3], 16),
        format: "hex"
      };
    }

    return false;
  };

  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
  }

  function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
  }

  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }

    return n;
  }

  function convertTo255(n) {
    return number(Math.min(255, Math.max(n, 0)), { 'round': 2 });
  }

  function convertToHex(n) {
    return setDigit(Math.round(n).toString(16), 2);
  }

  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = "100%";
    }

    let processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
  }

  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    let max = Math.max(r, g, b),
        min = Math.min(r, g, b);
    let h,
        s,
        l = (max + min) / 2;

    if (max == min) {
      h = s = 0; // achromatic
    } else {
      let d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    return { h: h, s: s, l: l };
  }

  function hslToRgb(h, s, l) {
    let r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }

    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      let q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      let p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
  }

  return new function (_color) {
    this._originalValue = _color;
    _color = convertObject(_color);
    this.r = _color.r;
    this.g = _color.g;
    this.b = _color.b;
    this.a = _color.a || 1;
    this._format = _color.format;
    this._hex = convertToHex(this.r) + convertToHex(this.g) + convertToHex(this.b);

    this.getHexValue = function () {
      return this._hex;
    };

    this.lighten = function (amount) {
      amount = amount === 0 ? 0 : amount || 10;
      let hsl = rgbToHsl(this.r, this.g, this.b),
          rgb = {};

      hsl.l += amount / 100;
      hsl.l = Math.min(1, Math.max(0, hsl.l));
      hsl.h = hsl.h * 360;

      rgb = hslToRgb(hsl.h, convertToPercentage(hsl.s), convertToPercentage(hsl.l));

      return color('rgba(' + convertTo255(rgb.r) + ', ' + convertTo255(rgb.g) + ', ' + convertTo255(rgb.b) + ', ' + this.a + ')');
    };

    this.darken = function (amount) {
      amount = amount === 0 ? 0 : amount || 10;
      let hsl = rgbToHsl(this.r, this.g, this.b),
          rgb = {};

      hsl.l -= amount / 100;
      hsl.l = Math.min(1, Math.max(0, hsl.l));
      hsl.h = hsl.h * 360;

      rgb = hslToRgb(hsl.h, convertToPercentage(hsl.s), convertToPercentage(hsl.l));

      return color('rgba(' + convertTo255(rgb.r) + ', ' + convertTo255(rgb.g) + ', ' + convertTo255(rgb.b) + ', ' + this.a + ')');
    };

    this.getBrightness = function () {
      return (this.r * 299 + this.g * 587 + this.b * 114) / 1000;
    };

    this.isDark = function () {
      return this.getBrightness() < 128;
    };

    this.isLight = function () {
      return !this.isDark();
    };

    this.getHsl = function () {
      let hsl = rgbToHsl(this.r, this.g, this.b);
      hsl.l = Math.min(1, Math.max(0, hsl.l));
      hsl.h = hsl.h * 360;
      return {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l
      };
    };
  }(_hexColor);
}

/* harmony default export */ __webpack_exports__["a"] = ({

  /**
   * jsonString 으로 alert 합니다.
   * @param {Object|Array|String|Number} O
   * @returns {Object|Array|String|Number} O
   * @example ```js
   * AX6Util.alert({a:1,b:2});
   * AX6Util.alert("정말?");
   * ```
   */
  alert: alert,
  /**
   * Object나 Array의 아이템으로 사용자 함수를 호출합니다.
   * @param {Object|Array} O
   * @param {Function} _fn
   * @example
   * ```js
   * var axf = AX6Util;
   * axf.each([0,1,2], function(){
   * 	// with this
   * });
   * axf.each({a:1, b:2}, function(){
   * 	// with this
   * });
   * ```
   */
  each: each,
  /**
   * 원본 아이템들을 이용하여 사용자 함수의 리턴값이 참인 아이템의 위치나 키값을 반환합니다.
   * @param {Object|Array} O
   * @param {Function|String|Number} _fn - 함수 또는 값
   * @returns {Number|String}
   * @example
   * ```js
   * var myArray = [0,1,2,3,4,5,6];
   * var myObject = {a:"123","b":"123",c:123};
   *
   * AX6Util.search(myArray,  function(){
   *    return this > 3;
   * });
   * // 4
   * AX6Util.search(myObject,  function(k, v){
   *    return v === 123;
   * });
   * // "c"
   * AX6Util.search([1,2,3,4], 3);
   * // 2
   * AX6Util.search([1,2], 4);
   * // -1
   * AX6Util.search(["name","value"], "value");
   * // 1
   * AX6Util.search(["name","value"], "values");
   * // -1
   * AX6Util.search({k1:"name",k2:"value"}, "value2");
   * // -1
   * AX6Util.search({k1:"name",k2:"value"}, "value");
   * // "k2"
   * ```
   */
  search: search,
  /**
   * 배열또는 오브젝트의 각 아이템을 인자로 하는 사용자 함수의 결과가 참인 아이템들의 배열을 반환합니다.
   * @param {Object|Array} O
   * @param {Function} _fn
   * @returns {Array}
   * @example
   * ```js
   * var aarray = [5,4,3,2,1];
   * result = AX6Util.filter( aarray, function(){
   *    return this % 2;
   * });
   * console.log(result);
   * // [5, 3, 1]
   *
   * var filObject = {a:1, s:"string", oa:{pickup:true, name:"AXISJ"}, os:{pickup:true, name:"AX5"}};
   * result = AX6Util.filter( filObject, function(){
   * 	return this.pickup;
   * });
   * console.log( AX6Util.toJson(result) );
   * // [{"pickup": , "name": "AXISJ"}, {"pickup": , "name": "AX5"}]
   * ```
   */
  filter: filter,
  /**
   * Object를 JSONString 으로 반환합니다.
   * @method AX6Util.toJson
   * @param {Object|Array} O
   * @returns {String} JSON
   * @example
   * ```js
   * var ax = AX6Util;
   * var myObject = {
   *    a:1, b:"2", c:{axj:"what", arrs:[0,2,"3"]},
   *    fn: function(abcdd){
   *        return abcdd;
   *    }
   * };
   * console.log( ax.toJson(myObject) );
   * ```
   */
  toJson: toJson,
  /**
   * 관용의 JSON Parser
   * @param {String} JSONString
   * @param {Boolean} [force] - 강제 적용 여부 (json 문자열 검사를 무시하고 오브젝트 변환을 시도합니다.)
   * @returns {Object}
   * @example
   * ```
   * console.log(AX6Util.parseJson('{"a":1}'));
   * // Object {a: 1}
   * console.log(AX6Util.parseJson("{'a':1, 'b':'b'}"));
   * // Object {a: 1, b: "b"}
   * console.log(AX6Util.parseJson("{'a':1, 'b':function(){return 1;}}", true));
   * // Object {a: 1, b: function}
   * console.log(AX6Util.parseJson("{a:1}"));
   * // Object {a: 1}
   * console.log(AX6Util.parseJson("[1,2,3]"));
   * // [1, 2, 3]
   * console.log(AX6Util.parseJson("['1','2','3']"));
   * // ["1", "2", "3"]
   * console.log(AX6Util.parseJson("[{'a':'99'},'2','3']"));
   * // [Object, "2", "3"]
   * ```
   */
  parseJson: parseJson,
  /**
   * 오브젝트의 첫번째 아이템을 반환합니다.
   * @param {Object|Array} O
   * @returns {Object}
   * @example
   * ```js
   * AX6Util.first({a:1, b:2});
   * // Object {a: 1}
   * AX6Util.first([1,2,3,4]);
   * // 1
   * ```
   */
  first: first,
  /**
   * 오브젝트의 마지막 아이템을 반환합니다.
   * @param {Object|Array} O
   * @returns {Object}
   * @example
   * ```js
   * AX6Util.last({a:1, b:2});
   * // Object {b: 2}
   * AX6Util.last([1,2,3,4]);
   * // 4
   * ```
   */
  last: last,
  /**
   * 문자열의 특정 문자열까지 잘라주거나 원하는 포지션까지 잘라줍니다.
   * @param {String} str - 문자열
   * @param {String|Number} pos - 찾을 문자열 또는 포지션
   * @returns {String}
   * @example
   * ```js
   * AX6Util.left("abcd.efd", 3);
   * // abc
   * AX6Util.left("abcd.efd", ".");
   * // abcd
   * ```
   */
  left: left,
  /**
   * 문자열의 특정 문자열까지 잘라주거나 원하는 포지션까지 잘라줍니다.
   * @param {String} str - 문자열
   * @param {String|Number} pos - 찾을 문자열 또는 포지션
   * @returns {String}
   * @example
   * ```js
   * AX6Util.right("abcd.efd", 3);
   * // efd
   * AX6Util.right("abcd.efd", ".");
   * // efd
   * ```
   */
  right: right,
  /**
   * 인자의 타입을 반환합니다.
   * @param {Object|Array|String|Number|Element|Etc} O
   * @returns {String} window|element|object|array|function|string|number|undefined|nodelist
   * @example
   * ```js
   * var axf = AX6Util;
   * var a = 11;
   * var b = "11";
   * console.log( axf.getType(a) );
   * console.log( axf.getType(b) );
   * ```
   */
  getType: getType,
  /**
   * 오브젝트가 window 인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isWindow: isWindow,
  /**
   * 오브젝트가 HTML 엘리먼트여부인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isElement: isElement,
  /**
   * 오브젝트가 Object인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isObject: isObject,
  /**
   * 오브젝트가 Array인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isArray: isArray,
  /**
   * 오브젝트가 Function인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isFunction: isFunction,
  /**
   * 오브젝트가 String인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isString: isString,
  /**
   * 오브젝트가 Number인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isNumber: isNumber,
  /**
   * 오브젝트가 NodeList인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isNodelist: isNodelist,
  /**
   * 오브젝트가 undefined인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  isUndefined: isUndefined,
  /**
   * 오브젝트가 undefined이거나 null이거나 빈값인지 판단합니다.
   * @param {Object} O
   * @returns {Boolean}
   */
  /**
   * 오브젝트가 날자값인지 판단합니다.
   * @param {Date} O
   * @returns {Boolean}
   * @example
   * ```js
   * AX6Util.isDate('2016-09-30');
   * // false
   * AX6Util.isDate( new Date('2016-09-30') );
   * // true
   * ```
   */
  isDate: isDate,
  /**
   * 오브젝트가 날짜형 변수인지 판단합니다
   */
  isDateFormat: isDateFormat,
  /**
   * @param {*} object
   * @return {Boolean}
   */
  isNothing: isNothing,
  /**
   * @param {*} object
   * @return {Boolean}
   */
  isPlainObject: isPlainObject,
  /**
   * 쿠키를 설정합니다.
   * @param {String} cname - 쿠키이름
   * @param {String} cvalue - 쿠키값
   * @param {Number} [exdays] - 쿠키 유지일수
   * @param {Object} [opts] - path, domain 설정 옵션
   * @example
   * ```js
   * AX6Util.setCookie("jslib", "AX5");
   * AX6Util.setCookie("jslib", "AX5", 3);
   * AX6Util.setCookie("jslib", "AX5", 3, {path:"/", domain:".axisj.com"});
   * ```
   */
  setCookie: setCookie,
  /**
   * 쿠키를 가져옵니다.
   * @param {String} cname
   * @returns {String} cookie value
   * @example
   * ```js
   * AX6Util.getCookie("jslib");
   * ```
   */
  getCookie: getCookie,
  /**
   * css형 문자열이나 특수문자가 포함된 문자열을 카멜케이스로 바꾸어 반환합니다.
   * @param {String} str
   * @returns {String}
   * @example
   * ```js
   * AX6Util.camelCase("inner-width");
   * AX6Util.camelCase("innerWidth");
   * // innerWidth
   * ```
   */
  camelCase: camelCase,
  /**
   * css형 문자열이나 카멜케이스문자열을 스네이크 케이스 문자열로 바꾸어 반환합니다.
   * @param {String} str
   * @returns {String}
   * @example
   * ```js
   * AX6Util.snakeCase("innerWidth");
   * AX6Util.snakeCase("inner-Width");
   * AX6Util.snakeCase("innerWidth");
   * // inner-width
   * ```
   */
  snakeCase: snakeCase,
  /**
   * 문자열에서 -. 을 제외한 모든 문자열을 제거하고 숫자로 반환합니다. 옵션에 따라 원하는 형식의 숫자로 변환 할 수 도 있습니다.
   * @param {String|Number} str
   * @param {Object} cond - 옵션
   * @returns {String|Number}
   * @example
   * ```js
   * var cond = {
   * 	round: {Number|Boolean} - 반올림할 자릿수,
   * 	money: {Boolean} - 통화,
   * 	abs: {Boolean} - 절대값,
   * 	byte: {Boolean} - 바이트
   * }
   *
   * console.log(AX6Util.number(123456789.678, {round:1}));
   * console.log(AX6Util.number(123456789.678, {round:1, money:true}));
   * console.log(AX6Util.number(123456789.678, {round:2, byte:true}));
   * console.log(AX6Util.number(-123456789.8888, {abs:true, round:2, money:true}));
   * console.log(AX6Util.number("A-1234~~56789.8~888PX", {abs:true, round:2, money:true}));
   *
   * //123456789.7
   * //123,456,789.7
   * //117.7MB
   * //123,456,789.89
   * //123,456,789.89
   * ```
   */
  number: number,
  /**
   * 배열 비슷한 오브젝트를 배열로 변환해줍니다.
   * @param {Object|Elements|Arguments} O
   * @returns {Array}
   * @example
   * ```js
   * AX6Util.toArray(arguments);
   * //
   * ```
   */
  toArray: toArray,
  /**
   * 오브젝트를 파라미터형식으로 또는 파라미터를 오브젝트 형식으로 변환합니다.
   * @param {Object|Array|String} O
   * @param {String} [cond] - param|object
   * @returns {Object|String}
   * @example
   * ```
   * AX6Util.param({a:1,b:'1232'}, "param");
   * AX6Util.param("a=1&b=1232", "param");
   * // "a=1&b=1232"
   * AX6Util.param("a=1&b=1232");
   * // {a: "1", b: "1232"}
   * ```
   */
  param: param,
  error: error,
  /**
   * 날짜 형식의 문자열이나 Date객체를 조건에 맞게 처리 한 후 원하는 return 값으로 반환합니다.
   * @param {String|Date} d
   * @param {Object} cond
   * @returns {Date|String}
   * @example
   * ```js
   * AX6Util.date('2013-01-01'); // Tue Jan 01 2013 23:59:00 GMT+0900 (KST)
   * AX6Util.date((new Date()), {add:{d:10}, return:'yyyy/MM/dd'}); // "2015/07/01"
   * AX6Util.date('1919-03-01', {add:{d:10}, return:'yyyy/MM/dd hh:mm:ss'}); // "1919/03/11 23:59:00"
   * ```
   */
  date: date,
  /**
   * 인자인 날짜가 오늘부터 몇일전인지 반환합니다. 또는 인자인 날짜가 가까운 미래에 몇일 후인지 반환합니다.
   * @param {String|Data} d
   * @param {Object} cond
   * @returns {Number}
   * @example
   * ```js
   * AX6Util.dday('2016-01-29');
   * // 1
   * AX6Util.dday('2016-01-29', {today:'2016-01-28'});
   * // 1
   * AX6Util.dday('1977-03-29', {today:'2016-01-28', age:true});
   * // 39
   * ```
   */
  dday: dday,
  /**
   * 년월에 맞는 날자수를 반환합니다.
   * (new Date()).getMonth() 기준으로 월값을 보냅니다. "2월" 인경우 "1" 을 넘기게 됩니다.
   * @param {Number} y
   * @param {Number} m
   * @returns {Number}
   * @examples
   * ```js
   * AX6Util.daysOfMonth(2015, 11); // 31
   * AX6Util.daysOfMonth(2015, 1); // 28
   * ```
   */
  daysOfMonth: daysOfMonth,
  /**
   * 인자인 날짜가 몇년 몇월의 몇번째 주차인지 반환합니다.
   * @param {String|Data} d
   * @returns {Object}
   * @example
   * ```js
   * AX6Util.weeksOfMonth("2015-10-01"); // {year: 2015, month: 10, count: 1}
   * AX6Util.weeksOfMonth("2015-09-19"); // {year: 2015, month: 9, count: 3}
   * ```
   */
  weeksOfMonth: weeksOfMonth,
  /**
   * 원하는 횟수 만큼 자릿수 맞춤 문자열을 포함한 문자열을 반환합니다.
   * 문자열 길이보다 작은값을 보내면 무시됩니다.
   * @param {String|Number} num
   * @param {Number} length
   * @param {String} [padder=0]
   * @param {Number} [radix]
   * @returns {String}
   * @example
   * ```
   * AX6Util.setDigit(2016, 6)
   * // "002016"
   * AX6Util.setDigit(2016, 2)
   * // "2016"
   * ```
   */
  setDigit: setDigit,
  /**
   * 문자열을 지정된 수만큼 반복 합니다.
   * @param {String} s
   * @param {Number} count
   * @returns {string}
   * @example
   * ```
   * AX6Util.times(2016, 2)
   * //"20162016"
   * ```
   */
  times: times,
  /**
   * 타겟엘리먼트의 부모 엘리멘트 트리에서 원하는 조건의 엘리먼트를 얻습니다.
   * @param {Element} _target - target element
   * @param {Object|Function} cond - 원하는 element를 찾을 조건
   * @returns {Element}
   * @example
   * ```
   * // cond 속성정의
   * var cond = {
   * 	tagname: {String} - 태그명 (ex. a, div, span..),
   * 	clazz: {String} - 클래스명
   * 	[, 그 외 찾고 싶은 attribute명들]
   * };
   * console.log(
   * console.log(
   *    AX6Util.findParentNode(e.target, {tagname:"a", clazz:"ax-menu-handel", "data-custom-attr":"attr_value"})
   * );
   * // cond 함수로 처리하기
   * jQuery('#id').bind("click.app_expand", function(e){
   * 	var target = AX6Util.findParentNode(e.target, function(target){
   * 		if($(target).hasClass("aside")){
   * 			return true;
   * 		}
   * 		else{
   * 			return true;
   * 		}
   * 	});
   * 	//client-aside
   * 	if(target.id !== "client-aside"){
   * 		// some action
   * 	}
   * });
   * ```
   */
  findParentNode: findParentNode,
  /**
   * @param {String|Number} val
   * @returns {String}
   * @example
   * ```
   * console.log(AX6Util.cssNumber("100px"))
   * console.log(AX6Util.cssNumber("100%"))
   * console.log(AX6Util.cssNumber("100"))
   * console.log(AX6Util.cssNumber(100))
   * console.log(AX6Util.cssNumber("!!100@#"))
   * ```
   */
  cssNumber: cssNumber,
  /**
   * css string 및 object 를 넘기면 object 및 string 으로 변환되어 리턴됩니다.
   * @param {Object|String} val - CSS String or CSS Object
   * @returns {String|Object}
   * @example
   * ```
   * console.log(AX6Util.css({background: "#ccc", padding: "50px", width: "100px"}));
   * //"background:#ccc;padding:50px;width:100px;"
   * console.log(AX6Util.css('width:100px;padding: 50px; background: #ccc'));
   * // object {width: "100px", padding: "50px", background: "#ccc"}
   * ```
   */
  css: css,
  /**
   * @param {Event} e
   * @example
   * ```
   * AX6Util.stopEvent(e);
   * ```
   */
  stopEvent: stopEvent,
  /**
   * @param {Element} el
   * @param {Element} offset
   * @example
   * ```
   * AX6Util.selectRange($("#select-test-0")); // selectAll
   * AX6Util.selectRange($("#select-test-0"), "selectAll"); //selectAll
   * AX6Util.selectRange($("#select-test-0"), "start"); // focus on start
   * AX6Util.selectRange($("#select-test-0"), "end"); // focus on end
   * AX6Util.selectRange($("#select-test-0"), [1, 5]); // select 1~5
   * ```
   */
  selectRange: selectRange,
  /**
   * 지정한 시간을 지연시켜 함수를 실행합니다.
   * @param {Function} func
   * @param {Number} wait
   * @param {Object} options
   * @returns {debounced}
   * @example
   * ```js
   * // https://github.com/lodash/lodash/blob/master/debounce.js
   * var debounceFn = AX6Util.debounce(function( val ) { console.log(val); }, 300);
   * $(document.body).click(function(){
         *  debounceFn(new Date());
         * });
   * ```
   */
  debounce: debounce,
  /**
   * @param func
   * @param wait
   * @param options
   * @return {throttled}
   * @example
   * ```js
   * //https://github.com/lodash/lodash/blob/master/throttle.js
   * var throttleFn = AX6Util.throttle(function( val ) { console.log(val); }, 300);
   * $(window).scroll(function(){
     *      throttleFn(new Date());
     * });
   * ```
   */
  throttle: throttle,
  /**
   * @param {Object} obj
   * @returns {Object}
   * @example
   * ```js
   * var obj = [
   *  {name:"A", child:[{name:"a-1"}]},
   *  {name:"B", child:[{name:"b-1"}], callBack: function(){ console.log('callBack'); }}
   * ];
   * var copiedObj = AX6Util.deepCopy(obj)
   * ```
   */
  deepCopy: deepCopy,
  /**
   * @param {Boolean} [deep]
   * @param {Object} src
   * @param {Object} copy
   * @return {Object}
   * @example
   * ```js
   * AX6Util.extend({a:1}, {b:1});
   * AX6Util.extend(true, {a:1, b:{name:'t'}, {b:{etc:true}});
   * ```
   */
  extend: extend,
  /**
   * HTML 문자열을 escape 처리합니다.
   * "&lt;" represents the < sign.
   * "&gt;" represents the > sign.
   * "&amp;" represents the & sign.
   * "&quot; represents the " mark.
   * [Character entity references](https://www.w3.org/TR/html401/charset.html#h-5.3)
   * @param {String} s
   * @returns {string}
   * @example
   * ```
   * AX6Util.escapeHtml('HTML <span>string</span> & "escape"')
   * //"HTML &lt;span&gt;string&lt;/span&gt; &amp; &quot;escape&quot;"
   * ```
   */
  escapeHtml: escapeHtml,
  /**
   * HTML 문자열을 unescape 처리합니다.
   * escapeHtml를 참고하세요.
   * @param {String} s
   * @returns {string}
   * @example
   * ```
   * AX6Util.unescapeHtml('HTML &lt;span&gt;string&lt;/span&gt; &amp; &quot;escape&quot;')
   * //"HTML <span>string</span> & "escape""
   * ```
   */
  unescapeHtml: unescapeHtml,
  /**
   * @param {String} tmpl
   * @param {*} args
   * @return {ax6string}
   * @example
   * ```js
   * AX6Util.string("{0} is dead, but {1} is alive! {0} {2}").format("ASP", "ASP.NET");
   * AX6Util.string("{0} is dead, but {1} is alive! {0} {2}").format(["ASP", "ASP.NET"]);
   * AX6Util.stinrg("{0} counts").format(100);
   * ```
   */
  string: string,
  /**
   * @param _hexColor
   * @return {ax5color}
   * @example
   * ```js
   * AX6Util.color("#ff3300").lighten(10).getHexValue()
   * console.log(AX6Util.color("#ff3300").darken(10).getHexValue());
   * ```
   */
  color: color
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.2.2 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-attributes/prop,-attributes/support,-deprecated,-effects,-effects/Tween,-effects/animatedSelector,-wrap,-deferred,-deferred/exceptionHook,-queue,-queue/delay,-core/ready,-event/focusin,-event/alias,-css/showHide,-css/hiddenVisibleSelectors
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-07-14T08:07Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.2.2 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-attributes/prop,-attributes/support,-deprecated,-effects,-effects/Tween,-effects/animatedSelector,-wrap,-deferred,-deferred/exceptionHook,-queue,-queue/delay,-core/ready,-event/focusin,-event/alias,-css/showHide,-css/hiddenVisibleSelectors",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		return typeof obj === "function" && typeof obj.nodeType !== "number";
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var documentElement = document.documentElement;



/*
 * Optional (non-Sizzle) selector module for custom builds.
 *
 * Note that this DOES NOT SUPPORT many documented jQuery
 * features in exchange for its smaller size:
 *
 * Attribute not equal selector
 * Positional selectors (:first; :eq(n); :odd; etc.)
 * Type selectors (:input; :checkbox; :button; etc.)
 * State-based selectors (:animated; :visible; :hidden; etc.)
 * :has(selector)
 * :not(complex selector)
 * custom selectors via Sizzle extensions
 * Leading combinators (e.g., $collection.find("> *"))
 * Reliable functionality on XML fragments
 * Requiring all parts of a selector to match elements under context
 *   (e.g., $div.find("div > *") now matches children of $div)
 * Matching against non-elements
 * Reliable sorting of disconnected nodes
 * querySelectorAll bug fixes (e.g., unreliable :focus on WebKit)
 *
 * If any of these are unacceptable tradeoffs, either use Sizzle or
 * customize this stub for the project's specific needs.
 */

var hasDuplicate, sortInput,
	sortStable = jQuery.expando.split( "" ).sort( sortOrder ).join( "" ) === jQuery.expando,
	matches = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.mozMatchesSelector ||
		documentElement.oMatchesSelector ||
		documentElement.msMatchesSelector,

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	};

function sortOrder( a, b ) {

	// Flag for duplicate removal
	if ( a === b ) {
		hasDuplicate = true;
		return 0;
	}

	// Sort on method existence if only one input has compareDocumentPosition
	var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
	if ( compare ) {
		return compare;
	}

	// Calculate position if both inputs belong to the same document
	compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
		a.compareDocumentPosition( b ) :

		// Otherwise we know they are disconnected
		1;

	// Disconnected nodes
	if ( compare & 1 ) {

		// Choose the first element that is related to our preferred document
		if ( a === document || a.ownerDocument === document &&
			jQuery.contains( document, a ) ) {
			return -1;
		}
		if ( b === document || b.ownerDocument === document &&
			jQuery.contains( document, b ) ) {
			return 1;
		}

		// Maintain original order
		return sortInput ?
			( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
			0;
	}

	return compare & 4 ? -1 : 1;
}

function uniqueSort( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	hasDuplicate = false;
	sortInput = !sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
}

function escape( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
}

jQuery.extend( {
	uniqueSort: uniqueSort,
	unique: uniqueSort,
	escapeSelector: escape,
	find: function( selector, context, results, seed ) {
		var elem, nodeType,
			i = 0;

		results = results || [];
		context = context || document;

		// Same basic safeguard as Sizzle
		if ( !selector || typeof selector !== "string" ) {
			return results;
		}

		// Early return if context is not an element or document
		if ( ( nodeType = context.nodeType ) !== 1 && nodeType !== 9 ) {
			return [];
		}

		if ( seed ) {
			while ( ( elem = seed[ i++ ] ) ) {
				if ( jQuery.find.matchesSelector( elem, selector ) ) {
					results.push( elem );
				}
			}
		} else {
			jQuery.merge( results, context.querySelectorAll( selector ) );
		}

		return results;
	},
	text: function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {

			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {

				// Do not traverse comment nodes
				ret += jQuery.text( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

			// Use textContent for elements
			return elem.textContent;
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}

		// Do not include comment or processing instruction nodes

		return ret;
	},
	contains: function( a, b ) {
		var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b && b.parentNode;
		return a === bup || !!( bup && bup.nodeType === 1 && adown.contains( bup ) );
	},
	isXMLDoc: function( elem ) {

		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && ( elem.ownerDocument || elem ).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	},
	expr: {
		attrHandle: {},
		match: {
			bool: new RegExp( "^(?:checked|selected|async|autofocus|autoplay|controls|defer" +
				"|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$", "i" ),
			needsContext: /^[\x20\t\r\n\f]*[>+~]/
		}
	}
} );

jQuery.extend( jQuery.find, {
	matches: function( expr, elements ) {
		return jQuery.find( expr, null, null, elements );
	},
	matchesSelector: function( elem, expr ) {
		return matches.call( elem, expr );
	},
	attr: function( elem, name ) {
		var fn = jQuery.expr.attrHandle[ name.toLowerCase() ],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			value = fn && hasOwn.call( jQuery.expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, jQuery.isXMLDoc( elem ) ) :
				undefined;
		return value !== undefined ? value : elem.getAttribute( name );
	}
} );



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( ">tbody", elem )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "5px";

		// Support: IE 9 only
		// Detect misreporting of content dimensions for border-box elements (gh-3699)
		borderBoxReliableVal = divStyle.width[ 0 ] === "5";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "5px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, borderBoxReliableVal, pixelMarginRightVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:10px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		borderBoxReliable: function() {
			computeStyleTests();
			return borderBoxReliableVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test( val ) ) {
		return val;
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/Height when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	if ( val === "auto" ) {
		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && !support.borderBoxReliable() ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


support.focusin = "onfocusin" in window;


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





var readyCallbacks = [],
	whenReady = function( fn ) {
		readyCallbacks.push( fn );
	},
	executeReady = function( fn ) {

		// Prevent errors from freezing future callback execution (gh-1823)
		// Not backwards-compatible as this does not execute sync
		window.setTimeout( function() {
			fn.call( document, jQuery );
		} );
	};

jQuery.fn.ready = function( fn ) {
	whenReady( fn );
	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		whenReady = function( fn ) {
			readyCallbacks.push( fn );

			while ( readyCallbacks.length ) {
				fn = readyCallbacks.shift();
				if ( jQuery.isFunction( fn ) ) {
					executeReady( fn );
				}
			}
		};

		whenReady();
	}
} );

// Make jQuery.ready Promise consumable (gh-1778)
jQuery.ready.then = jQuery.fn.ready;

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE9-10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}



return jQuery;
} );


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const win = window;
const doc = win ? win.document : null;
const docElem = win ? win.document.documentElement : null;

let eventKeys = {
  BACKSPACE: 8, TAB: 9,
  RETURN: 13, ESC: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, DELETE: 46,
  HOME: 36, END: 35, PAGEUP: 33, PAGEDOWN: 34, INSERT: 45, SPACE: 32
};
let weekNames = [{ label: "SUN" }, { label: "MON" }, { label: "TUE" }, { label: "WED" }, { label: "THU" }, { label: "FRI" }, { label: "SAT" }];
let wheelEnm = win && /Firefox/i.test(navigator.userAgent) ? "DOMMouseScroll" : "mousewheel";
let errorMsg = {};

const onerror = function () {
  console.error(arguments);
};
const browser = function (ua, mobile, browserName, match, browser, browserVersion) {
  if (!win || !win.navigator) return {};

  ua = navigator.userAgent.toLowerCase(), mobile = ua.search(/mobile/g) != -1, browserName, match, browser, browserVersion;

  if (ua.search(/iphone/g) != -1) {
    return { name: "iphone", version: 0, mobile: true };
  } else if (ua.search(/ipad/g) != -1) {
    return { name: "ipad", version: 0, mobile: true };
  } else if (ua.search(/android/g) != -1) {
    match = /(android)[ \/]([\w.]+)/.exec(ua) || [];
    browserVersion = match[2] || "0";
    return { name: "android", version: browserVersion, mobile: mobile };
  } else {
    browserName = "";
    match = /(opr)[ \/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
    browser = match[1] || "";
    browserVersion = match[2] || "0";

    if (browser == "msie") browser = "ie";
    return {
      name: browser,
      version: browserVersion,
      mobile: mobile
    };
  }
  ua = null, mobile = null, browserName = null, match = null, browser = null, browserVersion = null;
}();
const isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && win.document);
const urlUtil = function (url, urls) {
  url = {
    href: win.location.href,
    param: win.location.search,
    referrer: doc.referrer,
    pathname: win.location.pathname,
    hostname: win.location.hostname,
    port: win.location.port
  };
  urls = url.href.split(/[\?#]/);
  url.param = url.param.replace("?", "");
  url.url = urls[0];
  if (url.href.search("#") > -1) {
    url.hashdata = urls[urls.length - 1];
  }
  urls = null;
  url.baseUrl = url.href.substr(0, url.href.indexOf("?")).replace(url.pathname, "");

  return url;
};
const getError = function (className, errorCode, methodName) {
  if (errorMsg && errorMsg[className]) {
    return {
      className: className,
      errorCode: errorCode,
      methodName: methodName,
      msg: errorMsg[className][errorCode]
    };
  } else {
    return { className: className, errorCode: errorCode, methodName: methodName };
  }
};
const supportTouch = win ? 'ontouchstart' in win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 : false;
const supportFileApi = win ? win.FileReader && win.File && win.FileList && win.Blob : false;

let EasingFunctions = {
  // no easing, no acceleration
  linear: function (t) {
    return t;
  },
  // accelerating from zero velocity
  easeInQuad: function (t) {
    return t * t;
  },
  // decelerating to zero velocity
  easeOutQuad: function (t) {
    return t * (2 - t);
  },
  // acceleration until halfway, then deceleration
  easeInOutQuad: function (t) {
    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
  },
  // accelerating from zero velocity
  easeInCubic: function (t) {
    return t * t * t;
  },
  // decelerating to zero velocity
  easeOutCubic: function (t) {
    return --t * t * t + 1;
  },
  // acceleration until halfway, then deceleration
  easeInOutCubic: function (t) {
    return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  },
  // accelerating from zero velocity
  easeInQuart: function (t) {
    return t * t * t * t;
  },
  // decelerating to zero velocity
  easeOutQuart: function (t) {
    return 1 - --t * t * t * t;
  },
  // acceleration until halfway, then deceleration
  easeInOutQuart: function (t) {
    return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
  },
  // accelerating from zero velocity
  easeInQuint: function (t) {
    return t * t * t * t * t;
  },
  // decelerating to zero velocity
  easeOutQuint: function (t) {
    return 1 + --t * t * t * t * t;
  },
  // acceleration until halfway, then deceleration
  easeInOutQuint: function (t) {
    return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
  }
};
/**
 * @module AX6Info
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * 첫번째 자리수 동사 - (필요한것이 없을때 : 4, 실행오류 : 5)
   * 두번째 자리수 목적어 - 문자열 0, 숫자 1, 배열 2, 오브젝트 3, 함수 4, DOM 5, 파일 6, 기타 7
   * 세번째 자리수 옵션
   */
  errorMsg: errorMsg,
  /**
   * 에러 출력메세지 사용자 재 정의
   * @example
   * ```
   * AX6Info.onerror = function(){
   *  console.log(arguments);
   * }
   * ```
   */
  onerror: onerror,
  /**
   * event keyCodes
   * @example
   * ```
   * {
   * 	BACKSPACE: 8, TAB: 9,
   * 	RETURN: 13, ESC: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, DELETE: 46,
   * 	HOME: 36, END: 35, PAGEUP: 33, PAGEDOWN: 34, INSERT: 45, SPACE: 32
   * }
   * ```
   */
  eventKeys: eventKeys,
  /**
   * week names
   * @example
   * ```
   * [
   *  {label: "SUN"},{label: "MON"},{label: "TUE"},{label: "WED"},{label: "THU"},{label: "FRI"},{label: "SAT"}
   * ]
   * console.log( weekNames[0] );
   * console.log( AX6Info.weekNames[(new Date()).getDay()].label )
   * ```
   */
  weekNames: weekNames,
  /**
   * 사용자 브라우저 식별용 오브젝트
   * @example
   * ```
   * console.log( AX6Info.browser );
   * //Object {name: "chrome", version: "39.0.2171.71", mobile: false}
   * ```
   */
  browser: browser,
  /**
   * 브라우저 여부
   */
  isBrowser: isBrowser,
  /**
   * 브라우져의 터치 가능 유무를 확인합니다.
   * @returns {boolean}
   * @example
   * ```
   * var chkFlag = AX6Info.supportTouch;
   */
  supportTouch: supportTouch,
  /**
   * HTML5 FileApi 지원여부
   */
  supportFileApi: supportFileApi,
  /**
   * 브라우저에 따른 마우스 휠 이벤트이름
   */
  wheelEnm: wheelEnm,
  /**
   * 현재 페이지의 Url 정보를 리턴합니다.
   * @example
   * ```
   * console.log( ax5.util.toJson( AX6Info.urlUtil() ) );
   * {
   *	"baseUrl": "http://ax5:2018",
   *	"href": "http://ax5:2018/samples/index.html?a=1&b=1#abc",
   *	"param": "a=1&b=1",
   *	"referrer": "",
   *	"pathname": "/samples/index.html",
   *	"hostname": "ax5",
   *	"port": "2018",
   *	"url": "http://ax5:2018/samples/index.html",
   *	"hashdata": "abc"
   * }
   * ```
   */
  urlUtil: urlUtil,
  /**
   * ax5-error-msg.js 에 정의된 ax5 error를 반환합니다.
   * @returns {Object}
   * @example
   * ```
   * console.log( AX6Info.getError("single-uploader", "460", "upload") );
   *
   * if(!this.selectedFile){
   *      if (cfg.onEvent) {
   *      	var that = {
   *      		action: "error",
   *      		error: AX6Info.getError("single-uploader", "460", "upload")
   *      	};
   *      	cfg.onEvent.call(that, that);
   *      }
   *      return this;
   * }
   * ```
   */
  getError: getError,

  /**
   * linear,
   * easeInQuad,
   * easeOutQuad,
   * easeInOutQuad,
   * easeInCubic,
   * easeOutCubic,
   * easeInOutCubic,
   * easeInQuart,
   * easeOutQuart,
   * easeInOutQuart,
   * easeInQuint,
   * easeOutQuint,
   * easeInOutQuint
   */
  easingFunctions: EasingFunctions
});

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);


let UI_INSTANCE_ID = 0;

/**
 *  @class
 */
class AX6UICore {

  static getInstanceId() {
    return UI_INSTANCE_ID++;
  }

  /**
   * @constructor
   */
  constructor() {
    this.initialized = false;
    this.instanceId = AX6UICore.getInstanceId();
  }

  /**
   * @method
   * @param config
   * @return {AX6UICore}
   */
  setConfig(config) {
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(this.config, config);

    this.init();
    return this;
  }

  /**
   * UI가 생성될 때, config 속성이 바뀔때 호출 되는 내부 메서드
   * @method
   */
  init() {
    // 초기화 함수,

    this.initOnce();
  }

  /**
   * UI가 랜더링 될 때 1회만 호출되는 메소드 repaint가 필요한 상황엔 별도의 repaint 메서드를 이용할 것을 권장
   * @method
   */
  initOnce() {
    // 1회만 호출되어야 하는 초기화 함수
    if (this.initialized) return this;
    this.initialized = true;
    //
  }

  /**
   * @method
   */
  destory() {}
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UICore);

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 * https://github.com/thomasJang/mustache.js -- imporove some variables
 */

/**
 * AX6Mustache는 http://github.com/janl/mustache.js에 몇가지 최소한의 기능을 튜닝하여 사용하는 템플릿 엔진입니다.
 * @namespace AX6Mustache
 */

/**
 * @method AX6Mustache.render
 * @example
 * ```js
 * ax5.mustache.render(template, view)
 *
 *
 * //Array @i
 * //{{#beatles}}
 * //{{firstName}} {{lastName}} ({{@i}}) ({{@first}})
 * //{{/beatles}}
 *
 * //Object @each
 * {{#beatles}}
 *  {{#@each}}
 *      {{@key}} : {{@value.firstName}} {{@value.lastName}}
 *  {{/@each}}
 * {{/beatles}}
 *
 * ```
 */

let AX6 = {};

(function defineMustache(global, factory) {

  factory(global.mustache = {});
})(AX6, function mustacheFactory(mustache) {

  var objectToString = Object.prototype.toString;
  var isArray = Array.isArray || function isArrayPolyfill(object) {
    return objectToString.call(object) === '[object Array]';
  };

  function isFunction(object) {
    return typeof object === 'function';
  }

  /**
   * More correct typeof string handling array
   * which normally returns typeof 'object'
   */
  function typeStr(obj) {
    return isArray(obj) ? 'array' : typeof obj;
  }

  function escapeRegExp(string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
  }

  /**
   * Null safe way of checking whether or not an object,
   * including its prototype, has a given property
   */
  function hasProperty(obj, propName) {
    return obj != null && typeof obj === 'object' && propName in obj;
  }

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var regExpTest = RegExp.prototype.test;

  function testRegExp(re, string) {
    return regExpTest.call(re, string);
  }

  var nonSpaceRe = /\S/;

  function isWhitespace(string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var entityMap = {
    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;', '/': '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function fromEntityMap(s) {
      return entityMap[s];
    });
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   */
  function parseTemplate(template, tags) {
    if (!template) return [];

    var sections = []; // Stack to hold section tokens
    var tokens = []; // Buffer to hold the tokens
    var spaces = []; // Indices of whitespace tokens on the current line
    var hasTag = false; // Is there a {{tag}} on the current line?
    var nonSpace = false; // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace() {
      if (hasTag && !nonSpace) {
        while (spaces.length) delete tokens[spaces.pop()];
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var openingTagRe, closingTagRe, closingCurlyRe;

    function compileTags(tagsToCompile) {
      if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);

      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);

      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
    }

    compileTags(tags || mustache.tags);

    var scanner = new Scanner(template);

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(openingTagRe);

      if (value) {
        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push(['text', chr, start, start + 1]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n') stripSpace();
        }
      }

      // Match the opening tag.
      if (!scanner.scan(openingTagRe)) break;

      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(closingTagRe);
      } else if (type === '{') {
        value = scanner.scanUntil(closingCurlyRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(closingTagRe);
        type = '&';
      } else {
        value = scanner.scanUntil(closingTagRe);
      }

      // Match the closing tag.
      if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);

      token = [type, value, start, scanner.pos];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection) throw new Error('Unopened section "' + value + '" at ' + start);

        if (openSection[1] !== value) throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        compileTags(value);
      }
    }

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();

    if (openSection) throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens(tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens(tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
        case '#':
        case '^':
          collector.push(token);
          sections.push(token);
          collector = token[4] = [];
          break;
        case '/':
          section = sections.pop();
          section[5] = token[2];
          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
          break;
        default:
          collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner(string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function eos() {
    return this.tail === '';
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function scan(re) {
    var match = this.tail.match(re);

    if (!match || match.index !== 0) return '';

    var string = match[0];

    this.tail = this.tail.substring(string.length);
    this.pos += string.length;

    return string;
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function scanUntil(re) {
    var index = this.tail.search(re),
        match;

    switch (index) {
      case -1:
        match = this.tail;
        this.tail = '';
        break;
      case 0:
        match = '';
        break;
      default:
        match = this.tail.substring(0, index);
        this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context(view, parentContext) {
    this.view = view;
    this.cache = {
      '.': this.view,
      '@each': function () {
        var returns = [];
        for (var k in this) {
          returns.push({ '@key': k, '@value': this[k] });
        }
        return returns;
      }
    };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function push(view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function lookup(name) {
    var cache = this.cache;

    var value;
    if (cache.hasOwnProperty(name)) {
      value = cache[name];
    } else {
      var context = this,
          names,
          index,
          lookupHit = false;

      while (context) {
        if (name.indexOf('.') > 0) {
          value = context.view;
          names = name.split('.');
          index = 0;

          /**
           * Using the dot notion path in `name`, we descend through the
           * nested objects.
           *
           * To be certain that the lookup has been successful, we have to
           * check if the last object in the path actually has the property
           * we are looking for. We store the result in `lookupHit`.
           *
           * This is specially necessary for when the value has been set to
           * `undefined` and we want to avoid looking up parent contexts.
           **/
          while (value != null && index < names.length) {
            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);

            value = value[names[index++]];
          }
        } else {
          value = context.view[name];
          lookupHit = hasProperty(context.view, name);
        }

        if (lookupHit) break;

        context = context.parent;
      }

      cache[name] = value;
    }

    if (isFunction(value)) value = value.call(this.view);

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer() {
    this.cache = {};
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function clearCache() {
    this.cache = {};
  };

  /**
   * Parses and caches the given `template` and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function parse(template, tags) {
    var cache = this.cache;
    var tokens = cache[template];

    if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);

    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   */
  Writer.prototype.render = function render(template, view, partials) {
    var tokens = this.parse(template);
    var context = view instanceof Context ? view : new Context(view);
    return this.renderTokens(tokens, context, partials, template);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {
    var buffer = '';
    var token, symbol, value;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      value = undefined;
      token = tokens[i];
      symbol = token[0];

      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);

      if (value !== undefined) buffer += value;
    }

    return buffer;
  };

  Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {
    var self = this;
    var buffer = '';

    var value = context.lookup(token[1]);

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    function subRender(template) {
      return self.render(template, context, partials);
    }

    if (!value) return;

    if (isArray(value)) {
      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
        if (value[j]) {
          if (typeof value[j] === 'object') {
            value[j]['@i'] = j;
            value[j]['@first'] = j === 0;
          }

          buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
        }
      }
    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
    } else if (isFunction(value)) {
      if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');

      // Extract the portion of the original template that the section contains.
      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

      if (value != null) buffer += value;
    } else {
      buffer += this.renderTokens(token[4], context, partials, originalTemplate);
    }
    return buffer;
  };

  Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {
    var value = context.lookup(token[1]);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);
  };

  Writer.prototype.renderPartial = function renderPartial(token, context, partials) {
    if (!partials) return;

    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
    if (value != null) return this.renderTokens(this.parse(value), context, partials, value);
  };

  Writer.prototype.unescapedValue = function unescapedValue(token, context) {
    var value = context.lookup(token[1]);
    if (value != null) return value;
  };

  Writer.prototype.escapedValue = function escapedValue(token, context) {
    var value = context.lookup(token[1]);
    if (value != null) return mustache.escape(value);
  };

  Writer.prototype.rawValue = function rawValue(token) {
    return token[1];
  };

  mustache.name = 'mustache.js';
  mustache.version = '2.1.3';
  mustache.tags = ['{{', '}}'];

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function clearCache() {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function parse(template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  mustache.render = function render(template, view, partials) {
    if (typeof template !== 'string') {
      throw new TypeError('Invalid template! Template should be a "string" ' + 'but "' + typeStr(template) + '" was given as the first ' + 'argument for mustache#render(template, view, partials)');
    }

    return defaultWriter.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.,
  /*eslint-disable */ // eslint wants camel cased function name
  mustache.to_html = function to_html(template, view, partials, send) {
    /*eslint-enable*/

    var result = mustache.render(template, view, partials);

    if (isFunction(send)) {
      send(result);
    } else {
      return result;
    }
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;
});

/* harmony default export */ __webpack_exports__["a"] = (AX6.mustache);

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);




/**
 * @method ax5grid.util.divideTableByFrozenColumnIndex
 * @param _table
 * @param _frozenColumnIndex
 * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}
 */
const divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {

  let tempTable_l = { rows: [] },
      tempTable_r = { rows: [] };

  for (let r = 0, rl = _table.rows.length; r < rl; r++) {
    let row = _table.rows[r];

    tempTable_l.rows[r] = { cols: [] };
    tempTable_r.rows[r] = { cols: [] };

    for (let c = 0, cl = row.cols.length; c < cl; c++) {
      let col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, row.cols[c]),
          colStartIndex = col.colIndex,
          colEndIndex = col.colIndex + col.colspan;

      if (colStartIndex < _frozenColumnIndex) {
        if (colEndIndex <= _frozenColumnIndex) {
          // 좌측편에 변형없이 추가
          tempTable_l.rows[r].cols.push(col);
        } else {
          let leftCol = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col),
              rightCol = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, leftCol);

          leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;
          rightCol.colIndex = _frozenColumnIndex;
          rightCol.colspan = col.colspan - leftCol.colspan;

          tempTable_l.rows[r].cols.push(leftCol);
          if (rightCol.colspan) {
            tempTable_r.rows[r].cols.push(rightCol);
          }
        }
      } else {
        // 오른편
        tempTable_r.rows[r].cols.push(col);
      }

      col = null;
      colStartIndex = null;
      colEndIndex = null;
    }

    row = null;
  }

  return {
    leftData: tempTable_l,
    rightData: tempTable_r
  };
};

const getTableByStartEndColumnIndex = function (_table, _startColumnIndex, _endColumnIndex) {

  let tempTable = { rows: [] };
  for (let r = 0, rl = _table.rows.length; r < rl; r++) {
    let row = _table.rows[r];

    tempTable.rows[r] = { cols: [] };
    for (let c = 0, cl = row.cols.length; c < cl; c++) {
      let col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, row.cols[c]),
          colStartIndex = col.colIndex,
          colEndIndex = col.colIndex + col.colspan;

      if (_startColumnIndex <= colStartIndex || colEndIndex <= _endColumnIndex) {
        if (_startColumnIndex <= colStartIndex && colEndIndex <= _endColumnIndex) {
          // 변형없이 추가
          tempTable.rows[r].cols.push(col);
        } else if (_startColumnIndex > colStartIndex && colEndIndex > _startColumnIndex) {
          // 앞에서 걸친경우
          col.colspan = colEndIndex - _startColumnIndex;
          tempTable.rows[r].cols.push(col);
        } else if (colEndIndex > _endColumnIndex && colStartIndex <= _endColumnIndex) {
          tempTable.rows[r].cols.push(col);
        }
      }
    }
  }

  return tempTable;
};

const getMousePosition = function (e) {
  let mouseObj,
      originalEvent = e.originalEvent ? e.originalEvent : e;

  mouseObj = 'changedTouches' in originalEvent && originalEvent.changedTouches ? originalEvent.changedTouches[0] : originalEvent;
  // clientX, Y 쓰면 스크롤에서 문제 발생
  return {
    clientX: mouseObj.pageX,
    clientY: mouseObj.pageY
  };
};

const ENM = {
  "mousedown": __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch ? "touchstart" : "mousedown",
  "mousemove": __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch ? "touchmove" : "mousemove",
  "mouseup": __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch ? "touchend" : "mouseup"
};

const makeHeaderTable = function (_columns) {
  let columns = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].deepCopy(_columns),
      cfg = this.config,
      table = {
    rows: []
  },
      colIndex = 0,
      maekRows = function (_columns, depth, parentField) {
    var row = { cols: [] };
    var i = 0,
        l = _columns.length;

    for (; i < l; i++) {
      var field = _columns[i];
      var colspan = 1;

      if (!field.hidden) {
        field.colspan = 1;
        field.rowspan = 1;

        field.rowIndex = depth;
        field.colIndex = function () {
          if (!parentField) {
            return colIndex++;
          } else {
            colIndex = parentField.colIndex + i + 1;
            return parentField.colIndex + i;
          }
        }();

        row.cols.push(field);

        if ('columns' in field) {
          colspan = maekRows(field.columns, depth + 1, field);
        } else {
          field.width = 'width' in field ? field.width : cfg.columnMinWidth;
        }
        field.colspan = colspan;
      } else {}
    }

    if (row.cols.length > 0) {
      if (!table.rows[depth]) {
        table.rows[depth] = { cols: [] };
      }
      table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);
      return row.cols.length - 1 + colspan;
    } else {
      return colspan;
    }
  };

  maekRows(columns, 0);

  // set rowspan
  for (let r = 0, rl = table.rows.length; r < rl; r++) {
    for (let c = 0, cl = table.rows[r].cols.length; c < cl; c++) {
      if (!('columns' in table.rows[r].cols[c])) {
        table.rows[r].cols[c].rowspan = rl - r;
      }
    }
  }

  return table;
};

const makeBodyRowTable = function (_columns) {
  let columns = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].deepCopy(_columns),
      table = {
    rows: []
  },
      colIndex = 0,
      maekRows = function (_columns, depth, parentField) {
    let row = { cols: [] },
        i = 0,
        l = _columns.length,
        colspan = 1;

    let selfMakeRow = function (__columns) {
      let i = 0,
          l = __columns.length;
      for (; i < l; i++) {
        let field = __columns[i],
            colspan = 1;

        if (!field.hidden) {

          if ('key' in field) {
            field.colspan = 1;
            field.rowspan = 1;

            field.rowIndex = depth;
            field.colIndex = function () {
              if (!parentField) {
                return colIndex++;
              } else {
                colIndex = parentField.colIndex + i + 1;
                return parentField.colIndex + i;
              }
            }();

            row.cols.push(field);
            if ('columns' in field) {
              colspan = maekRows(field.columns, depth + 1, field);
            }
            field.colspan = colspan;
          } else {
            if ('columns' in field) {
              selfMakeRow(field.columns, depth);
            }
          }
        } else {}
      }
    };

    for (; i < l; i++) {
      let field = _columns[i];
      colspan = 1;

      if (!field.hidden) {

        if ('key' in field) {
          field.colspan = 1;
          field.rowspan = 1;

          field.rowIndex = depth;
          field.colIndex = function () {
            if (!parentField) {
              return colIndex++;
            } else {
              colIndex = parentField.colIndex + i + 1;
              return parentField.colIndex + i;
            }
          }();

          row.cols.push(field);
          if ('columns' in field) {
            colspan = maekRows(field.columns, depth + 1, field);
          }
          field.colspan = colspan;
        } else {
          if ('columns' in field) {
            selfMakeRow(field.columns, depth);
          }
        }
      } else {}

      field = null;
    }

    if (row.cols.length > 0) {
      if (!table.rows[depth]) {
        table.rows[depth] = { cols: [] };
      }
      table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);
      return row.cols.length - 1 + colspan;
    } else {
      return colspan;
    }
  };

  maekRows(columns, 0);

  (function (table) {
    // set rowspan
    for (let r = 0, rl = table.rows.length; r < rl; r++) {
      let row = table.rows[r];
      for (let c = 0, cl = row.cols.length; c < cl; c++) {
        let col = row.cols[c];
        if (!('columns' in col)) {
          col.rowspan = rl - r;
        }
        col = null;
      }
      row = null;
    }
  })(table);

  return table;
};

const makeBodyRowMap = function (_table) {
  let map = {};
  _table.rows.forEach(function (row) {
    row.cols.forEach(function (col) {
      map[col.rowIndex + "_" + col.colIndex] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col);
    });
  });
  return map;
};

let makeFootSumTable = function (_footSumColumns) {
  let table = {
    rows: []
  };

  for (let r = 0, rl = _footSumColumns.length; r < rl; r++) {
    let footSumRow = _footSumColumns[r],
        addC = 0;

    table.rows[r] = { cols: [] };

    for (let c = 0, cl = footSumRow.length; c < cl; c++) {
      if (addC > this.colGroup.length) break;
      let colspan = footSumRow[c].colspan || 1;
      if (footSumRow[c].label || footSumRow[c].key) {
        table.rows[r].cols.push({
          colspan: colspan,
          rowspan: 1,
          colIndex: addC,
          columnAttr: "sum",
          align: footSumRow[c].align,
          label: footSumRow[c].label,
          key: footSumRow[c].key,
          collector: footSumRow[c].collector,
          formatter: footSumRow[c].formatter
        });
      } else {
        table.rows[r].cols.push({
          colIndex: addC,
          colspan: colspan,
          rowspan: 1,
          label: "&nbsp;"
        });
      }
      addC += colspan;
      colspan = null;
    }

    if (addC < this.colGroup.length) {
      for (let c = addC; c < this.colGroup.length; c++) {
        table.rows[r].cols.push({
          colIndex: c,
          colspan: 1,
          rowspan: 1,
          label: "&nbsp;"
        });
      }
    }
    footSumRow = null;
    addC = null;
  }

  return table;
};

const makeBodyGroupingTable = function (_bodyGroupingColumns) {
  let table = {
    rows: []
  },
      r = 0,
      addC = 0;

  table.rows[r] = { cols: [] };
  for (let c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {
    if (addC > this.columns.length) break;
    let colspan = _bodyGroupingColumns[c].colspan || 1;
    if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {
      table.rows[r].cols.push({
        colspan: colspan,
        rowspan: 1,
        rowIndex: 0,
        colIndex: addC,
        columnAttr: "default",
        align: _bodyGroupingColumns[c].align,
        label: _bodyGroupingColumns[c].label,
        key: _bodyGroupingColumns[c].key,
        collector: _bodyGroupingColumns[c].collector,
        formatter: _bodyGroupingColumns[c].formatter
      });
    } else {
      table.rows[r].cols.push({
        rowIndex: 0,
        colIndex: addC,
        colspan: colspan,
        rowspan: 1,
        label: "&nbsp;"
      });
    }
    addC += colspan;
  }

  if (addC < this.colGroup.length) {
    for (var c = addC; c < this.colGroup.length; c++) {
      table.rows[r].cols.push({
        rowIndex: 0,
        colIndex: c,
        colspan: 1,
        rowspan: 1,
        label: "&nbsp;"
      });
    }
  }

  return table;
};

const findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {
  let _containerPanelName,
      _isScrollPanel = false,
      _panels = [];

  if (this.xvar.frozenRowIndex > _dindex) _panels.push("top");
  if (this.xvar.frozenColumnIndex > _colIndex) _panels.push("left");
  _panels.push("body");

  if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {
    _containerPanelName = _panels.join("-");
    _panels.push("scroll");
    _isScrollPanel = true;
  }

  return {
    panelName: _panels.join("-"),
    containerPanelName: _containerPanelName,
    isScrollPanel: _isScrollPanel
  };
};

const getRealPathForDataItem = function (_dataPath) {
  let path = [],
      _path = [].concat(_dataPath.split(/[\.\[\]]/g));

  _path.forEach(function (n) {
    if (n !== "") path.push("[\"" + n.replace(/['\"]/g, "") + "\"]");
  });
  _path = null;
  return path.join("");
};

/* harmony default export */ __webpack_exports__["a"] = ({
  divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,
  getTableByStartEndColumnIndex: getTableByStartEndColumnIndex,
  getMousePosition: getMousePosition,
  ENM: ENM,
  makeHeaderTable: makeHeaderTable,
  makeBodyRowTable: makeBodyRowTable,
  makeBodyRowMap: makeBodyRowMap,
  makeFootSumTable: makeFootSumTable,
  makeBodyGroupingTable: makeBodyGroupingTable,
  findPanelByColumnIndex: findPanelByColumnIndex,
  getRealPathForDataItem: getRealPathForDataItem
});

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_page__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_header__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_collector__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_formatter__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__ = __webpack_require__(15);











/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

const columnSelect = {
  focusClear: function () {
    let self = this,
        _column;
    for (let c in self.focusedColumn) {
      _column = self.focusedColumn[c];
      if (_column) {
        self.$.panel[_column.panelName].find('[data-ax6grid-tr-data-index="' + _column.dindex + '"]').find('[data-ax6grid-column-rowindex="' + _column.rowIndex + '"][data-ax6grid-column-colindex="' + _column.colIndex + '"]').removeAttr('data-ax6grid-column-focused');
      }
    }
    self.focusedColumn = {};
  },
  clear: function () {
    let self = this,
        _column;
    for (let c in self.selectedColumn) {
      _column = self.selectedColumn[c];
      if (_column) {
        self.$.panel[_column.panelName].find('[data-ax6grid-tr-data-index="' + _column.dindex + '"]').find('[data-ax6grid-column-rowindex="' + _column.rowIndex + '"][data-ax6grid-column-colindex="' + _column.colIndex + '"]').removeAttr('data-ax6grid-column-selected');
      }
    }
    self.selectedColumn = {};
  },
  init: function (column) {
    let self = this;
    if (this.isInlineEditing) {
      for (let editKey in this.inlineEditing) {
        if (editKey == column.dindex + "_" + column.colIndex + "_" + column.rowIndex) {
          return this;
        }
      }
    }

    // focus
    columnSelect.focusClear.call(self);
    self.focusedColumn[column.dindex + "_" + column.colIndex + "_" + column.rowIndex] = {
      panelName: column.panelName,
      dindex: column.dindex,
      doindex: column.doindex,
      rowIndex: column.rowIndex,
      colIndex: column.colIndex,
      colspan: column.colspan
    };

    // select
    columnSelect.clear.call(self);
    self.xvar.selectedRange = {
      start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],
      end: null
    };
    self.selectedColumn[column.dindex + "_" + column.colIndex + "_" + column.rowIndex] = function (data) {
      if (data) {
        return false;
      } else {
        return {
          panelName: column.panelName,
          dindex: column.dindex,
          doindex: column.doindex,
          rowIndex: column.rowIndex,
          colIndex: column.colIndex,
          colspan: column.colspan
        };
      }
    }(self.selectedColumn[column.dindex + "_" + column.colIndex + "_" + column.rowIndex]);

    this.$.panel[column.panelName].find('[data-ax6grid-tr-data-index="' + column.dindex + '"]').find('[data-ax6grid-column-rowindex="' + column.rowIndex + '"][data-ax6grid-column-colindex="' + column.colIndex + '"]').attr('data-ax6grid-column-focused', "true").attr('data-ax6grid-column-selected', "true");

    if (this.isInlineEditing) {
      inlineEdit.deActive.call(this, "RETURN");
    }
  },
  update: function (column) {
    const self = this;
    let dindex, doindex, colIndex, rowIndex, trl;

    self.xvar.selectedRange["end"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];
    columnSelect.clear.call(self);

    let range = {
      r: {
        s: Math.min(self.xvar.selectedRange["start"][0], self.xvar.selectedRange["end"][0]),
        e: Math.max(self.xvar.selectedRange["start"][0], self.xvar.selectedRange["end"][0])
      },
      c: {
        s: Math.min(self.xvar.selectedRange["start"][2], self.xvar.selectedRange["end"][2]),
        e: Math.max(self.xvar.selectedRange["start"][2] + self.xvar.selectedRange["start"][3], self.xvar.selectedRange["end"][2] + self.xvar.selectedRange["end"][3])
      }
    };

    dindex = range.r.s;
    for (; dindex <= range.r.e; dindex++) {

      trl = this.bodyRowTable.rows.length;
      rowIndex = 0;
      for (; rowIndex < trl; rowIndex++) {
        colIndex = range.c.s;
        for (; colIndex <= range.c.e; colIndex++) {
          var _panels = [],
              panelName = "";

          if (self.xvar.frozenRowIndex > dindex) _panels.push("top");
          if (self.xvar.frozenColumnIndex > colIndex) _panels.push("left");
          _panels.push("body");
          if (_panels[0] !== "top") _panels.push("scroll");
          panelName = _panels.join("-");

          self.selectedColumn[dindex + "_" + colIndex + "_" + rowIndex] = {
            panelName: panelName,
            dindex: dindex,
            rowIndex: rowIndex,
            colIndex: colIndex,
            colspan: column.colspan
          };

          _panels = null;
          panelName = null;
        }
      }
    }
    dindex = null;
    doindex = null;
    colIndex = null;
    rowIndex = null;

    for (var c in self.selectedColumn) {
      var _column = self.selectedColumn[c];
      if (_column) {
        self.$.panel[_column.panelName].find('[data-ax6grid-tr-data-index="' + _column.dindex + '"]').find('[data-ax6grid-column-rowindex="' + _column.rowIndex + '"][data-ax6grid-column-colindex="' + _column.colIndex + '"]').attr('data-ax6grid-column-selected', 'true');
      }
    }
  }
};

const columnSelector = {
  "on": function (cell) {
    let self = this;

    if (this.inlineEditing[cell.dindex + "_" + cell.colIndex + "_" + cell.rowIndex]) {
      return;
    }

    columnSelect.init.call(self, cell);

    this.$["container"]["body"].on("mousemove.ax5grid-" + this.instanceId, '[data-ax6grid-column-attr="default"]', function (e) {
      if (this.getAttribute("data-ax6grid-column-rowIndex")) {
        columnSelect.update.call(self, {
          panelName: this.getAttribute("data-ax6grid-panel-name"),
          dindex: Number(this.getAttribute("data-ax6grid-data-index")),
          doindex: Number(this.getAttribute("data-ax6grid-data-o-index")),
          rowIndex: Number(this.getAttribute("data-ax6grid-column-rowIndex")),
          colIndex: Number(this.getAttribute("data-ax6grid-column-colIndex")),
          colspan: Number(this.getAttribute("colspan"))
        });
        __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
      }
    }).on("mouseup.ax5grid-" + this.instanceId, function () {
      columnSelector.off.call(self);
    }).on("mouseleave.ax5grid-" + this.instanceId, function () {
      columnSelector.off.call(self);
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
  },
  "off": function () {

    this.$["container"]["body"].off("mousemove.ax5grid-" + this.instanceId).off("mouseup.ax5grid-" + this.instanceId).off("mouseleave.ax5grid-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');
  }
};

const resetFrozenColumn = function () {
  let cfg = this.config,
      dividedBodyRowObj = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);

  this.asideBodyRowData = function (dataTable) {
    let data = { rows: [] };
    for (let i = 0, l = dataTable.rows.length; i < l; i++) {
      data.rows[i] = { cols: [] };
      if (i === 0) {
        let col = {
          label: "",
          colspan: 1,
          rowspan: dataTable.rows.length,
          colIndex: null
        },
            _col = {};

        if (cfg.showLineNumber) {
          _col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col, {
            width: cfg.lineNumberColumnWidth,
            _width: cfg.lineNumberColumnWidth,
            columnAttr: "lineNumber",
            label: "&nbsp;", key: "__d-index__"
          });
          data.rows[i].cols.push(_col);
        }
        if (cfg.showRowSelector) {
          _col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col, {
            width: cfg.rowSelectorColumnWidth,
            _width: cfg.rowSelectorColumnWidth,
            columnAttr: "rowSelector",
            label: "", key: "__d-checkbox__"
          });
          data.rows[i].cols.push(_col);
        }
      }
    }

    return data;
  }.call(this, this.bodyRowTable);

  //console.log(dividedBodyRowObj);

  this.leftBodyRowData = dividedBodyRowObj.leftData;
  this.bodyRowData = dividedBodyRowObj.rightData;

  if (cfg.body.grouping) {
    let dividedBodyGroupingObj = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);
    this.asideBodyGroupingData = function (dataTable) {
      let data = { rows: [] };
      for (let i = 0, l = dataTable.rows.length; i < l; i++) {
        data.rows[i] = { cols: [] };
        if (i === 0) {
          let col = {
            label: "",
            colspan: 1,
            rowspan: dataTable.rows.length,
            colIndex: null
          },
              _col = {};

          if (cfg.showLineNumber) {
            _col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col, {
              width: cfg.lineNumberColumnWidth,
              _width: cfg.lineNumberColumnWidth,
              columnAttr: "lineNumber",
              label: "&nbsp;", key: "__d-index__"
            });
            data.rows[i].cols.push(_col);
          }
          if (cfg.showRowSelector) {
            _col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col, {
              width: cfg.rowSelectorColumnWidth,
              _width: cfg.rowSelectorColumnWidth,
              columnAttr: "rowSelector",
              label: "", key: "__d-checkbox__"
            });
            data.rows[i].cols.push(_col);
          }
        }
      }

      return data;
    }.call(this, this.bodyGroupingTable);
    this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;
    this.bodyGroupingData = dividedBodyGroupingObj.rightData;
    this.bodyGroupingMap = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].makeBodyRowMap.call(this, this.bodyGroupingTable);
  }

  this.leftFootSumData = {};
  this.footSumData = {};
  if (this.config.footSum) {
    let dividedFootSumObj = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);
    this.leftFootSumData = dividedFootSumObj.leftData;
    this.footSumData = dividedFootSumObj.rightData;
  }
};

const getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {

  let _key = _col.key,
      tagsToReplace = {
    '<': '&lt;',
    '>': '&gt;'
  };

  if (_key === "__d-index__") {
    return typeof _item["__index"] !== "undefined" ? _item["__index"] + 1 : "";
  } else if (_key === "__d-checkbox__") {
    return `<div class="checkBox" style="max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;"></div>`;
  } else {
    if (_col.editor && function (_editor) {
      if (_editor.type in __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */]) {
        return __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */][_editor.type].editMode == "inline";
      }
      return false;
    }(_col.editor)) {
      // editor가 inline타입이라면

      _value = _value || __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(this, _index, _item.__origin_index__, _key);

      if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.editor.disabled)) {
        if (_col.editor.disabled.call({
          list: _list,
          dindex: _index,
          item: _list[_index],
          key: _key,
          value: _value
        })) {
          return _value;
        }
      }

      // print editor
      return _returnPlainText ? _value : __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */][_col.editor.type].getHtml(this, _col.editor, _value);
    }

    const valueProcessor = {
      "formatter": function () {
        let that = {
          key: _key,
          value: _value || __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(this, _index, _item.__origin_index__, _key),
          dindex: _index,
          item: _item,
          list: _list
        };

        let caller = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_formatter__["a" /* default */][_col.formatter];
        return caller ? caller.call(that) : that.value;
      },
      "default": function () {
        let returnValue = "";

        if (typeof _value !== "undefined") {
          returnValue = _value;
        } else {
          if (/[\.\[\]]/.test(_key)) {
            _value = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(this, _index, _item.__origin_index__, _key);
          } else {
            _value = _item[_key];
          }

          if (_value !== null && typeof _value !== "undefined") returnValue = _value;
        }

        // 키값이 Boolean일때 오류 발생하여 수정.
        return typeof returnValue !== "string" ? returnValue : returnValue.replace(/[<>]/g, function (tag) {
          return tagsToReplace[tag] || tag;
        });
      },
      "treeControl": function (__value) {
        let cfg = this.config,
            keys = this.config.tree.columnKeys,
            indentNodeHtml = '';

        if (_item[keys.children].length) {
          indentNodeHtml += '<a ' + 'data-ax6grid-data-index="' + _index + '" ' + 'data-ax6grid-column-attr="tree-control" ' + 'data-ax6grid-tnode-arrow="" ' + 'style="width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + _item[keys.depth] * cfg.tree.indentWidth + 'px;"' + '>';
          indentNodeHtml += _item[keys.collapse] ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;
          indentNodeHtml += '</a>';
        } else {
          indentNodeHtml += '<span ' + 'data-ax6grid-tnode-arrow="" ' + 'style="width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + _item[keys.depth] * cfg.tree.indentWidth + 'px;"' + '>&nbsp;</span>';
        }

        indentNodeHtml += '<span ' + 'data-ax6grid-tnode-item="' + (_item[keys.children].length ? 'group' : 'item') + '" ' + 'style="width: ' + cfg.tree.iconWidth + 'px;"' + '>';
        indentNodeHtml += _item[keys.children].length ? _item[keys.collapse] ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;
        indentNodeHtml += '</span>';

        return indentNodeHtml + __value;
      }
    };

    let returnValue = _col.formatter ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);
    if (this.config.tree.use && _col.treeControl) {
      returnValue = valueProcessor.treeControl.call(this, returnValue);
    }

    return returnValue;
  }
};

const getGroupingValue = function (_item, _index, _col) {
  let value,
      that,
      caller,
      _key = _col.key,
      _label = _col.label;

  if (typeof _key === "undefined") {
    that = {
      key: _key,
      list: _item.__groupingList,
      groupBy: _item.__groupingBy
    };
    if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_label)) {
      value = _label.call(that);
    } else {
      value = _label;
    }
    _item[_col.colIndex] = value;
    return value;
  } else if (_key === "__d-index__") {
    return '';
  } else if (_key === "__d-checkbox__") {
    return '';
  } else {
    if (_col.collector) {
      that = {
        key: _key,
        list: _item.__groupingList
      };
      _item[_col.colIndex] = value = (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_collector__["a" /* default */][_col.collector]).call(that);
      if (_col.formatter) {
        that.value = value;
        caller = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_formatter__["a" /* default */][_col.formatter];
        return caller ? caller.call(that) : value;
      } else {
        return value;
      }
    } else {
      return "&nbsp;";
    }
  }
};

const getSumFieldValue = function (_list, _col) {
  let _key = _col.key,
      _label = _col.label;
  //, _collector, _formatter
  if (typeof _key === "undefined") {
    return _label;
  } else if (_key === "__d-index__" || _key === "__d-checkbox__") {
    return '&nbsp;';
  } else {
    if (_col.collector) {
      let that = {
        key: _key,
        list: _list
      };
      let value = (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_collector__["a" /* default */][_col.collector]).call(that);
      that.value = value;

      if (_col.formatter) {
        return (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_formatter__["a" /* default */][_col.formatter]).call(that);
      } else {
        return value;
      }
    } else {
      return "&nbsp;";
    }
  }
};

const inlineEdit = {
  active(_focusedColumn, _e, _initValue) {
    let self = this,
        dindex,
        doindex,
        colIndex,
        rowIndex,
        panelName,
        colspan,
        col,
        editor;

    for (var key in _focusedColumn) {
      panelName = _focusedColumn[key].panelName;
      dindex = _focusedColumn[key].dindex;
      doindex = _focusedColumn[key].doindex;
      colIndex = _focusedColumn[key].colIndex;
      rowIndex = _focusedColumn[key].rowIndex;
      colspan = _focusedColumn[key].colspan;

      // 인라인 에디팅을 멈춰야 하는 경우 조건
      col = this.colGroup[colIndex];
      if (!(editor = col.editor)) return this;

      // editor disabled 체크
      if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(editor.disabled)) {
        if (editor.disabled.call({
          list: this.list,
          dindex: dindex,
          item: this.list[dindex],
          key: col.key,
          value: _initValue
        })) {
          return this;
        }
      }

      // 조건에 맞지 않는 에디팅 타입이면 반응 없음.
      if (!function (_editor, _type) {
        if (_editor.type in __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */]) {
          return __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */][_editor.type].editMode == "popup";
        }
      }(editor)) {
        // 체크 박스 타입이면 값 변경 시도
        if (editor.type == "checkbox") {
          let checked, newValue;
          if (editor.config && editor.config.trueValue) {
            if (checked = !(_initValue == editor.config.trueValue)) {
              newValue = editor.config.trueValue;
            } else {
              newValue = editor.config.falseValue;
            }
          } else {
            newValue = checked = _initValue == false || _initValue == "false" || _initValue < "1" ? "true" : "false";
          }

          __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].setValue.call(self, dindex, doindex, col.key, newValue);
          updateRowState.call(self, ["cellChecked"], dindex, doindex, {
            key: col.key, rowIndex: rowIndex, colIndex: colIndex,
            editorConfig: col.editor.config, checked: checked
          });
        }
        return this;
      }

      if (this.list[dindex].__isGrouping) {
        return false;
      }
      if (key in this.inlineEditing) {
        return false;
      }

      this.inlineEditing[key] = {
        editor: editor,
        panelName: panelName,
        columnKey: key,
        column: _focusedColumn[key],
        useReturnToSave: __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */][editor.type].useReturnToSave
      };
      this.isInlineEditing = true;
    }
    if (this.isInlineEditing) {

      let originalValue = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(self, dindex, doindex, col.key),
          initValue = function (__value, __editor) {
        if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(__value)) {
          __value = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(originalValue) ? "" : originalValue;
        }

        if (__editor.type == "money") {
          return __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].number(__value, { "money": true });
        } else {
          return __value;
        }
      }.call(this, _initValue, editor);

      this.inlineEditing[key].$inlineEditorCell = this.$["panel"][panelName].find('[data-ax6grid-tr-data-index="' + dindex + '"]').find('[data-ax6grid-column-rowindex="' + rowIndex + '"][data-ax6grid-column-colindex="' + colIndex + '"]').find('[data-ax6grid-cellholder]');

      this.inlineEditing[key].$inlineEditor = __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */][editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);

      return true;
    }
  },
  deActive(_msg, _key, _value) {
    // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());
    if (!this.inlineEditing[_key]) return this;

    let panelName = this.inlineEditing[_key].panelName,
        dindex = this.inlineEditing[_key].column.dindex,
        doindex = this.inlineEditing[_key].column.doindex,
        rowIndex = this.inlineEditing[_key].column.rowIndex,
        colIndex = this.inlineEditing[_key].column.colIndex,
        column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + "_" + this.inlineEditing[_key].column.colIndex],
        editorValue = function ($inlineEditor) {
      if (typeof _value === "undefined") {
        if ($inlineEditor.get(0).tagName == "SELECT" || $inlineEditor.get(0).tagName == "INPUT" || $inlineEditor.get(0).tagName == "TEXTAREA") {
          return $inlineEditor.val();
        } else {
          _msg = "CANCEL";
          return false;
        }
      } else {
        return _value;
      }
    }(this.inlineEditing[_key].$inlineEditor),
        newValue = function (__value, __editor) {
      if (__editor.type == "money") {
        return __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].number(__value);
      } else {
        return __value;
      }
    }.call(this, editorValue, column.editor);

    let action = {
      "CANCEL"(_dindex, _column, _newValue) {
        action["__clear"].call(this);
      },
      "RETURN"(_dindex, _doindex, _column, _newValue) {
        if (__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {
          action["__clear"].call(this);
          repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);
        } else {
          action["__clear"].call(this);
        }
      },
      "__clear"() {
        this.isInlineEditing = false;
        let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data("binded-ax5ui");
        if (bindedAx5ui == "ax5picker") {
          this.inlineEditing[_key].$inlineEditor.ax5picker("close");
        } else if (bindedAx5ui == "ax5select") {
          this.inlineEditing[_key].$inlineEditor.ax5select("close");
        }

        this.inlineEditing[_key].$inlineEditor.remove();
        this.inlineEditing[_key].$inlineEditor = null;
        this.inlineEditing[_key].$inlineEditorCell = null;
        this.inlineEditing[_key] = undefined;
        delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..
      }
    };

    if (_msg in action) {
      action[_msg || "RETURN"].call(this, dindex, doindex, column, newValue);
    } else {
      action["__clear"].call(this);
    }
  },
  keydown(key, columnKey, _options) {
    let processor = {
      "ESC"() {
        for (var columnKey in this.inlineEditing) {
          inlineEdit.deActive.call(this, "CANCEL", columnKey);
        }
      },
      "RETURN"() {
        if (this.isInlineEditing) {
          if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) {
            // todo : 네이밍 검증 할 필요있음.
            inlineEdit.deActive.call(this, "RETURN", columnKey);
          } else {
            return false;
          }
        } else {

          for (var k in this.focusedColumn) {
            let _column = this.focusedColumn[k],
                column = this.bodyRowMap[_column.rowIndex + "_" + _column.colIndex],
                dindex = _column.dindex,
                doindex = _column.doindex,
                value = "",
                col = this.colGroup[_column.colIndex];

            if (column) {
              if (!this.list[dindex].__isGrouping) {
                value = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(this, dindex, doindex, column.key);
              }
            }

            if (col.editor && __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_inline_editor__["a" /* default */][col.editor.type].editMode === "inline") {
              if (_options && _options.moveFocus) {} else {
                if (column.editor && column.editor.type == "checkbox") {
                  value = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(this, dindex, doindex, column.key);

                  let checked, newValue;
                  if (column.editor.config && column.editor.config.trueValue) {
                    // console.log(value, column.editor.config.trueValue);

                    if (value != column.editor.config.trueValue) {
                      newValue = column.editor.config.trueValue;
                      checked = true;
                    } else {
                      newValue = column.editor.config.falseValue;
                      checked = false;
                    }
                  } else {
                    newValue = checked = value == false || value == "false" || value < "1" ? "true" : "false";
                  }

                  __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].setValue.call(this, dindex, doindex, column.key, newValue);
                  updateRowState.call(this, ["cellChecked"], dindex, doindex, {
                    key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,
                    editorConfig: column.editor.config, checked: checked
                  });
                }
              }
            } else {
              inlineEdit.active.call(this, this.focusedColumn, null, value);
            }
          }
        }
        return true;
      }
    };

    if (key in processor) {
      processor[key].call(this, key, columnKey, _options);
    }
  }
};

const repaint = function (_reset) {
  // debugger;
  let cfg = this.config,
      list = this.proxyList ? this.proxyList : this.list;

  /// repaint reset 타입이면 고정컬럼을 재조정
  if (_reset) {
    resetFrozenColumn.call(this);
    // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화
    this.xvar.paintStartRowIndex = undefined;
    this.xvar.paintStartColumnIndex = undefined;
  }

  /// 출력시작 인덱스
  let paintStartRowIndex, virtualPaintStartRowIndex;

  if (this.config.virtualScrollY) {
    virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-this.$.panel["body-scroll"].position().top / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;
    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {
      paintStartRowIndex -= this.xvar.paintRowCountTopMargin;
    }
  } else {
    paintStartRowIndex = this.xvar.frozenRowIndex;
  }

  if (isNaN(paintStartRowIndex)) return this;

  let paintStartColumnIndex = 0,
      paintEndColumnIndex = 0,
      nopaintLeftColumnsWidth = null,
      nopaintRightColumnsWidth = null;

  let bodyScrollLeft = -this.$.panel["body-scroll"].position().left;

  if (this.config.virtualScrollX) {
    // 페인트 시작컬럼위치와 종료컬럼위치 구하기
    for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {
      // bodyScrollLeft
      this.colGroup[ci]._sx = ci == this.xvar.frozenColumnIndex ? 0 : this.colGroup[ci - 1]._ex;
      this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;

      if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {
        paintStartColumnIndex = ci;
      }
      if (this.colGroup[ci]._sx <= bodyScrollLeft + this.xvar.bodyWidth && this.colGroup[ci]._ex >= bodyScrollLeft + this.xvar.bodyWidth) {
        paintEndColumnIndex = ci;

        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;
        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;
      }
    }

    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;
    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;
    this.$.panel["top-body-scroll"].css({ "padding-left": nopaintLeftColumnsWidth, "padding-right": nopaintRightColumnsWidth });
    this.$.panel["body-scroll"].css({ "padding-left": nopaintLeftColumnsWidth, "padding-right": nopaintRightColumnsWidth });
    this.$.panel["bottom-body-scroll"].css({ "padding-left": nopaintLeftColumnsWidth, "padding-right": nopaintRightColumnsWidth });
  }

  let isFirstPaint = typeof this.xvar.paintStartRowIndex === "undefined",
      headerColGroup = this.headerColGroup,
      asideBodyRowData = this.asideBodyRowData,
      leftBodyRowData = this.leftBodyRowData,
      bodyRowData = this.bodyRowData,
      leftFootSumData = this.leftFootSumData,
      footSumData = this.footSumData,
      asideBodyGroupingData = this.asideBodyGroupingData,
      leftBodyGroupingData = this.leftBodyGroupingData,
      bodyGroupingData = this.bodyGroupingData,
      bodyAlign = cfg.body.align,
      paintRowCount,
      virtualPaintRowCount;

  if (!this.config.virtualScrollY) {
    virtualPaintRowCount = paintRowCount = list.length;
  } else {
    virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);
    paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);
  }

  // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.
  if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {
    paintStartRowIndex = this.xvar.paintStartRowIndex;
  }

  if (this.xvar.dataRowCount === list.length && this.xvar.paintStartRowIndex === paintStartRowIndex && this.xvar.paintRowCount === paintRowCount && this.xvar.paintStartColumnIndex === paintStartColumnIndex && this.xvar.paintEndColumnIndex === paintEndColumnIndex) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정

  // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로
  if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {
    headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);
    bodyRowData = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);

    if (cfg.body.grouping) {
      bodyGroupingData = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);
    }
    if (cfg.footSum) {
      footSumData = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);
    }
    if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {
      this.needToPaintSum = true;
    }
  }

  /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.
  this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (list.length - this.xvar.frozenRowIndex);
  if (this.xvar.scrollContentHeight < 0) this.xvar.scrollContentHeight = 0;

  /// 사용된 패널들의 키 모음
  this.$.livePanelKeys = [];

  // 그리드 바디 영역 페인트 함수
  /**
   * @param _elTargetKey
   * @param _colGroup
   * @param _bodyRow
   * @param _groupRow
   * @param _list
   * @param [_scrollConfig]
   * @returns {boolean}
   */
  let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {
    let _elTarget = this.$.panel[_elTargetKey];

    if (!isFirstPaint && !_scrollConfig) {
      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)
      return false;
    }

    let SS = [],
        cgi,
        cgl,
        di,
        dl,
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign,
        isScrolled = function () {
      // 스크롤값이 변경되거나 처음 호출되었습니까?
      if (typeof _scrollConfig === "undefined" || typeof _scrollConfig['paintStartRowIndex'] === "undefined") {
        _scrollConfig = {
          paintStartRowIndex: 0,
          paintRowCount: _list.length
        };
        return false;
      } else {
        return true;
      }
    }(),
        stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + cfg.body.columnHeight + 'px';

    if (isScrolled) {
      SS.push('<div style="background:repeating-linear-gradient(to top, ' + stripeString + ');' + 'font-size:0;' + 'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;"></div>');
    }

    SS.push('<table border="0" cellpadding="0" cellspacing="0">');
    SS.push('<colgroup>');
    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {
      SS.push('<col style="width:' + _colGroup[cgi]._width + 'px;"  />');
    }
    SS.push('<col  />');
    SS.push('</colgroup>');

    di = _scrollConfig.paintStartRowIndex;

    for (dl = function () {
      let len;
      len = _list.length;
      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {
        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;
      }
      return len;
    }(); di < dl; di++) {

      if (_list[di]) {
        let isGroupingRow = false,
            rowTable,
            odi = typeof _list[di].__origin_index__ !== "undefined" ? _list[di].__origin_index__ : di;
        if (_groupRow && "__isGrouping" in _list[di]) {
          rowTable = _groupRow;
          isGroupingRow = true;
        } else {
          rowTable = _bodyRow;
        }

        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {

          SS.push('<tr class="tr-' + di % 4 + '', cfg.body.trStyleClass ? __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(cfg.body.trStyleClass) ? ' ' + cfg.body.trStyleClass.call({
            item: _list[di],
            index: di
          }, _list[di], di) : ' ' + cfg.body.trStyleClass : '', '"', isGroupingRow ? ' data-ax6grid-grouping-tr="true"' : '', ' data-ax6grid-tr-data-index="' + di + '"', ' data-ax6grid-tr-data-o-index="' + odi + '"', ' data-ax6grid-selected="' + (_list[di][cfg.columnKeys.selected] || "false") + '"', ' data-ax6grid-disable-selection="' + (_list[di][cfg.columnKeys.disableSelection] || "false") + '"', '>');
          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {
            col = rowTable.rows[tri].cols[ci];
            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
            colAlign = col.align || bodyAlign;

            SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-data-o-index="' + odi + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + col.rowIndex + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "default") + '" ', function (_focusedColumn, _selectedColumn) {
              let attrs = "";
              if (_focusedColumn) {
                attrs += 'data-ax6grid-column-focused="true" ';
              }
              if (_selectedColumn) {
                attrs += 'data-ax6grid-column-selected="true" ';
              }
              return attrs;
            }(this.focusedColumn[di + "_" + col.colIndex + "_" + col.rowIndex], this.selectedColumn[di + "_" + col.colIndex + "_" + col.rowIndex]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
              let tdCSS_class = "";
              if (_col.styleClass) {
                if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
                  tdCSS_class += _col.styleClass.call({
                    column: _col,
                    key: _col.key,
                    item: _list[di],
                    index: di
                  }) + " ";
                } else {
                  tdCSS_class += _col.styleClass + " ";
                }
              }
              if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
              if (ci == cl - 1) tdCSS_class += "isLastColumn ";
              return tdCSS_class;
            }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

            SS.push(function (_cellHeight) {
              let lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
              if (!col.multiLine) {
                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
              }

              return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '">';
            }(cellHeight), isGroupingRow ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');

            SS.push('</td>');
          }
          SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-data-o-index="' + odi + '" ', 'data-ax6grid-column-attr="' + "default" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
          SS.push('</tr>');
        }
      }
    }
    SS.push('</table>');

    if (isScrolled && _list.length) {
      SS.push('<div style="background:repeating-linear-gradient(to bottom, ' + stripeString + ');' + 'font-size:0;' + 'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;"></div>');
    }

    _elTarget.empty();
    SS = SS.join('');

    _elTarget.get(0).innerHTML = SS;

    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)
    return true;
  };

  /**
   * @param _elTargetKey
   * @param _colGroup
   * @param _bodyRow
   * @param _list
   * @param [_scrollConfig]
   * @returns {boolean}
   */
  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {
    let _elTarget = this.$.panel[_elTargetKey];

    if (!isFirstPaint && !_scrollConfig) {
      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)
      return false;
    }

    let SS = [],
        cgi,
        cgl,
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign;

    SS.push('<table border="0" cellpadding="0" cellspacing="0">');
    SS.push('<colgroup>');
    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {
      SS.push('<col style="width:' + _colGroup[cgi]._width + 'px;"  />');
    }
    SS.push('<col  />');
    SS.push('</colgroup>');

    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {
      SS.push('<tr class="tr-sum">');
      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {
        col = _bodyRow.rows[tri].cols[ci];
        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
        colAlign = col.align || bodyAlign;

        SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + tri + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "sum") + '" ', function (_focusedColumn, _selectedColumn) {
          var attrs = "";
          if (_focusedColumn) {
            attrs += 'data-ax6grid-column-focused="true" ';
          }
          if (_selectedColumn) {
            attrs += 'data-ax6grid-column-selected="true" ';
          }
          return attrs;
        }(this.focusedColumn["sum_" + col.colIndex + "_" + tri], this.selectedColumn["sum_" + col.colIndex + "_" + tri]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
          var tdCSS_class = "";
          if (_col.styleClass) {
            if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
              tdCSS_class += _col.styleClass.call({
                column: _col,
                key: _col.key,
                isFootSum: true
              }) + " ";
            } else {
              tdCSS_class += _col.styleClass + " ";
            }
          }
          if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
          if (ci == cl - 1) tdCSS_class += "isLastColumn ";
          return tdCSS_class;
        }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

        SS.push(function (_cellHeight) {
          let lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
          if (!col.multiLine) {
            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
          }

          return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '">';
        }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');

        SS.push('</td>');
      }
      SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-column-attr="' + "sum" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
      SS.push('</tr>');
    }

    SS.push('</table>');

    _elTarget.empty();
    SS = SS.join('');

    _elTarget.get(0).innerHTML = SS;

    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)
    return true;
  };

  /**
   * @param _elTargetKey
   * @param _colGroup
   * @param _bodyRow
   * @param _list
   * @param [_scrollConfig]
   * @returns {boolean}
   */
  let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {
    let tblRowMaps = [];
    let _elTarget = this.$.panel[_elTargetKey];
    let token = {},
        hasMergeTd;

    // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.
    let tableTrs = _elTarget.find("tr");
    for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {
      let tableTrTds, trMaps;
      tableTrTds = tableTrs[ri].childNodes;
      trMaps = [];

      for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {
        let tdObj = {
          "$": __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(tableTrTds[ci])
        };

        if (tdObj["$"].attr("data-ax6grid-column-col") != "null") {
          tdObj.dindex = tdObj["$"].attr("data-ax6grid-data-index");
          tdObj.tri = tdObj["$"].attr("data-ax6grid-column-row");
          tdObj.ci = tdObj["$"].attr("data-ax6grid-column-col");
          tdObj.rowIndex = tdObj["$"].attr("data-ax6grid-column-rowIndex");
          tdObj.colIndex = tdObj["$"].attr("data-ax6grid-column-colIndex");
          tdObj.rowspan = tdObj["$"].attr("rowspan");
          tdObj.text = tdObj["$"].text();
          trMaps.push(tdObj);
        }

        tdObj = null;
      }
      tblRowMaps.push(trMaps);
    }

    // 두줄이상 일 때 의미가 있으니.
    if (tblRowMaps.length > 1) {
      hasMergeTd = false;
      for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {
        let prevTokenColIndexs = [];

        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {
          // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.

          if (!_colGroup[ci].editor && (() => {
            if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isArray(cfg.body.mergeCells)) {
              return __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].search(cfg.body.mergeCells, _colGroup[ci].key) > -1;
            } else {
              return true;
            }
          })()) {

            // 앞줄과 값이 같다면.
            if (token[ci] && (() => {
              if (prevTokenColIndexs.length > 0) {
                let hasFalse = true;
                prevTokenColIndexs.forEach(function (ti) {
                  if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {
                    hasFalse = false;
                  }
                });
                return hasFalse;
              } else {
                return true;
              }
            })() && token[ci].text == tblRowMaps[ri][ci].text) {
              tblRowMaps[ri][ci].rowspan = 0;
              tblRowMaps[token[ci].ri][ci].rowspan++;
              hasMergeTd = true;
            } else {
              token[ci] = {
                ri: ri,
                ci: ci,
                text: tblRowMaps[ri][ci].text
              };
            }

            prevTokenColIndexs.push(ci);
          }
        }
      }

      // rowspan을 다 구했으면 적용합니다.
      if (hasMergeTd) {
        for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {
          for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {
            if (tblRowMaps[ri][ci].rowspan == 0) {
              tblRowMaps[ri][ci]["$"].remove();
            } else if (tblRowMaps[ri][ci].rowspan > 1) {
              tblRowMaps[ri][ci]["$"].attr("rowspan", tblRowMaps[ri][ci].rowspan).addClass("merged");
            }
          }
        }
      }
    }
  };

  let scrollConfig = {
    paintStartRowIndex: paintStartRowIndex,
    paintRowCount: paintRowCount,
    paintStartColumnIndex: paintStartColumnIndex,
    paintEndColumnIndex: paintEndColumnIndex,
    nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,
    nopaintRightColumnsWidth: nopaintRightColumnsWidth,
    bodyTrHeight: this.xvar.bodyTrHeight,
    virtualScrollX: this.config.virtualScrollX,
    virtualScrollY: this.config.virtualScrollY
  };
  let frozenScrollConfig = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, scrollConfig, {
    paintStartRowIndex: 0,
    paintRowCount: this.xvar.frozenRowIndex
  });

  // aside
  if (cfg.asidePanelWidth > 0) {
    if (this.xvar.frozenRowIndex > 0) {
      // 상단 행고정
      repaintBody.call(this, "top-aside-body", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);
    }

    repaintBody.call(this, "aside-body-scroll", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);

    if (cfg.footSum) {
      // 바닥 요약 (footSum에 대한 aside 사용안함)
      repaintSum.call(this, "bottom-aside-body", this.asideColGroup, asideBodyRowData, null, list);
    }
  }

  // left
  if (this.xvar.frozenColumnIndex > 0) {
    if (this.xvar.frozenRowIndex > 0) {
      // 상단 행고정
      repaintBody.call(this, "top-left-body", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);
    }

    repaintBody.call(this, "left-body-scroll", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);

    if (cfg.footSum && this.needToPaintSum) {
      // 바닥 요약
      repaintSum.call(this, "bottom-left-body", this.leftHeaderColGroup, leftFootSumData, list);
    }
  }

  // body
  if (this.xvar.frozenRowIndex > 0) {
    // 상단 행고정
    repaintBody.call(this, "top-body-scroll", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);
  }
  repaintBody.call(this, "body-scroll", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);

  // 바닥 요약
  if (cfg.footSum && this.needToPaintSum) {
    repaintSum.call(this, "bottom-body-scroll", headerColGroup, footSumData, list, scrollConfig);
  }
  // right
  if (cfg.rightSum) {}
  // todo : right 표현 정리


  /// mergeCells
  if (cfg.body.mergeCells && list.length) {
    // left
    if (this.xvar.frozenColumnIndex > 0) {
      if (this.xvar.frozenRowIndex > 0) {
        // 상단 행고정
        // console.log(this.leftHeaderColGroup, leftBodyRowData);
        mergeCellsBody.call(this, "top-left-body", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));
      }
      mergeCellsBody.call(this, "left-body-scroll", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);
    }

    // body
    if (this.xvar.frozenRowIndex > 0) {
      // 상단 행고정
      mergeCellsBody.call(this, "top-body-scroll", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));
    }
    mergeCellsBody.call(this, "body-scroll", this.headerColGroup, bodyRowData, list, scrollConfig);
  }

  this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;
  this.xvar.paintStartRowIndex = paintStartRowIndex;
  this.xvar.paintRowCount = paintRowCount;
  this.xvar.virtualPaintRowCount = virtualPaintRowCount;
  this.xvar.paintStartColumnIndex = paintStartColumnIndex;
  this.xvar.paintEndColumnIndex = paintEndColumnIndex;
  this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;
  this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;
  this.xvar.dataRowCount = list.length;
  this.needToPaintSum = false;

  __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_page__["a" /* default */].statusUpdate.call(this);
};

const repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {
  let self = this,
      cfg = this.config,
      list = this.list;

  let updateCell = this.$["panel"][_panelName].find('[data-ax6grid-tr-data-index="' + _dindex + '"]').find('[data-ax6grid-column-rowindex="' + _rowIndex + '"][data-ax6grid-column-colindex="' + _colIndex + '"]').find('[data-ax6grid-cellholder]'),
      colGroup = this.colGroup,
      col = colGroup[_colIndex];

  updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));

  if (col.editor && col.editor.updateWith) {
    col.editor.updateWith.forEach(function (updateColumnKey) {
      colGroup.forEach(function (col) {
        if (col.key == updateColumnKey) {
          let rowIndex = col.rowIndex,
              colIndex = col.colIndex,
              panelName = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,
              updateWithCell = self.$["panel"][panelName].find('[data-ax6grid-tr-data-index="' + _dindex + '"]').find('[data-ax6grid-column-rowindex="' + rowIndex + '"][data-ax6grid-column-colindex="' + colIndex + '"]').find('[data-ax6grid-cellholder]');

          updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));
        }
      });
    });
  }

  /// ~~~~~~

  let paintStartRowIndex = Math.floor(Math.abs(this.$.panel["body-scroll"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,
      headerColGroup = this.headerColGroup,
      leftFootSumData = this.leftFootSumData,
      footSumData = this.footSumData,
      leftBodyGroupingData = this.leftBodyGroupingData,
      bodyGroupingData = this.bodyGroupingData,
      bodyAlign = cfg.body.align,
      paintRowCount = Math.ceil(this.$.panel["body"].height() / this.xvar.bodyTrHeight) + 1,
      scrollConfig = {
    paintStartRowIndex: paintStartRowIndex,
    paintRowCount: paintRowCount,
    bodyTrHeight: this.xvar.bodyTrHeight
  };

  if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {
    headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);
    if (cfg.body.grouping) {
      bodyGroupingData = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);
    }
    if (cfg.footSum) {
      footSumData = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);
    }
  }

  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {
    let _elTarget = this.$.panel[_elTargetKey],
        SS = [],
        cgi,
        cgl,
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign;

    SS.push('<table border="0" cellpadding="0" cellspacing="0">');
    SS.push('<colgroup>');
    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {
      SS.push('<col style="width:' + _colGroup[cgi]._width + 'px;"  />');
    }
    SS.push('<col  />');
    SS.push('</colgroup>');

    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {
      SS.push('<tr class="tr-sum">');
      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {
        col = _bodyRow.rows[tri].cols[ci];
        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
        colAlign = col.align || bodyAlign;

        SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + tri + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "sum") + '" ', function (_focusedColumn, _selectedColumn) {
          var attrs = "";
          if (_focusedColumn) {
            attrs += 'data-ax6grid-column-focused="true" ';
          }
          if (_selectedColumn) {
            attrs += 'data-ax6grid-column-selected="true" ';
          }
          return attrs;
        }(this.focusedColumn["sum_" + col.colIndex + "_" + tri], this.selectedColumn["sum_" + col.colIndex + "_" + tri]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
          let tdCSS_class = "";
          if (_col.styleClass) {
            if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
              tdCSS_class += _col.styleClass.call({
                column: _col,
                key: _col.key,
                isFootSum: true
              }) + " ";
            } else {
              tdCSS_class += _col.styleClass + " ";
            }
          }
          if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
          if (ci == cl - 1) tdCSS_class += "isLastColumn ";
          return tdCSS_class;
        }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

        SS.push(function (_cellHeight) {
          let lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
          if (!col.multiLine) {
            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
          }

          return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '">';
        }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');

        SS.push('</td>');
      }
      SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-column-attr="' + "sum" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
      SS.push('</tr>');
    }

    SS.push('</table>');

    _elTarget.empty().get(0).innerHTML = SS.join('');
    return true;
  };
  let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {
    let _elTarget = this.$.panel[_elTargetKey],
        SS = [],
        di,
        dl,
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign;

    for (di = _scrollConfig.paintStartRowIndex, dl = function () {
      let len;
      len = _list.length;
      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {
        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;
      }
      return len;
    }(); di < dl; di++) {
      if (_list[di] && _groupRow && "__isGrouping" in _list[di]) {
        let rowTable = _groupRow;
        SS = [];
        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {
          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {
            col = rowTable.rows[tri].cols[ci];
            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
            colAlign = col.align || bodyAlign;

            SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + col.rowIndex + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "default") + '" ', function (_focusedColumn, _selectedColumn) {
              let attrs = "";
              if (_focusedColumn) {
                attrs += 'data-ax6grid-column-focused="true" ';
              }
              if (_selectedColumn) {
                attrs += 'data-ax6grid-column-selected="true" ';
              }
              return attrs;
            }(this.focusedColumn[di + "_" + col.colIndex + "_" + col.rowIndex], this.selectedColumn[di + "_" + col.colIndex + "_" + col.rowIndex]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
              let tdCSS_class = "";
              if (_col.styleClass) {
                if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
                  tdCSS_class += _col.styleClass.call({
                    column: _col,
                    key: _col.key,
                    item: _list[di],
                    index: di
                  }) + " ";
                } else {
                  tdCSS_class += _col.styleClass + " ";
                }
              }
              if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
              if (ci == cl - 1) tdCSS_class += "isLastColumn ";
              return tdCSS_class;
            }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

            SS.push(function (_cellHeight) {
              let lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
              if (!col.multiLine) {
                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
              }

              return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '">';
            }(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');

            SS.push('</td>');
          }
          SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-column-attr="' + "default" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
        }
        _elTarget.find('tr[data-ax6grid-tr-data-index="' + di + '"]').empty().get(0).innerHTML = SS.join('');
      }
    }
  };

  // body.grouping tr 다시 그리기..
  if (cfg.body.grouping) {
    // left
    if (this.xvar.frozenColumnIndex > 0) {
      if (this.xvar.frozenRowIndex > 0) {
        // 상단 행고정
        replaceGroupTr.call(this, "top-left-body", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {
          paintStartRowIndex: 0,
          paintRowCount: this.xvar.frozenRowIndex,
          bodyTrHeight: this.xvar.bodyTrHeight
        });
      }
      replaceGroupTr.call(this, "left-body-scroll", headerColGroup, leftBodyGroupingData, list, scrollConfig);
    }

    // body
    if (this.xvar.frozenRowIndex > 0) {
      // 상단 행고정
      replaceGroupTr.call(this, "top-body-scroll", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {
        paintStartRowIndex: 0,
        paintRowCount: this.xvar.frozenRowIndex,
        bodyTrHeight: this.xvar.bodyTrHeight
      });
    }

    replaceGroupTr.call(this, "body-scroll", headerColGroup, bodyGroupingData, list, scrollConfig);
  }

  if (this.xvar.frozenColumnIndex > 0) {
    if (cfg.footSum && this.needToPaintSum) {
      // 바닥 요약
      repaintSum.call(this, "bottom-left-body", headerColGroup, leftFootSumData, list);
    }
  }

  if (cfg.footSum && this.needToPaintSum) {
    // 바닥 요약
    repaintSum.call(this, "bottom-body-scroll", headerColGroup, footSumData, list, scrollConfig);
  }
};

const repaintRow = function (_dindex) {
  let self = this,
      cfg = this.config,
      list = this.list;
  /// ~~~~~~

  let paintStartRowIndex = Math.floor(Math.abs(this.$.panel["body-scroll"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,
      asideBodyRowData = this.asideBodyRowData,
      leftBodyRowData = this.leftBodyRowData,
      bodyRowData = this.bodyRowData,
      leftFootSumData = this.leftFootSumData,
      footSumData = this.footSumData,
      asideBodyGroupingData = this.asideBodyGroupingData,
      leftBodyGroupingData = this.leftBodyGroupingData,
      bodyGroupingData = this.bodyGroupingData,
      bodyAlign = cfg.body.align,
      paintRowCount = Math.ceil(this.$.panel["body"].height() / this.xvar.bodyTrHeight) + 1,
      scrollConfig = {
    paintStartRowIndex: paintStartRowIndex,
    paintRowCount: paintRowCount,
    bodyTrHeight: this.xvar.bodyTrHeight
  };

  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {
    let _elTarget = this.$.panel[_elTargetKey],
        SS = [],
        cgi,
        cgl,
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign;

    SS.push('<table border="0" cellpadding="0" cellspacing="0">');
    SS.push('<colgroup>');
    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {
      SS.push('<col style="width:' + _colGroup[cgi]._width + 'px;"  />');
    }
    SS.push('<col  />');
    SS.push('</colgroup>');

    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {
      SS.push('<tr class="tr-sum">');
      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {
        col = _bodyRow.rows[tri].cols[ci];
        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
        colAlign = col.align || bodyAlign;

        SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + tri + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "sum") + '" ', function (_focusedColumn, _selectedColumn) {
          var attrs = "";
          if (_focusedColumn) {
            attrs += 'data-ax6grid-column-focused="true" ';
          }
          if (_selectedColumn) {
            attrs += 'data-ax6grid-column-selected="true" ';
          }
          return attrs;
        }(this.focusedColumn["sum_" + col.colIndex + "_" + tri], this.selectedColumn["sum_" + col.colIndex + "_" + tri]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
          var tdCSS_class = "";
          if (_col.styleClass) {
            if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
              tdCSS_class += _col.styleClass.call({
                column: _col,
                key: _col.key,
                isFootSum: true
              }) + " ";
            } else {
              tdCSS_class += _col.styleClass + " ";
            }
          }
          if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
          if (ci == cl - 1) tdCSS_class += "isLastColumn ";
          return tdCSS_class;
        }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

        SS.push(function (_cellHeight) {
          var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
          if (!col.multiLine) {
            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
          }

          return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;">';
        }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');

        SS.push('</td>');
      }
      SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-column-attr="' + "sum" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
      SS.push('</tr>');
    }

    SS.push('</table>');

    _elTarget.empty().get(0).innerHTML = SS.join('');
    return true;
  };
  let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {
    let _elTarget = this.$.panel[_elTargetKey],
        SS = [],
        di,
        dl,
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign;

    if (typeof _scrollConfig === "undefined" || typeof _scrollConfig['paintStartRowIndex'] === "undefined") {
      _scrollConfig = {
        paintStartRowIndex: 0,
        paintRowCount: _list.length
      };
    }

    for (di = _scrollConfig.paintStartRowIndex, dl = function () {
      let len;
      len = _list.length;
      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {
        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;
      }
      return len;
    }(); di < dl; di++) {
      if (_list[di] && _groupRow && "__isGrouping" in _list[di]) {
        let rowTable = _groupRow;
        SS = [];
        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {
          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {
            col = rowTable.rows[tri].cols[ci];
            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
            colAlign = col.align || bodyAlign;

            SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + col.rowIndex + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "default") + '" ', function (_focusedColumn, _selectedColumn) {
              let attrs = "";
              if (_focusedColumn) {
                attrs += 'data-ax6grid-column-focused="true" ';
              }
              if (_selectedColumn) {
                attrs += 'data-ax6grid-column-selected="true" ';
              }
              return attrs;
            }(this.focusedColumn[di + "_" + col.colIndex + "_" + col.rowIndex], this.selectedColumn[di + "_" + col.colIndex + "_" + col.rowIndex]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
              let tdCSS_class = "";
              if (_col.styleClass) {
                if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
                  tdCSS_class += _col.styleClass.call({
                    column: _col,
                    key: _col.key,
                    item: _list[di],
                    index: di
                  }) + " ";
                } else {
                  tdCSS_class += _col.styleClass + " ";
                }
              }
              if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
              if (ci == cl - 1) tdCSS_class += "isLastColumn ";
              return tdCSS_class;
            }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

            SS.push(function (_cellHeight) {
              let lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
              if (!col.multiLine) {
                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
              }

              return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;">';
            }(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');

            SS.push('</td>');
          }
          SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-column-attr="' + "default" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
        }
        _elTarget.find('tr[data-ax6grid-tr-data-index="' + di + '"]').empty().get(0).innerHTML = SS.join('');
      }
    }
  };
  let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {
    let _elTarget = this.$.panel[_elTargetKey],
        SS = [],
        tri,
        trl,
        ci,
        cl,
        col,
        cellHeight,
        colAlign,
        rowTable = _bodyRow,
        odi = typeof _list[di].__origin_index__ !== "undefined" ? _list[di].__origin_index__ : di;

    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {
      for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {
        col = rowTable.rows[tri].cols[ci];
        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;
        colAlign = col.align || bodyAlign;

        SS.push('<td ', 'data-ax6grid-panel-name="' + _elTargetKey + '" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-data-o-index="' + odi + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', 'data-ax6grid-column-rowIndex="' + col.rowIndex + '" ', 'data-ax6grid-column-colIndex="' + col.colIndex + '" ', 'data-ax6grid-column-attr="' + (col.columnAttr || "default") + '" ', function (_focusedColumn, _selectedColumn) {
          let attrs = "";
          if (_focusedColumn) {
            attrs += 'data-ax6grid-column-focused="true" ';
          }
          if (_selectedColumn) {
            attrs += 'data-ax6grid-column-selected="true" ';
          }
          return attrs;
        }(this.focusedColumn[di + "_" + col.colIndex + "_" + col.rowIndex], this.selectedColumn[di + "_" + col.colIndex + "_" + col.rowIndex]), 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
          let tdCSS_class = "";
          if (_col.styleClass) {
            if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.styleClass)) {
              tdCSS_class += _col.styleClass.call({
                column: _col,
                key: _col.key,
                item: _list[di],
                index: di
              }) + " ";
            } else {
              tdCSS_class += _col.styleClass + " ";
            }
          }
          if (cfg.body.columnBorderWidth) tdCSS_class += "hasBorder ";
          if (ci == cl - 1) tdCSS_class += "isLastColumn ";
          return tdCSS_class;
        }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

        SS.push(function (_cellHeight) {
          let lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;
          if (!col.multiLine) {
            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;
          }

          return '<span data-ax6grid-cellHolder="' + (col.multiLine ? 'multiLine' : '') + '" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + '" style="height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '">';
        }(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');
        SS.push('</td>');
      }
      SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'data-ax6grid-data-index="' + di + '" ', 'data-ax6grid-column-attr="' + "default" + '" ', 'style="height: ' + cfg.body.columnHeight + 'px;min-height: 1px;" ', '></td>');
    }

    _elTarget.find('tr[data-ax6grid-tr-data-index="' + di + '"]').empty().get(0).innerHTML = SS.join('');
  };

  // left
  if (this.xvar.frozenColumnIndex > 0) {
    if (this.xvar.frozenRowIndex > _dindex) {
      // 상단 행고정
      replaceTr.call(this, "top-left-body", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);
    } else {
      replaceTr.call(this, "left-body-scroll", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);
    }
  }

  // body
  if (this.xvar.frozenRowIndex > _dindex) {
    // 상단 행고정
    replaceTr.call(this, "top-body-scroll", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);
  } else {
    replaceTr.call(this, "body-scroll", this.headerColGroup, bodyRowData, list, _dindex);
  }

  // body.grouping tr 다시 그리기..
  if (cfg.body.grouping) {
    // left
    if (this.xvar.frozenColumnIndex > 0) {
      if (this.xvar.frozenRowIndex > _dindex) {
        // 상단 행고정
        replaceGroupTr.call(this, "top-left-body", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));
      } else {
        replaceGroupTr.call(this, "left-body-scroll", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);
      }
    }

    // body
    if (this.xvar.frozenRowIndex > _dindex) {
      // 상단 행고정
      replaceGroupTr.call(this, "top-body-scroll", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));
    } else {
      replaceGroupTr.call(this, "body-scroll", this.headerColGroup, bodyGroupingData, list, scrollConfig);
    }
  }

  if (this.xvar.frozenColumnIndex > 0) {
    if (cfg.footSum && this.needToPaintSum) {
      // 바닥 요약
      repaintSum.call(this, "bottom-left-body", this.leftHeaderColGroup, leftFootSumData, list);
    }
  }

  if (cfg.footSum && this.needToPaintSum) {
    // 바닥 요약
    repaintSum.call(this, "bottom-body-scroll", this.headerColGroup, footSumData, list, scrollConfig);
  }
};

const updateRowState = function (_states, _dindex, _doindex, _data) {
  let self = this,
      cfg = this.config,
      processor = {
    "selected": function (_dindex, _doindex) {
      if (this.list[_doindex]) {
        let i = this.$.livePanelKeys.length;
        while (i--) {
          this.$.panel[this.$.livePanelKeys[i]].find('[data-ax6grid-tr-data-index="' + _dindex + '"]').attr("data-ax6grid-selected", this.list[_doindex][cfg.columnKeys.selected]);
        }
      }
    },
    "selectedClear": function () {
      let di = this.list.length;
      let pi;

      if (!this.proxyList) {
        while (di--) {
          if (this.list[di][cfg.columnKeys.selected]) {
            pi = this.$.livePanelKeys.length;
            while (pi--) {
              this.$.panel[this.$.livePanelKeys[pi]].find('[data-ax6grid-tr-data-index="' + di + '"]').attr("data-ax6grid-selected", false);
            }
          }
          this.list[di][cfg.columnKeys.selected] = false;
        }
      } else {
        while (di--) {
          this.list[di][cfg.columnKeys.selected] = false;
        }
        di = this.proxyList.length;
        while (di--) {
          if (this.list[doi][cfg.columnKeys.selected]) {
            pi = this.$.livePanelKeys.length;
            while (pi--) {
              this.$.panel[this.$.livePanelKeys[pi]].find('[data-ax6grid-tr-data-index="' + di + '"]').attr("data-ax6grid-selected", false);
            }
          }

          this.proxyList[di][cfg.columnKeys.selected] = false;
          let doi = this.proxyList[di].__original_index__;
        }
      }
    },
    "cellChecked": function (_dindex, _doindex, _data) {
      let key = _data.key,
          rowIndex = _data.rowIndex,
          colIndex = _data.colIndex;

      let panelName = function () {
        let _panels = [];
        if (this.xvar.frozenRowIndex > _dindex) _panels.push("top");
        if (this.xvar.frozenColumnIndex > colIndex) _panels.push("left");
        _panels.push("body");
        if (_panels[0] !== "top") _panels.push("scroll");
        return _panels.join("-");
      }.call(this);

      this.$.panel[panelName].find('[data-ax6grid-tr-data-index="' + _dindex + '"]').find('[data-ax6grid-column-rowIndex="' + rowIndex + '"][data-ax6grid-column-colIndex="' + colIndex + '"]').find('[data-ax6grid-editor="checkbox"]').attr("data-ax6grid-checked", '' + _data.checked);
    }
  };

  if (typeof _doindex === "undefined") _doindex = _dindex;

  _states.forEach(function (_state) {
    if (!processor[_state]) throw 'invaild state name';
    processor[_state].call(self, _dindex, _doindex, _data);
  });
};

const updateRowStateAll = function (_states, _data) {
  let self = this,
      cfg = this.config,
      processor = {
    "selected": function (_dindex) {
      repaint.call(this, true);
    }
  };

  _states.forEach(function (_state) {
    if (!processor[_state]) throw 'invaild state name';
    processor[_state].call(self, _data);
  });
};

const toggleCollapse = function (_dindex, _doindex, _collapse) {
  if (__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].toggleCollapse.call(this, _dindex, _doindex, _collapse)) {
    this.proxyList = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getProxyList.call(this, this.list);
    this.align();
  }
};

const scrollTo = function (css, opts) {
  let self = this;
  if (typeof opts === "undefined") opts = { timeoutUnUse: false };
  if (this.isInlineEditing) {
    for (var key in this.inlineEditing) {
      //if(this.inlineEditing[key].editor.type === "select") {}
      // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리
      inlineEdit.deActive.call(this, "ESC", key);
    }
  }

  if (this.config.asidePanelWidth > 0 && "top" in css) {
    this.$.panel["aside-body-scroll"].css({ top: css.top });
  }
  if (this.xvar.frozenColumnIndex > 0 && "top" in css) {
    this.$.panel["left-body-scroll"].css({ top: css.top });
  }
  if (this.xvar.frozenRowIndex > 0 && "left" in css) {
    this.$.panel["top-body-scroll"].css({ left: css.left });
  }

  this.$.panel["body-scroll"].css(css);

  if (this.config.footSum && "left" in css) {
    this.$.panel["bottom-body-scroll"].css({ left: css.left });
  }

  // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화
  if (this.__throttledScroll) {
    this.__throttledScroll(css, opts);
  } else {
    if (this.config.virtualScrollY && !opts.noRepaint && "top" in css) {
      repaint.call(this);
    } else if (this.config.virtualScrollX && !opts.noRepaint && "left" in css) {
      repaint.call(this);
    }
    if (opts.callback) {
      opts.callback();
    }
  }
};

const blur = function () {
  columnSelect.focusClear.call(this);
  columnSelect.clear.call(this);
  if (this.isInlineEditing) {
    inlineEdit.deActive.call(this);
  }
};

const moveFocus = function (_position) {
  let focus = {
    "UD": function (_dy) {
      let moveResult = true,
          focusedColumn,
          originalColumn,
          while_i,
          nPanelInfo;

      for (let c in this.focusedColumn) {
        focusedColumn = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.focusedColumn[c], true);
        break;
      }

      if (!focusedColumn) return false;

      originalColumn = this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex];
      columnSelect.focusClear.call(this);
      columnSelect.clear.call(this);

      if (_dy > 0) {
        // 아래로
        if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {
          focusedColumn.dindex = focusedColumn.dindex + _dy;
          focusedColumn.doindex = focusedColumn.doindex + _dy;
          focusedColumn.rowIndex = 0;
          if (focusedColumn.dindex > this.list.length - 1) {
            focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;
            moveResult = false;
          }
        } else {
          focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;
        }
      } else {
        // 위로
        if (focusedColumn.rowIndex + _dy < 0) {
          focusedColumn.dindex = focusedColumn.dindex + _dy;
          focusedColumn.doindex = focusedColumn.doindex + _dy;
          focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;
          if (focusedColumn.dindex < 0) {
            focusedColumn.dindex = focusedColumn.doindex = 0;
            moveResult = false;
          }
        } else {
          focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;
        }
      }

      while_i = 0;
      while (typeof this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
        if (focusedColumn.rowIndex == 0 || while_i % 2 == (_dy > 0 ? 0 : 1)) {
          focusedColumn.colIndex--;
        } else {
          focusedColumn.rowIndex--;
        }

        if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {
          // find fail
          moveResult = false;
          break;
        }
        while_i++;
      }

      nPanelInfo = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);

      // if mergeCells
      if (this.config.body.mergeCells && this.list.length) {
        while (!this.$.panel[nPanelInfo.panelName].find('[data-ax6grid-tr-data-index="' + focusedColumn.dindex + '"]').find('[data-ax6grid-column-rowindex="' + focusedColumn.rowIndex + '"][data-ax6grid-column-colindex="' + focusedColumn.colIndex + '"]').get(0)) {

          if (_dy > 0) {
            focusedColumn.dindex++;
          } else {
            focusedColumn.dindex--;
          }

          if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {
            break;
          }
        }
        nPanelInfo = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);
      }

      focusedColumn.panelName = nPanelInfo.panelName;

      // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ

      if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {
        if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {
          let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;
          if (newTop < 0) newTop = 0;
          scrollTo.call(this, { top: -newTop, timeoutUnUse: false });
          __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
        } else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {
          scrollTo.call(this, { top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false });
          __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
        }
      }

      this.focusedColumn[focusedColumn.dindex + "_" + focusedColumn.colIndex + "_" + focusedColumn.rowIndex] = focusedColumn;
      this.$.panel[focusedColumn.panelName].find('[data-ax6grid-tr-data-index="' + focusedColumn.dindex + '"]').find('[data-ax6grid-column-rowindex="' + focusedColumn.rowIndex + '"][data-ax6grid-column-colindex="' + focusedColumn.colIndex + '"]').attr('data-ax6grid-column-focused', "true");

      return moveResult;
    },
    "LR": function (_dx) {
      let moveResult = true,
          focusedColumn,
          originalColumn,
          while_i = 0,
          isScrollPanel = false,
          containerPanelName = "",
          nPanelInfo;

      for (var c in this.focusedColumn) {
        focusedColumn = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.focusedColumn[c], true);
        break;
      }
      if (!focusedColumn) return false;

      originalColumn = this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex];

      columnSelect.focusClear.call(this);
      columnSelect.clear.call(this);

      if (_dx < 0) {
        focusedColumn.colIndex = focusedColumn.colIndex + _dx;
        if (focusedColumn.colIndex < 0) {
          focusedColumn.colIndex = 0;
          moveResult = false;
        }
      } else {
        focusedColumn.colIndex = focusedColumn.colIndex + _dx;
        if (focusedColumn.colIndex > this.colGroup.length - 1) {
          focusedColumn.colIndex = this.colGroup.length - 1;
          moveResult = false;
        }
      }

      if (typeof this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
        focusedColumn.rowIndex = 0;
      }

      if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {
        if (_dx < 0) {
          while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
            focusedColumn.colIndex--;
            if (focusedColumn.colIndex <= 0) {
              // find fail
              moveResult = false;
              break;
            }
          }
        } else {
          while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
            focusedColumn.colIndex++;
            if (focusedColumn.colIndex >= this.colGroup.length) {
              // find fail
              moveResult = false;
              break;
            }
          }
        }
      } else {
        if (_dx < 0) {
          while (typeof this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
            focusedColumn.colIndex--;
            if (focusedColumn.colIndex <= 0) {
              // find fail
              moveResult = false;
              break;
            }
          }
        } else {
          while (typeof this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
            focusedColumn.colIndex++;
            if (focusedColumn.colIndex >= this.colGroup.length) {
              // find fail
              moveResult = false;
              break;
            }
          }
        }
      }

      nPanelInfo = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);

      // if mergeCells
      if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {
        while (!this.$.panel[nPanelInfo.panelName].find('[data-ax6grid-tr-data-index="' + focusedColumn.dindex + '"]').find('[data-ax6grid-column-rowindex="' + focusedColumn.rowIndex + '"][data-ax6grid-column-colindex="' + focusedColumn.colIndex + '"]').get(0)) {

          focusedColumn.dindex--;

          if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {
            break;
          }
        }
        nPanelInfo = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);
      }

      focusedColumn.panelName = nPanelInfo.panelName;

      // 포커스 컬럼의 위치에 따라 스크롤 처리
      let isScrollTo = function () {
        if (!this.config.virtualScrollX) return false;
        let scrollLeft = 0;
        if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {
          if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {
            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;
            scrollTo.call(this, { left: scrollLeft });
            __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_header__["a" /* default */].scrollTo.call(this, { left: scrollLeft });
            __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
            return true;
          } else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {
            if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {
              scrollLeft = this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth;
              scrollTo.call(this, { left: -scrollLeft });
              __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_header__["a" /* default */].scrollTo.call(this, { left: -scrollLeft });
              __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
            }
            return true;
          }
        }
        scrollLeft = null;
        return false;
      }.call(this);

      containerPanelName = nPanelInfo.containerPanelName;
      isScrollPanel = nPanelInfo.isScrollPanel;

      this.focusedColumn[focusedColumn.dindex + "_" + focusedColumn.colIndex + "_" + focusedColumn.rowIndex] = focusedColumn;

      var $column = this.$.panel[focusedColumn.panelName].find('[data-ax6grid-tr-data-index="' + focusedColumn.dindex + '"]').find('[data-ax6grid-column-rowindex="' + focusedColumn.rowIndex + '"][data-ax6grid-column-colindex="' + focusedColumn.colIndex + '"]').attr('data-ax6grid-column-focused', "true");

      if (!isScrollTo && $column && isScrollPanel) {
        // 스크롤 패널 이라면~
        // todo : 컬럼이동할 때에도 scrollTo 체크
        var newLeft = function () {
          if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {
            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();
          } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {
            return $column.position().left;
          } else {
            return;
          }
        }.call(this);

        if (typeof newLeft !== "undefined") {
          __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_header__["a" /* default */].scrollTo.call(this, { left: -newLeft });
          scrollTo.call(this, { left: -newLeft });
          __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
        }
      }

      return moveResult;
    },
    "INDEX": function (_dindex) {
      let moveResult = true,
          focusedColumn,
          originalColumn,
          while_i;

      for (let c in this.focusedColumn) {
        focusedColumn = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.focusedColumn[c], true);
        break;
      }
      if (!focusedColumn) {
        focusedColumn = {
          rowIndex: 0,
          colIndex: 0
        };
      }
      originalColumn = this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex];

      columnSelect.focusClear.call(this);
      columnSelect.clear.call(this);

      if (_dindex == "end") {
        _dindex = this.list.length - 1;
      }

      focusedColumn.dindex = _dindex;
      focusedColumn.rowIndex = 0;

      while_i = 0;
      while (typeof this.bodyRowMap[focusedColumn.rowIndex + "_" + focusedColumn.colIndex] === "undefined") {
        if (focusedColumn.rowIndex == 0 || while_i % 2 == (_dy > 0 ? 0 : 1)) {
          focusedColumn.colIndex--;
        } else {
          focusedColumn.rowIndex--;
        }

        if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {
          // find fail
          break;
        }
        while_i++;
      }

      let nPanelInfo = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);
      focusedColumn.panelName = nPanelInfo.panelName;

      // 포커스 컬럼의 위치에 따라 스크롤 처리.
      (function () {
        if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {
          if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {
            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight });
            __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
          } else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {
            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight });
            __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_scroller__["a" /* default */].resize.call(this);
          }
        }
      }).call(this);

      this.focusedColumn[focusedColumn.dindex + "_" + focusedColumn.colIndex + "_" + focusedColumn.rowIndex] = focusedColumn;
      this.$.panel[focusedColumn.panelName].find('[data-ax6grid-tr-data-index="' + focusedColumn.dindex + '"]').find('[data-ax6grid-column-rowindex="' + focusedColumn.rowIndex + '"][data-ax6grid-column-colindex="' + focusedColumn.colIndex + '"]').attr('data-ax6grid-column-focused', "true");

      return moveResult;
    }
  };

  let processor = {
    "UP": function () {
      return focus["UD"].call(this, -1);
    },
    "DOWN": function () {
      return focus["UD"].call(this, 1);
    },
    "LEFT": function () {
      return focus["LR"].call(this, -1);
    },
    "RIGHT": function () {
      return focus["LR"].call(this, 1);
    },
    "HOME": function () {
      return focus["INDEX"].call(this, 0);
    },
    "END": function () {
      return focus["INDEX"].call(this, "end");
    },
    "position": function (_position) {
      return focus["INDEX"].call(this, _position);
    }
  };

  if (_position in processor) {
    return processor[_position].call(this);
  } else {
    return processor["position"].call(this, _position);
  }
};

const getExcelString = function () {
  let cfg = this.config,
      list = this.list,
      bodyRowData = this.bodyRowTable,
      footSumData = this.footSumTable,
      bodyGroupingData = this.bodyGroupingTable;

  // body-scroll 의 포지션에 의존적이므로..
  let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {
    let SS = [],
        di,
        dl,
        tri,
        trl,
        ci,
        cl,
        col,
        val;

    //SS.push('<table border="1">');
    for (di = 0, dl = _list.length; di < dl; di++) {
      let isGroupingRow = false,
          rowTable;

      if (_groupRow && "__isGrouping" in _list[di]) {
        rowTable = _groupRow;
        isGroupingRow = true;
      } else {
        rowTable = _bodyRow;
      }

      for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {
        SS.push('\n<tr>');
        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {
          col = rowTable.rows[tri].cols[ci];

          SS.push('<td ', 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', '>', isGroupingRow ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, "text"), '&nbsp;</td>');
        }
        SS.push('\n</tr>');
      }
    }
    //SS.push('</table>');
    return SS.join('');
  };
  let getSum = function (_colGroup, _bodyRow, _list) {
    let SS = [],
        tri,
        trl,
        ci,
        cl,
        col;

    //SS.push('<table border="1">');
    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {
      SS.push('\n<tr>');
      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {
        col = _bodyRow.rows[tri].cols[ci];
        SS.push('<td ', 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', '>', getSumFieldValue.call(this, _list, col), '</td>');
      }
      SS.push('\n</tr>');
    }
    //SS.push('</table>');

    return SS.join('');
  };

  let po = [];
  po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));
  if (cfg.footSum) {
    // 바닥 요약
    po.push(getSum.call(this, this.headerColGroup, footSumData, list));
  }

  // right
  if (cfg.rightSum) {
    // todo : right 표현 정리
  }

  return po.join('');
};

const click = function (_dindex, _doindex) {
  let that = {
    self: this,
    page: this.page,
    list: this.list,
    item: this.list[_dindex],
    dindex: _dindex
  };

  moveFocus.call(this, _dindex);

  if (this.config.body.onClick) {
    this.config.body.onClick.call(that);
  }

  that = null;
  // console.log(this.$["panel"]["body-scroll"].find('[data-ax6grid-tr-data-index="' + _dindex + '"]>td:first-child'));
};

const dblClick = function (_dindex, _doindex) {
  let that = {
    self: this,
    page: this.page,
    list: this.list,
    item: this.list[_dindex],
    dindex: _dindex
  };

  moveFocus.call(this, _dindex);

  if (this.config.body.onDBLClick) {
    this.config.body.onDBLClick.call(that);
  }

  that = null;
};

/**
 * @module AX6UIGrid_body
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   *
   */
  init: function () {
    let self = this;

    this.$["container"]["body"].on("dblclick", '[data-ax6grid-column-attr]', function (e) {
      let panelName,
          attr,
          row,
          col,
          dindex,
          doindex,
          rowIndex,
          colIndex,
          targetDBLClick = {
        "default": function (_column) {
          if (self.isInlineEditing) {
            for (let columnKey in self.inlineEditing) {
              if (columnKey == _column.dindex + "_" + _column.colIndex + "_" + _column.rowIndex) {
                return this;
              }
            }
          }

          let column = self.bodyRowMap[_column.rowIndex + "_" + _column.colIndex],
              value = "";
          if (column) {
            if (!self.list[dindex].__isGrouping) {
              value = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(self, dindex, doindex, column.key);
            }
          }

          let editor = self.colGroup[_column.colIndex].editor;
          if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isObject(editor)) {
            inlineEdit.active.call(self, self.focusedColumn, e, value);
          } else {
            // 더블클릭 실행
            if (self.config.body.onDBLClick) {
              let that = {
                self: self,
                page: self.page,
                list: self.list,
                item: self.list[_column.dindex],
                dindex: _column.dindex,
                doindex: _column.doindex,
                rowIndex: _column.rowIndex,
                colIndex: _column.colIndex,
                column: column,
                value: self.list[_column.dindex][column.key]
              };
              self.config.body.onDBLClick.call(that);
            }
          }
        },
        "rowSelector": function (_column) {},
        "lineNumber": function (_column) {}
      };

      panelName = this.getAttribute("data-ax6grid-panel-name");
      attr = this.getAttribute("data-ax6grid-column-attr");
      row = Number(this.getAttribute("data-ax6grid-column-row"));
      col = Number(this.getAttribute("data-ax6grid-column-col"));
      rowIndex = Number(this.getAttribute("data-ax6grid-column-rowIndex"));
      colIndex = Number(this.getAttribute("data-ax6grid-column-colIndex"));
      dindex = Number(this.getAttribute("data-ax6grid-data-index"));
      doindex = Number(this.getAttribute("data-ax6grid-data-o-index"));

      if (attr in targetDBLClick) {
        targetDBLClick[attr]({
          panelName: panelName,
          attr: attr,
          row: row,
          col: col,
          dindex: dindex,
          doindex: doindex,
          rowIndex: rowIndex,
          colIndex: colIndex
        });

        __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
      }
    });

    this.$["container"]["body"].on("click", '[data-ax6grid-column-attr]', function (e) {
      let panelName,
          attr,
          row,
          col,
          dindex,
          doindex,
          rowIndex,
          colIndex,
          disableSelection,
          targetClick = {
        "default": function (_column) {
          let column = self.bodyRowMap[_column.rowIndex + "_" + _column.colIndex],
              that = {
            self: self,
            page: self.page,
            list: self.list,
            item: self.list[_column.doindex],
            dindex: _column.dindex,
            doindex: _column.doindex,
            rowIndex: _column.rowIndex,
            colIndex: _column.colIndex,
            column: column,
            value: self.list[_column.dindex][column.key]
          };

          if (column.editor && column.editor.type == "checkbox") {
            // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.
            let value = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].getValue.call(self, _column.dindex, _column.doindex, column.key),
                checked,
                newValue;

            if (column.editor.config && column.editor.config.trueValue) {
              if (checked = !(value == column.editor.config.trueValue)) {
                newValue = column.editor.config.trueValue;
              } else {
                newValue = column.editor.config.falseValue;
              }
            } else {
              newValue = checked = value == false || value == "false" || value < "1" ? "true" : "false";
            }

            __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);

            updateRowState.call(self, ["cellChecked"], _column.dindex, _column.doindex, {
              key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,
              editorConfig: column.editor.config, checked: checked
            });
          } else {
            if (self.config.body.onClick) {
              self.config.body.onClick.call(that);
            }
          }
        },
        "rowSelector": function (_column) {
          let item = self.list[_column.doindex];
          if (item[self.config.columnKeys.disableSelection]) {
            return false;
          }

          if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {
            updateRowState.call(self, ["selectedClear"]);
            __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].clearSelect.call(self);
          }

          __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_data__["a" /* default */].select.call(self, _column.dindex, _column.doindex, undefined, {
            internalCall: true
          });
          updateRowState.call(self, ["selected"], _column.dindex, _column.doindex);
        },
        "lineNumber": function (_column) {},
        "tree-control": function (_column, _el) {
          //console.log(_column);
          toggleCollapse.call(self, _column.dindex, _column.doindex);
        }
      };

      panelName = this.getAttribute("data-ax6grid-panel-name");
      attr = this.getAttribute("data-ax6grid-column-attr");
      row = Number(this.getAttribute("data-ax6grid-column-row"));
      col = Number(this.getAttribute("data-ax6grid-column-col"));
      rowIndex = Number(this.getAttribute("data-ax6grid-column-rowIndex"));
      colIndex = Number(this.getAttribute("data-ax6grid-column-colIndex"));
      dindex = Number(this.getAttribute("data-ax6grid-data-index"));
      doindex = Number(this.getAttribute("data-ax6grid-data-o-index"));

      if (attr in targetClick) {
        targetClick[attr]({
          panelName: panelName,
          attr: attr,
          row: row,
          col: col,
          dindex: dindex,
          doindex: doindex,
          rowIndex: rowIndex,
          colIndex: colIndex
        }, this);
      }
    });

    this.$["container"]["body"].on("contextmenu", function (e) {
      let target,
          dindex,
          doindex,
          rowIndex,
          colIndex,
          item,
          column,
          param = {};

      target = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].findParentNode(e.target, function (t) {
        if (t.getAttribute("data-ax6grid-column-attr")) {
          return true;
        }
      });

      if (target) {
        // item 찾기
        rowIndex = Number(target.getAttribute("data-ax6grid-column-rowIndex"));
        colIndex = Number(target.getAttribute("data-ax6grid-column-colIndex"));
        dindex = Number(target.getAttribute("data-ax6grid-data-index"));
        doindex = Number(target.getAttribute("data-ax6grid-data-o-index"));
        column = self.bodyRowMap[rowIndex + "_" + colIndex];
        item = self.list[dindex];
      }

      if (self.config.body.onContextMenu) {
        param = {
          element: target,
          dindex: dindex,
          doindex: doindex,
          rowIndex: rowIndex,
          colIndex: colIndex,
          item: item,
          column: column,
          gridSelf: self
        };
        self.config.body.onContextMenu.call({
          self: self,
          item: item,
          column: column,
          dindex: dindex,
          doindex: doindex,
          rowIndex: rowIndex,
          colIndex: colIndex
        }, e, param);
      }

      __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e.originalEvent);
      target = null;
      dindex = null;
      doindex = null;
      rowIndex = null;
      colIndex = null;
      item = null;
      column = null;
      param = null;
    });

    this.$["container"]["body"].on("mousedown", '[data-ax6grid-column-attr="default"]', function (e) {
      if (self.xvar.touchmoved) return false;
      if (this.getAttribute("data-ax6grid-column-rowIndex")) {
        columnSelector.on.call(self, {
          panelName: this.getAttribute("data-ax6grid-panel-name"),
          dindex: Number(this.getAttribute("data-ax6grid-data-index")),
          doindex: Number(this.getAttribute("data-ax6grid-data-o-index")),
          rowIndex: Number(this.getAttribute("data-ax6grid-column-rowIndex")),
          colIndex: Number(this.getAttribute("data-ax6grid-column-colIndex")),
          colspan: Number(this.getAttribute("colspan"))
        });
      }
    }).on("dragstart", function (e) {
      __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
      return false;
    });

    resetFrozenColumn.call(this);

    // 그리드 바디에 출력할 여유 카운트
    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;
    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);

    if (this.config.virtualScrollAccelerated) {
      this.__throttledScroll = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].throttle(function (css, opts) {
        if (this.config.virtualScrollY && !opts.noRepaint && "top" in css) {
          repaint.call(this);
        } else if (this.config.virtualScrollX && !opts.noRepaint && "left" in css) {
          repaint.call(this);
        }
        if (opts.callback) {
          opts.callback();
        }
      }, this.config.virtualScrollAcceleratedDelayTime);
    } else {
      this.__throttledScroll = false;
    }
  },
  /**
   *
   * @param _reset
   * @return {module:AX6UIGrid_body}
   */
  repaint: repaint,
  /**
   *
   * @param _panelName
   * @param _dindex
   * @param _doindex
   * @param _rowIndex
   * @param _colIndex
   * @param _newValue
   */
  repaintCell: repaintCell,
  /**
   *
   * @param _dindex
   */
  repaintRow: repaintRow,
  /**
   *
   * @param _states
   * @param _dindex
   * @param _doindex
   * @param _data
   */
  updateRowState: updateRowState,
  /**
   *
   * @param _states
   * @param _data
   */
  updateRowStateAll: updateRowStateAll,
  /**
   *
   * @param css
   * @param opts
   */
  scrollTo: scrollTo,
  /**
   *
   */
  blur: blur,
  /**
   *
   * @param _position
   * @return {*}
   */
  moveFocus: moveFocus,
  inlineEdit: inlineEdit,
  /**
   *
   * @return {string}
   */
  getExcelString: getExcelString,
  /**
   *
   * @param _dindex
   * @param _doindex
   * @param _collapse
   */
  toggleCollapse: toggleCollapse,
  /**
   *
   * @param _dindex
   * @param _doindex
   */
  click: click,
  /**
   *
   * @param _dindex
   * @param _doindex
   */
  dblClick: dblClick
});

/***/ }),
/* 7 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__ = __webpack_require__(5);




/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

const clearGroupingData = function (_list) {
  let i = 0,
      l = _list.length,
      returnList = [];
  for (; i < l; i++) {
    if (_list[i] && !_list[i]["__isGrouping"]) {
      if (_list[i][this.config.columnKeys.selected]) {
        this.selectedDataIndexs.push(i);
      }
      returnList.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, _list[i]));
    }
  }
  return returnList;
};

const initData = function (_list) {
  this.selectedDataIndexs = [];
  // this.deletedList = [];
  // todo : deletedList 초기화 시점이 언제로 하는게 좋은가. set 메소드에서 초기화 하는 것으로 수정

  let i = 0,
      l = _list.length,
      returnList = [],
      appendIndex = 0,
      dataRealRowCount = 0,
      lineNumber = 0;

  if (this.config.body.grouping) {

    let groupingKeys = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].map(this.bodyGrouping.by, function () {
      return {
        key: this,
        compareString: "",
        grouping: false,
        list: []
      };
    });

    let gi = 0,
        gl = groupingKeys.length,
        compareString,
        appendRow = [],
        ari;
    for (; i < l + 1; i++) {
      gi = 0;

      if (_list[i] && _list[i][this.config.columnKeys.deleted]) {
        this.deletedList.push(_list[i]);
      } else {
        compareString = ""; // 그룹핑 구문검사용
        appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄

        // 그룹핑 구문검사
        for (; gi < gl; gi++) {
          if (_list[i]) {
            compareString += "$|$" + _list[i][groupingKeys[gi].key];
          }

          if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {
            let appendRowItem = { keys: [], labels: [], list: groupingKeys[gi].list };
            for (let ki = 0; ki < gi + 1; ki++) {
              appendRowItem.keys.push(groupingKeys[ki].key);
              appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);
            }
            appendRow.push(appendRowItem);
            groupingKeys[gi].list = [];
          }

          groupingKeys[gi].list.push(_list[i]);
          groupingKeys[gi].compareString = compareString;
        }

        // 새로 추가해야할 그룹핑 row
        ari = appendRow.length;
        while (ari--) {
          returnList.push({ __isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: { keys: appendRow[ari].keys, labels: appendRow[ari].labels } });
        }
        //~ 그룹핑 구문 검사 완료

        if (_list[i]) {
          if (_list[i][this.config.columnKeys.selected]) {
            this.selectedDataIndexs.push(i);
          }
          // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.
          _list[i]["__original_index"] = _list[i]["__index"] = lineNumber;
          returnList.push(_list[i]);

          dataRealRowCount++;
          appendIndex++;
          lineNumber++;
        }
      }
    }
  } else {
    for (; i < l; i++) {
      if (_list[i]) {
        if (_list[i][this.config.columnKeys.deleted]) {
          this.deletedList.push(_list[i]);
        } else {

          if (_list[i][this.config.columnKeys.selected]) {
            this.selectedDataIndexs.push(i);
          }

          // __original_index 인덱스 키가 없다면 추가.
          if (typeof _list[i]["__original_index"] === "undefined") {
            _list[i]["__original_index"] = lineNumber;
          }
          _list[i]["__index"] = lineNumber;
          dataRealRowCount++;
          lineNumber++;
          returnList.push(_list[i]);
        }
      }
    }
  }

  // 원본 데이터의 갯수
  // grouping은 제외하고 수집됨.
  this.xvar.dataRealRowCount = dataRealRowCount;
  return returnList;
};

const arrangeData4tree = function (_list) {
  this.selectedDataIndexs = [];
  this.deletedList = [];
  let i = 0,
      seq = 0,
      appendIndex = 0,
      dataRealRowCount = 0,
      lineNumber = 0;

  let li = _list.length;
  let keys = this.config.tree.columnKeys;
  let hashDigit = this.config.tree.hashDigit;
  let listIndexMap = {};

  while (li--) {
    delete _list[li][keys.parentHash];
    delete _list[li][keys.selfHash];
    //delete _list[li][keys.childrenLength];
  }

  /// 루트 아이템 수집
  i = 0;
  seq = 0;
  li = _list.length;
  for (; i < li; i++) {
    if (_list[i]) {
      listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱

      if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === "top") {
        // 최상위 아이템인 경우
        _list[i][keys.parentKey] = "top";
        _list[i][keys.children] = [];
        _list[i][keys.parentHash] = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit("0", hashDigit);
        _list[i][keys.selfHash] = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit("0", hashDigit) + "." + __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit(seq, hashDigit);
        _list[i][keys.depth] = 0;
        _list[i][keys.hidden] = false;

        seq++;
      }
    }
  }

  /// 자식 아이템 수집
  i = 0;
  lineNumber = 0;
  for (; i < li; i++) {
    let _parent, _parentHash;
    if (_list[i] && _list[i][keys.parentKey] !== "top" && typeof _list[i][keys.parentHash] === "undefined") {

      if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {
        _parentHash = _parent[keys.selfHash];
        _list[i][keys.children] = [];
        _list[i][keys.parentHash] = _parentHash;
        _list[i][keys.selfHash] = _parentHash + "." + __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit(_parent[keys.children].length, hashDigit);
        _list[i][keys.depth] = _parent[keys.depth] + 1;
        if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;
        _parent[keys.children].push(_list[i][keys.selfKey]);
      } else {
        _list[i][keys.parentKey] = "top";
        _list[i][keys.children] = [];
        _list[i][keys.parentHash] = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit("0", hashDigit);
        _list[i][keys.selfHash] = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit("0", hashDigit) + "." + __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].setDigit(seq, hashDigit);
        _list[i][keys.hidden] = false;

        seq++;
      }
    }

    if (_list[i]) {
      if (_list[i][this.config.columnKeys.deleted]) {
        this.deletedList.push(_list[i]);
        _list[i][keys.hidden] = true;
      } else if (_list[i][this.config.columnKeys.selected]) {
        this.selectedDataIndexs.push(i);
      }

      _list[i]["__index"] = lineNumber;
      dataRealRowCount++;
      lineNumber++;
    }
  }

  this.listIndexMap = listIndexMap;
  this.xvar.dataRealRowCount = dataRealRowCount;

  return _list;
};

const set = function (data) {
  let list;
  if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isArray(data)) {
    this.page = null;
    list = data;
  } else if ("page" in data) {
    this.page = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, data.page);
    list = data.list;
  }

  // console.log(this.list.length);

  if (this.config.tree.use) {
    this.list = arrangeData4tree.call(this, list);
    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));
  } else {
    this.proxyList = null;
    this.list = initData.call(this, !this.config.remoteSort && Object.keys(this.sortInfo).length ? sort.call(this, this.sortInfo, list) : list);
  }
  this.selectedDataIndexs = [];
  this.deletedList = [];

  this.needToPaintSum = true;
  this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;
  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);

  if (this.config.body.grouping) {}
  return this;
};

const get = function () {
  return {
    list: this.list,
    page: this.page
  };
};

const getList = function (_type) {
  let returnList = [];
  //let list = (this.proxyList) ? this.proxyList : this.list;
  let list = this.list;
  let i = 0,
      l = list.length;
  switch (_type) {
    case "modified":
      for (; i < l; i++) {
        if (list[i] && !list[i]["__isGrouping"] && list[i][this.config.columnKeys.modified]) {
          returnList.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, list[i]));
        }
      }
      break;
    case "selected":
      for (; i < l; i++) {
        if (list[i] && !list[i]["__isGrouping"] && list[i][this.config.columnKeys.selected]) {
          returnList.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, list[i]));
        }
      }
      break;
    case "deleted":
      //_list = clearGroupingData(this.list);
      returnList = [].concat(this.deletedList);
      break;
    default:
      returnList = clearGroupingData.call(this, list);
  }
  return returnList;
};

const getProxyList = function (_list) {
  let i = 0,
      l = _list.length,
      returnList = [];
  for (; i < l; i++) {

    if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {
      _list[i].__origin_index__ = i;
      returnList.push(_list[i]);
    }
  }
  return returnList;
};

const setValue = function (_dindex, _doindex, _key, _value) {
  let originalValue = getValue.call(this, _dindex, _doindex, _key);
  let list = this.list;
  let listIndex = typeof _doindex === "undefined" ? _dindex : _doindex;
  this.needToPaintSum = true;

  if (originalValue !== _value) {
    if (/[\.\[\]]/.test(_key)) {
      try {
        list[listIndex][this.config.columnKeys.modified] = true;
        Function("val", "this" + __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getRealPathForDataItem(_key) + " = val;").call(list[listIndex], _value);
      } catch (e) {}
    } else {
      list[listIndex][this.config.columnKeys.modified] = true;
      list[listIndex][_key] = _value;
    }

    if (this.onDataChanged) {
      this.onDataChanged.call({
        self: this,
        list: this.list,
        dindex: _dindex,
        doindex: _doindex,
        item: this.list[_dindex],
        key: _key,
        value: _value
      });
    }
  }

  return true;
};

const getValue = function (_dindex, _doindex, _key, _value) {
  let list = this.list;
  let listIndex = typeof _doindex === "undefined" ? _dindex : _doindex;

  if (/[\.\[\]]/.test(_key)) {
    try {
      _value = Function("", "return this" + __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getRealPathForDataItem(_key) + ";").call(list[listIndex]);
    } catch (e) {}
  } else {
    _value = list[listIndex][_key];
  }
  return _value;
};

const clearSelect = function () {
  this.selectedDataIndexs = [];
};

const select = function (_dindex, _doindex, _selected, _options) {
  let cfg = this.config;

  if (typeof _doindex === "undefined") _doindex = _dindex;

  if (!this.list[_doindex]) return false;
  if (this.list[_doindex].__isGrouping) return false;
  if (this.list[_doindex][cfg.columnKeys.disableSelection]) return false;

  if (typeof _selected === "undefined") {
    if (this.list[_doindex][cfg.columnKeys.selected] = !this.list[_doindex][cfg.columnKeys.selected]) {
      this.selectedDataIndexs.push(_doindex);
    } else {
      this.selectedDataIndexs.splice(__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].search(this.selectedDataIndexs, function () {
        return this == _doindex;
      }), 1);
    }
  } else {
    if (this.list[_doindex][cfg.columnKeys.selected] = _selected) {
      this.selectedDataIndexs.push(_doindex);
    } else {
      this.selectedDataIndexs.splice(__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].search(this.selectedDataIndexs, function () {
        return this == _doindex;
      }), 1);
    }
  }

  if (this.onDataChanged && _options && _options.internalCall) {
    this.onDataChanged.call({
      self: this,
      list: this.list,
      dindex: _dindex,
      doindex: _doindex,
      item: this.list[_doindex],
      key: cfg.columnKeys.selected,
      value: this.list[_doindex][cfg.columnKeys.selected]
    });
  }

  return this.list[_doindex][cfg.columnKeys.selected];
};

const selectAll = function (_selected, _options) {
  let cfg = this.config,
      dindex = this.list.length;

  this.selectedDataIndexs = [];

  if (typeof _selected === "undefined") {
    while (dindex--) {
      if (this.list[dindex].__isGrouping) continue;
      if (_options && _options.filter) {
        if (_options.filter.call(this.list[dindex]) !== true) {
          continue;
        }
      }
      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;

      if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {
        this.selectedDataIndexs.push(dindex);
      }
    }
  } else {
    while (dindex--) {
      if (this.list[dindex].__isGrouping) continue;
      if (_options && _options.filter) {
        if (_options.filter.call(this.list[dindex]) !== true) {
          continue;
        }
      }
      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;

      if (this.list[dindex][cfg.columnKeys.selected] = _selected) {
        this.selectedDataIndexs.push(dindex);
      }
    }
  }

  if (this.onDataChanged && _options && _options.internalCall) {
    this.onDataChanged.call({
      self: this,
      list: this.list
    });
  }

  return this.list;
};

const add = function (_row, _dindex, _options) {
  let list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;
  let processor = {
    "first"() {
      list = [].concat(_row).concat(list);
    },
    "last"() {
      list = list.concat([].concat(_row));
    }
  };

  if (this.config.tree.use) {
    let list = this.list.concat([].concat(_row));

    this.list = arrangeData4tree.call(this, list);
    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));
  } else {
    if (typeof _dindex === "undefined") _dindex = "last";
    if (_dindex in processor) {
      _row[this.config.columnKeys.modified] = true;
      processor[_dindex].call(this, _row);
    } else {
      if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNumber(_dindex)) {
        throw 'invalid argument _dindex';
      }
      if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isArray(_row)) {
        for (let _i = 0, _l = _row.length; _i < _l; _i++) {
          list.splice(_dindex + _i, 0, _row[_i]);
        }
      } else {
        list.splice(_dindex, 0, _row);
      }
    }

    if (this.config.body.grouping) {
      list = initData.call(this, sort.call(this, this.sortInfo, list));
    } else if (_options && _options.sort && Object.keys(this.sortInfo).length) {
      list = initData.call(this, sort.call(this, this.sortInfo, list));
    } else {
      list = initData.call(this, list);
    }

    this.list = list;
  }

  this.needToPaintSum = true;
  this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;
  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);
  return this;
};

const remove = function (_dindex) {
  let list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;
  let processor = {
    "first": function () {
      if (this.config.tree.use) {
        processor.tree.call(this, 0);
      } else {
        list.splice(0, 1);
      }
    },
    "last": function () {
      if (this.config.tree.use) {
        processor.tree.call(this, list.length - 1);
      } else {
        list.splice(list.length - 1, 1);
      }
    },
    "index": function (_dindex) {
      if (this.config.tree.use) {
        processor.tree.call(this, _dindex);
      } else {
        list.splice(_dindex, 1);
      }
    },
    "selected": function () {
      if (this.config.tree.use) {
        processor.tree.call(this, "selected");
      } else {
        let __list = [],
            i,
            l;

        for (i = 0, l = list.length; i < l; i++) {
          if (!list[i][this.config.columnKeys.selected]) {
            __list.push(list[i]);
          }
        }
        list = __list;
        __list = null;
        i = null;
      }
    },
    "tree": function (_dindex) {
      let treeKeys = this.config.tree.columnKeys,
          selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];
      list = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].filter(list, function () {
        return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;
      });
      treeKeys = null;
      selfHash = null;
    }
  };

  if (typeof _dindex === "undefined") _dindex = "last";
  if (_dindex in processor) {
    processor[_dindex].call(this, _dindex);
  } else {
    if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNumber(_dindex)) {
      throw 'invalid argument _dindex';
    }
    processor["index"].call(this, _dindex);
  }

  if (this.config.tree.use) {
    this.list = arrangeData4tree.call(this, list);
    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));
  } else {
    if (this.config.body.grouping) {
      list = initData.call(this, sort.call(this, this.sortInfo, list));
    } else if (Object.keys(this.sortInfo).length) {
      list = initData.call(this, sort.call(this, this.sortInfo, list));
    } else {
      list = initData.call(this, list);
    }
    this.list = list;
  }

  this.needToPaintSum = true;
  this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;
  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);
  return this;
};

const deleteRow = function (_dindex) {
  let list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;
  let processor = {
    "first": function () {
      if (this.config.tree.use) {
        processor.tree.call(this, 0);
      } else {
        list[0][this.config.columnKeys.deleted] = true;
      }
    },
    "last": function () {
      if (this.config.tree.use) {
        processor.tree.call(this, list.length - 1);
      } else {
        list[list.length - 1][this.config.columnKeys.deleted] = true;
      }
    },
    "selected": function () {
      if (this.config.tree.use) {
        processor.tree.call(this, "selected");
      } else {
        let i = list.length;
        while (i--) {
          if (list[i][this.config.columnKeys.selected]) {
            list[i][this.config.columnKeys.deleted] = true;
          }
        }
        i = null;
      }
    },
    "tree": function (_dindex) {
      let keys = this.config.columnKeys,
          treeKeys = this.config.tree.columnKeys;

      if (_dindex === "selected") {

        let i = list.length;
        while (i--) {
          if (list[i][this.config.columnKeys.selected]) {
            list[i][this.config.columnKeys.deleted] = true;

            let selfHash = list[i][treeKeys.selfHash];
            let ii = list.length;

            while (ii--) {
              if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {
                list[ii][keys.deleted] = true;
              }
            }

            selfHash = null;
            ii = null;
          }
        }
        i = null;
      } else {
        let selfHash = list[_dindex][treeKeys.selfHash];
        let i = list.length;
        while (i--) {
          if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {
            list[i][keys.deleted] = true;
          }
        }
        selfHash = null;
        i = null;
      }

      keys = null;
      treeKeys = null;
    }
  };

  if (typeof _dindex === "undefined") _dindex = "last";

  if (_dindex in processor) {
    processor[_dindex].call(this, _dindex);
  } else {
    if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNumber(_dindex)) {
      throw 'invalid argument _dindex';
    }
    list[_dindex][this.config.columnKeys.deleted] = true;
  }

  if (this.config.tree.use) {
    this.list = arrangeData4tree.call(this, list);
    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));
  } else {
    if (this.config.body.grouping) {
      list = initData.call(this, sort.call(this, this.sortInfo, list));
    } else if (Object.keys(this.sortInfo).length) {
      list = initData.call(this, sort.call(this, this.sortInfo, list));
    } else {
      list = initData.call(this, list);
    }

    this.list = list;
  }

  this.needToPaintSum = true;
  this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;
  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);
  return this;
};

const update = function (_row, _dindex) {
  if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNumber(_dindex)) {
    throw 'invalid argument _dindex';
  }
  //
  this.needToPaintSum = true;
  this.list.splice(_dindex, 1, _row);

  if (this.config.body.grouping) {
    this.list = initData.call(this, clearGroupingData.call(this, this.list));
  }
};

const updateChild = function (_dindex, _updateData, _options) {
  let keys = this.config.tree.columnKeys,
      selfHash,
      originIndex;

  if (typeof _dindex === "undefined") return false;
  originIndex = this.proxyList[_dindex].__origin_index__;

  if (this.list[originIndex][keys.children]) {
    this.proxyList = []; // 리셋 프록시

    if (_options && _options.filter) {
      if (_options.filter.call({ item: this.list[originIndex], dindex: originIndex }, this.list[originIndex])) {
        for (let _k in _updateData) {
          this.list[originIndex][_k] = _updateData[_k];
        }
      }
    } else {
      for (let _k in _updateData) {
        this.list[originIndex][_k] = _updateData[_k];
      }
    }

    selfHash = this.list[originIndex][keys.selfHash];

    let i = 0,
        l = this.list.length;
    for (; i < l; i++) {
      if (this.list[i]) {
        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {

          if (_options && _options.filter) {
            if (_options.filter.call({ item: this.list[i], dindex: i }, this.list[i])) {
              for (let _k in _updateData) {
                this.list[i][_k] = _updateData[_k];
              }
            }
          } else {
            for (let _k in _updateData) {
              this.list[i][_k] = _updateData[_k];
            }
          }
        }

        if (!this.list[i][keys.hidden]) {
          this.proxyList.push(this.list[i]);
        }
      }
    }

    return true;
  } else {
    return false;
  }
};

const sort = function (_sortInfo, _list, _options) {
  let self = this,
      list = _list || this.list,
      sortInfoArray = [],
      lineNumber = 0;
  let getKeyValue = function (_item, _key, _value) {
    if (/[\.\[\]]/.test(_key)) {
      try {
        _value = Function("", "return this" + __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getRealPathForDataItem(_key) + ";").call(_item);
      } catch (e) {}
    } else {
      _value = _item[_key];
    }
    return _value;
  };

  for (let k in _sortInfo) {
    sortInfoArray[_sortInfo[k].seq] = { key: k, order: _sortInfo[k].orderBy };
  }
  sortInfoArray = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].filter(sortInfoArray, function () {
    return typeof this !== "undefined";
  });

  // 정렬조건이 없으면 original_index값을 이용하여 정렬처리
  if (_options && _options.resetLineNumber && sortInfoArray.length === 0) {
    sortInfoArray[0] = { key: '__original_index', order: "asc" };
  }

  let i = 0,
      l = sortInfoArray.length,
      _a_val,
      _b_val;

  list.sort(function (_a, _b) {
    for (i = 0; i < l; i++) {
      _a_val = getKeyValue(_a, sortInfoArray[i].key);
      _b_val = getKeyValue(_b, sortInfoArray[i].key);

      if (typeof _a_val !== typeof _b_val) {
        _a_val = '' + _a_val;
        _b_val = '' + _b_val;
      }
      if (_a_val < _b_val) {
        return sortInfoArray[i].order === "asc" ? -1 : 1;
      } else if (_a_val > _b_val) {
        return sortInfoArray[i].order === "asc" ? 1 : -1;
      }
    }
  });

  if (_options && _options.resetLineNumber) {
    i = 0, l = list.length, lineNumber = 0;
    for (; i < l; i++) {
      if (_list[i] && !_list[i]["__isGrouping"]) {
        _list[i]["__index"] = lineNumber++;
      }
    }
  }

  if (_list) {
    return list;
  } else {
    this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;
    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
    __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);
    return this;
  }
};

const append = function (_list, _callback) {
  let self = this;

  if (this.config.tree.use) {
    let list = this.list.concat([].concat(_list));

    this.list = arrangeData4tree.call(this, list);
    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));
    list = null;
  } else {
    this.list = this.list.concat([].concat(_list));
  }

  this.appendProgress = true;
  __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].statusUpdate.call(this);

  if (this.appendDebouncer) {
    if (self.appendDebounceTimes < this.config.debounceTime / 10) {
      clearTimeout(this.appendDebouncer);
      self.appendDebounceTimes++;
    } else {
      self.appendDebounceTimes = 0;
      appendIdle.call(self);
      _callback();
      return false;
    }
  }

  this.appendDebouncer = setTimeout(function () {
    self.appendDebounceTimes = 0;
    appendIdle.call(self);
    _callback();
  }, this.config.debounceTime);

  // todo : append bounce animation
};

const appendIdle = function () {
  this.appendProgress = false;
  if (this.config.body.grouping) {
    this.list = initData.call(this, sort.call(this, this.sortInfo, this.list));
  } else {
    this.list = initData.call(this, this.list);
  }

  this.needToPaintSum = true;
  this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;
  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);
};

const toggleCollapse = function (_dindex, _doindx, _collapse) {
  let keys = this.config.tree.columnKeys,
      selfHash,
      originIndex;

  if (typeof _dindex === "undefined") return false;
  originIndex = this.proxyList[_dindex].__origin_index__;

  if (this.list[originIndex][keys.children]) {
    this.proxyList = []; // 리셋 프록시
    if (typeof _collapse == "undefined") {
      _collapse = !(this.list[originIndex][keys.collapse] || false);
    }

    this.list[originIndex][keys.collapse] = _collapse;
    selfHash = this.list[originIndex][keys.selfHash];

    let i = this.list.length;
    while (i--) {
      if (this.list[i]) {
        // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);
        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {
          this.list[i][keys.hidden] = _collapse;
        }

        if (!this.list[i][keys.hidden]) {
          this.proxyList.push(this.list[i]);
        }
      }
    }

    return true;
  } else {
    return false;
  }
};

/**
 * @module AX6UIGrid_data
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  init: function () {},
  /**
   * @param data
   * @return {module:AX6UIGrid_data}
   */
  set: set,
  /**
   * @return {*}
   */
  get: get,
  /**
   * @param {String} _type - modified|selected|deleted
   * @return {Array}
   */
  getList: getList,
  /**
   * @param {Array}
   * @return {Array}
   */
  getProxyList: getProxyList,
  /**
   *
   * @param _dindex
   * @param _doindex
   * @param _key
   * @param _value
   * @return {boolean}
   */
  setValue: setValue,
  /**
   *
   * @param _dindex
   * @param _doindex
   * @param _key
   * @param _value
   * @return {*}
   */
  getValue: getValue,
  /**
   *
   */
  clearSelect: clearSelect,
  /**
   *
   * @param _dindex
   * @param _doindex
   * @param _selected
   * @param _options
   * @return {boolean}
   */
  select: select,
  /**
   *
   * @param _selected
   * @param _options
   */
  selectAll: selectAll,
  /**
   *
   * @param _row
   * @param _dindex
   * @param _options
   * @return {add}
   */
  add: add,
  /**
   * list에서 완전 제거 하는 경우 사용.
   * @param _dindex
   * @return {remove}
   */
  remove: remove,
  /**
   * list에서 deleted 처리 repaint
   * @param _dindex
   * @return {deleteRow}
   */
  deleteRow: deleteRow,
  /**
   *
   * @param _row
   * @param _dindex
   */
  update: update,
  /**
   *
   * @param _dindex
   * @param _updateData
   * @param _options
   * @return {boolean}
   */
  updateChild: updateChild,
  /**
   *
   * @param _sortInfo
   * @param _list
   * @param _options
   * @return {*}
   */
  sort: sort,
  /**
   *
   * @param _list
   * @return {Array}
   */
  initData: initData,
  /**
   *
   * @param _list
   * @return {Array}
   */
  clearGroupingData: clearGroupingData,
  /**
   *
   * @param _list
   * @param _callback
   * @return {boolean}
   */
  append: append,
  /**
   *
   * @param _dindex
   * @param _doindx
   * @param _collapse
   * @return {boolean}
   */
  toggleCollapse: toggleCollapse
});

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Mustache__ = __webpack_require__(4);



const onclickPageMove = function (_act) {
  const callback = function (_pageNo) {
    if (this.page.currentPage != _pageNo) {
      this.page.selectPage = _pageNo;
      if (this.config.page.onChange) {
        this.config.page.onChange.call({
          self: this,
          page: this.page,
          data: this.data
        });
      }
    }
  };
  const processor = {
    "first": function () {
      callback.call(this, 0);
    },
    "prev": function () {
      let pageNo = this.page.currentPage - 1;
      if (pageNo < 0) pageNo = 0;
      callback.call(this, pageNo);
    },
    "next": function () {
      let pageNo = this.page.currentPage + 1;
      if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;
      callback.call(this, pageNo);
    },
    "last": function () {
      callback.call(this, this.page.totalPages - 1);
    }
  };

  if (_act in processor) {
    processor[_act].call(this);
  } else {
    callback.call(this, _act - 1);
  }
};

const navigationUpdate = function () {
  let self = this;
  if (this.page) {
    let page = {
      hasPage: false,
      currentPage: this.page.currentPage,
      pageSize: this.page.pageSize,
      totalElements: this.page.totalElements,
      totalPages: this.page.totalPages,
      firstIcon: this.config.page.firstIcon,
      prevIcon: this.config.page.prevIcon || "«",
      nextIcon: this.config.page.nextIcon || "»",
      lastIcon: this.config.page.lastIcon
    };
    let navigationItemCount = this.config.page.navigationItemCount;

    page["@paging"] = function () {
      let returns = [],
          startI,
          endI;

      startI = page.currentPage - Math.floor(navigationItemCount / 2);
      if (startI < 0) startI = 0;
      endI = page.currentPage + navigationItemCount;
      if (endI > page.totalPages) endI = page.totalPages;

      if (endI - startI > navigationItemCount) {
        endI = startI + navigationItemCount;
      }

      if (endI - startI < navigationItemCount) {
        startI = endI - navigationItemCount;
      }
      if (startI < 0) startI = 0;

      for (let p = startI, l = endI; p < l; p++) {
        returns.push({ 'pageNo': p + 1, 'selected': page.currentPage == p });
      }
      return returns;
    }();

    if (page["@paging"].length > 0) {
      page.hasPage = true;
    }

    this.$["page"]["navigation"].html(__WEBPACK_IMPORTED_MODULE_1__AX6Mustache__["a" /* default */].render(this.__tmpl.page_navigation.call(this), page));
    this.$["page"]["navigation"].find("[data-ax6grid-page-move]").on("click", function () {
      onclickPageMove.call(self, this.getAttribute("data-ax6grid-page-move"));
    });
  } else {
    this.$["page"]["navigation"].empty();
  }
};

const statusUpdate = function () {
  if (!this.config.page.statusDisplay) {
    return;
  }

  let toRowIndex,
      rangeCount = Math.min(this.xvar.dataRowCount, this.xvar.virtualPaintRowCount);
  let data = {};

  toRowIndex = this.xvar.virtualPaintStartRowIndex + rangeCount;

  if (toRowIndex > this.xvar.dataRowCount) {
    toRowIndex = this.xvar.dataRowCount;
  }

  data.fromRowIndex = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.xvar.virtualPaintStartRowIndex + 1, { "money": true });
  data.toRowIndex = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(toRowIndex, { "money": true });
  data.totalElements = false;
  data.dataRealRowCount = this.xvar.dataRowCount !== this.xvar.dataRealRowCount ? __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.xvar.dataRealRowCount, { "money": true }) : false;
  data.dataRowCount = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.xvar.dataRowCount, { "money": true });
  data.progress = this.appendProgress ? this.config.appendProgressIcon : "";

  if (this.page) {
    data.fromRowIndex_page = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.xvar.virtualPaintStartRowIndex + this.page.currentPage * this.page.pageSize + 1, { "money": true });
    data.toRowIndex_page = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.xvar.virtualPaintStartRowIndex + rangeCount + this.page.currentPage * this.page.pageSize, { "money": true });
    data.totalElements = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.page.totalElements, { "money": true });

    if (data.toRowIndex_page > this.page.totalElements) {
      data.toRowIndex_page = this.page.totalElements;
    }
  }

  this.$["page"]["status"].html(__WEBPACK_IMPORTED_MODULE_1__AX6Mustache__["a" /* default */].render(this.__tmpl.page_status.call(this), data));
};

/* harmony default export */ __webpack_exports__["a"] = ({
  navigationUpdate: navigationUpdate,
  statusUpdate: statusUpdate
});

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_body__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_data__ = __webpack_require__(8);






const columnResizerEvent = {
  "on": function (_columnResizer, _colIndex) {
    var self = this;
    var $columnResizer = $(_columnResizer);
    var columnResizerPositionLeft = $columnResizer.offset().left;
    var gridTargetOffsetLeft = self.$["container"]["root"].offset().left;
    self.xvar.columnResizerIndex = _colIndex;
    var resizeRange = {
      min: -self.colGroup[_colIndex]._width + 2,
      max: self.$["container"]["root"].width() - self.colGroup[_colIndex]._width
    };

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).on(__WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].ENM["mousemove"] + ".ax5grid-" + this.instanceId, function (e) {
      var mouseObj = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
      self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;

      if (resizeRange.min > self.xvar.__da) {
        self.xvar.__da = resizeRange.min;
      } else if (resizeRange.max < self.xvar.__da) {
        self.xvar.__da = resizeRange.max;
      }

      if (!self.xvar.columnResizerLived) {
        self.$["resizer"]["horizontal"].addClass("live");
      }
      self.xvar.columnResizerLived = true;
      self.$["resizer"]["horizontal"].css({
        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft
      });
    }).on(__WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].ENM["mouseup"] + ".ax5grid-" + this.instanceId, function (e) {
      columnResizerEvent.off.call(self);
      __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
    }).on("mouseleave.ax5grid-" + this.instanceId, function (e) {
      columnResizerEvent.off.call(self);
      __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
  },
  "off": function () {
    this.$["resizer"]["horizontal"].removeClass("live");
    this.xvar.columnResizerLived = false;

    if (typeof this.xvar.__da === "undefined") {} else {
      this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);
    }

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off(__WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].ENM["mousemove"] + ".ax5grid-" + this.instanceId).off(__WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].ENM["mouseup"] + ".ax5grid-" + this.instanceId).off("mouseleave.ax5grid-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');
  }
};

const init = function () {
  // 헤더 초기화
  const self = this;

  this.$["container"]["header"].on("click", '[data-ax6grid-column-attr]', function (e) {
    let key = this.getAttribute("data-ax6grid-column-key"),
        colIndex = this.getAttribute("data-ax6grid-column-colindex"),

    //rowIndex = this.getAttribute("data-ax6grid-column-rowindex"),
    col = self.colGroup[colIndex];

    if (key === "__checkbox_header__") {
      let selected = this.getAttribute("data-ax6grid-selected");
      selected = __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(selected) ? true : selected !== "true";

      $(this).attr("data-ax6grid-selected", selected);
      self.selectAll({ selected: selected });

      selected = null;
    } else {
      if (key && col && col.sortable !== false && !col.sortFixed) {
        if (col.sortable === true || self.config.sortable === true) {
          toggleSort.call(self, col.key);
        }
      }
    }

    __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_body__["a" /* default */].blur.call(self);

    key = null;
    colIndex = null;
    col = null;
  });
  this.$["container"]["header"].on("mousedown", '[data-ax6grid-column-resizer]', function (e) {
    let colIndex = this.getAttribute("data-ax6grid-column-resizer");

    self.xvar.mousePosition = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
    columnResizerEvent.on.call(self, this, Number(colIndex));
    __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);

    colIndex = null;
  }).on("dragstart", function (e) {
    __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
    return false;
  });

  resetFrozenColumn.call(this);
};

const resetFrozenColumn = function () {
  let cfg = this.config,
      dividedHeaderObj = __WEBPACK_IMPORTED_MODULE_2__AX6UIGrid_util__["a" /* default */].divideTableByFrozenColumnIndex(this.headerTable, this.xvar.frozenColumnIndex);

  this.asideHeaderData = function (dataTable) {
    let colGroup = [];
    let data = { rows: [] };
    for (let i = 0, l = dataTable.rows.length; i < l; i++) {
      data.rows[i] = { cols: [] };
      if (i === 0) {
        let col = {
          label: "",
          colspan: 1,
          rowspan: dataTable.rows.length,
          colIndex: null
        },
            _col = {};

        if (cfg.showLineNumber) {
          _col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col, {
            width: cfg.lineNumberColumnWidth,
            _width: cfg.lineNumberColumnWidth,
            columnAttr: "lineNumber",
            key: "__index_header__", label: "&nbsp;"
          });
          colGroup.push(_col);
          data.rows[i].cols.push(_col);
        }
        if (cfg.showRowSelector) {
          _col = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, col, {
            width: cfg.rowSelectorColumnWidth,
            _width: cfg.rowSelectorColumnWidth,
            columnAttr: "rowSelector",
            key: "__checkbox_header__", label: ""
          });
          colGroup.push(_col);
          data.rows[i].cols.push(_col);
        }

        col = null;
      }
    }

    this.asideColGroup = colGroup;
    return data;
  }.call(this, this.headerTable);

  this.leftHeaderData = dividedHeaderObj.leftData;
  this.headerData = dividedHeaderObj.rightData;
};

const getFieldValue = function (_col) {
  return _col.key === "__checkbox_header__" ? `<div class="checkBox" style="max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;"></div>` : _col.label || "&nbsp;";
};

const repaint = function (_reset) {
  let cfg = this.config,
      colGroup = this.colGroup;

  if (_reset) {
    resetFrozenColumn.call(this);
    this.xvar.paintStartRowIndex = undefined;
    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화
  }
  let asideHeaderData = this.asideHeaderData,
      leftHeaderData = this.leftHeaderData,
      headerData = this.headerData,
      headerAlign = cfg.header.align;

  // this.asideColGroup : asideHeaderData에서 처리 함.
  this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);
  this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);

  var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {
    let tableWidth = 0,
        SS = [];
    SS.push('<table border="0" cellpadding="0" cellspacing="0">');
    SS.push('<colgroup>');
    for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {
      SS.push('<col style="width:' + _colGroup[cgi]._width + 'px;"  />');
      tableWidth += _colGroup[cgi]._width;
    }
    SS.push('<col  />');
    SS.push('</colgroup>');

    for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {
      var trCSS_class = "";
      SS.push('<tr class="' + trCSS_class + '">');
      for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {
        var col = _bodyRow.rows[tri].cols[ci];
        var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;
        var colAlign = headerAlign || col.align;
        SS.push('<td ', 'data-ax6grid-column-attr="' + (col.columnAttr || "default") + '" ', 'data-ax6grid-column-row="' + tri + '" ', 'data-ax6grid-column-col="' + ci + '" ', function () {
          return typeof col.key !== "undefined" ? 'data-ax6grid-column-key="' + col.key + '" ' : '';
        }(), 'data-ax6grid-column-colindex="' + col.colIndex + '" ', 'data-ax6grid-column-rowindex="' + col.rowIndex + '" ', 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', 'class="' + function (_col) {
          var tdCSS_class = "";
          if (_col.headerStyleClass) {
            if (__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isFunction(_col.headerStyleClass)) {
              tdCSS_class += _col.headerStyleClass.call({
                column: _col,
                key: _col.key
              }) + " ";
            } else {
              tdCSS_class += _col.headerStyleClass + " ";
            }
          }
          if (cfg.header.columnBorderWidth) tdCSS_class += "hasBorder ";
          if (ci == cl - 1) tdCSS_class += "isLastColumn ";
          return tdCSS_class;
        }.call(this, col) + '" ', 'style="height: ' + cellHeight + 'px;min-height: 1px;">');

        SS.push(function () {
          var lineHeight = cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth;
          return '<span data-ax6grid-cellHolder="" ' + (colAlign ? 'data-ax6grid-text-align="' + colAlign + '"' : '') + ' style="height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;">';
        }(), function () {
          var _SS = "";

          if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(col.key) && !__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {
            _SS += '<span data-ax6grid-column-sort="' + col.colIndex + '" data-ax6grid-column-sort-order="' + (colGroup[col.colIndex].sort || "") + '" />';
          }
          return _SS;
        }(), getFieldValue.call(this, col), '</span>');

        if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(col.colIndex)) {
          if (cfg.enableFilter) {
            SS.push('<span data-ax6grid-column-filter="' + col.colIndex + '" data-ax6grid-column-filter-value=""  />');
          }
        }

        SS.push('</td>');
      }
      SS.push('<td ', 'data-ax6grid-column-row="null" ', 'data-ax6grid-column-col="null" ', 'style="height: ' + cfg.header.columnHeight + 'px;min-height: 1px;" ', '></td>');
      SS.push('</tr>');
    }
    SS.push('</table>');
    _elTarget.html(SS.join(''));

    /// append column-resizer
    (function () {
      let resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,
          resizerLeft = 0,
          AS = [];

      for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {
        var col = _colGroup[cgi];
        if (!__WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].isNothing(col.colIndex)) {
          //_colGroup[cgi]._width
          resizerLeft += col._width;
          AS.push('<div data-ax6grid-column-resizer="' + col.colIndex + '" style="height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;"  />');
        }
      }
      _elTarget.append(AS);
    }).call(this);

    return tableWidth;
  };

  if (cfg.asidePanelWidth > 0) {
    repaintHeader.call(this, this.$.panel["aside-header"], this.asideColGroup, asideHeaderData);
  }
  if (cfg.frozenColumnIndex > 0) {
    repaintHeader.call(this, this.$.panel["left-header"], this.leftHeaderColGroup, leftHeaderData);
  }
  this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel["header-scroll"], this.headerColGroup, headerData);

  if (cfg.rightSum) {}
};

const scrollTo = function (css) {
  this.$.panel["header-scroll"].css(css);
  return this;
};

const toggleSort = function (_key) {
  let sortOrder = "",
      sortInfo = {},
      seq = 0;

  for (var k in this.sortInfo) {
    if (this.sortInfo[k].fixed) {
      sortInfo[k] = this.sortInfo[k];
      seq++;
    }
  }

  for (var i = 0, l = this.colGroup.length; i < l; i++) {
    if (this.colGroup[i].key == _key) {
      if (sortOrder == "") {
        if (typeof this.colGroup[i].sort === "undefined") {
          sortOrder = "desc";
        } else if (this.colGroup[i].sort === "desc") {
          sortOrder = "asc";
        } else {
          sortOrder = undefined;
        }
      }
      this.colGroup[i].sort = sortOrder;
    } else if (!this.config.multiSort) {
      this.colGroup[i].sort = undefined;
    }

    if (typeof this.colGroup[i].sort !== "undefined") {
      if (!sortInfo[this.colGroup[i].key]) {
        sortInfo[this.colGroup[i].key] = {
          seq: seq++,
          orderBy: this.colGroup[i].sort
        };
      }
    }
  }

  this.setColumnSort(sortInfo);
  return this;
};

const applySortStatus = function (_sortInfo) {
  for (var i = 0, l = this.colGroup.length; i < l; i++) {
    for (var _key in _sortInfo) {
      if (this.colGroup[i].key == _key) {
        this.colGroup[i].sort = _sortInfo[_key].orderBy;
      }
    }
  }
  return this;
};

const select = function (_options) {
  __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_data__["a" /* default */].select.call(this, dindex, _options && _options.selected);
  __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_body__["a" /* default */].updateRowState.call(this, ["selected"], dindex);
};

const getExcelString = function () {
  let cfg = this.config,
      colGroup = this.colGroup,
      headerData = this.headerTable,
      getHeader = function (_colGroup, _bodyRow) {
    var SS = [];
    //SS.push('<table border="1">');
    for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {
      SS.push('<tr>');
      for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {
        var col = _bodyRow.rows[tri].cols[ci];
        SS.push('<td ', 'colspan="' + col.colspan + '" ', 'rowspan="' + col.rowspan + '" ', '>', getFieldValue.call(this, col), '</td>');
      }
      SS.push('</tr>');
    }
    //SS.push('</table>');

    return SS.join('');
  };

  return getHeader.call(this, colGroup, headerData);
};

/* harmony default export */ __webpack_exports__["a"] = ({
  init: init,
  repaint: repaint,
  scrollTo: scrollTo,
  toggleSort: toggleSort,
  applySortStatus: applySortStatus,
  getExcelString: getExcelString
});

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			memo[selector] = fn.call(this, selector);
		}

		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(36);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__ = __webpack_require__(18);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let formatter = {};

const setSelectionRange = function (input, pos) {
  if (typeof pos == "undefined") {
    pos = input.value.length;
  }
  if (input.setSelectionRange) {
    input.focus();
    input.setSelectionRange(pos, pos);
  } else if (input.createTextRange) {
    var range = input.createTextRange();
    range.collapse(true);
    range.moveEnd('character', pos);
    range.moveStart('character', pos);
    range.select();
  } else if (input.selectionStart) {
    input.focus();
    input.selectionStart = pos;
    input.selectionEnd = pos;
  }
};
const formatterEvent = {
  'focus': function (opts, optIdx, e) {
    if (!opts.$input.data("__originValue__")) opts.$input.data("__originValue__", opts.$input.val());
  },
  /* 키 다운 이벤트에서 입력할 수 없는 키 입력을 방어 */
  'keydown': function (opts, optIdx, e) {
    let isStop = false;
    if (!opts.enterableKeyCodes) {} else if (e.which && opts.enterableKeyCodes[e.which]) {} else if (!e.metaKey && !e.ctrlKey && !e.shiftKey) {
      //console.log(e.which, opts.enterableKeyCodes);
      isStop = true;
    }
    if (isStop) __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);
  },
  /* 키 업 이벤트에서 패턴을 적용 */
  'keyup': function (opts, optIdx, e) {
    let elem = opts.$input.get(0),
        elemFocusPosition,
        beforeValue,
        newValue,
        selection,
        selectionLength;

    if ('selectionStart' in elem) {
      // Standard-compliant browsers
      elemFocusPosition = elem.selectionStart;
    } else if (document.selection) {
      // IE
      //elem.focus();
      selection = document.selection.createRange();
      selectionLength = document.selection.createRange().text.length;
      selection.moveStart('character', -elem.value.length);
      elemFocusPosition = selection.text.length - selectionLength;
    }

    beforeValue = elem.value;
    if (opts.pattern in this.customFormatter) {
      newValue = this.customFormatter[opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value);
    } else if (opts.pattern in __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */]) {
      newValue = __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */][opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value);
    } else {
      newValue = beforeValue;
    }

    if (newValue != beforeValue) {
      opts.$input.val(newValue).trigger("change");
      setSelectionRange(elem, elemFocusPosition + newValue.length - beforeValue.length);
    }
  },
  'blur': function (opts, optIdx, e, _force) {
    let elem = opts.$input.get(0),
        beforeValue,
        newValue;

    opts.$input.removeData("__originValue__");

    beforeValue = elem.value;
    if (opts.pattern in this.customFormatter) {
      newValue = this.customFormatter[opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value, 'blur');
    } else if (opts.pattern in __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */]) {
      newValue = __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */][opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value, 'blur');
    } else {
      newValue = beforeValue;
    }

    if (_force) {
      opts.$input.val(newValue);
    } else {
      if (newValue != beforeValue) {
        opts.$input.val(newValue).trigger("change");
      }
    }
  }
};
const bindFormatterTarget = function (opts, optIdx) {
  if (!opts.pattern) {
    if (opts.$target.get(0).tagName == "INPUT") {
      opts.pattern = opts.$target.attr('data-ax6formatter');
    } else {
      opts.pattern = opts.$target.find('input[type="text"]').attr('data-ax6formatter');
    }
    if (!opts.pattern) {
      console.log(__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].getError("ax6formatter", "501", "bind"));
      console.log(opts.target);
      return this;
    }
  }

  let re = /[^\(^\))]+/gi,
      matched = opts.pattern.match(re);

  opts.pattern = matched[0];
  opts.patternArgument = matched[1] || "";

  // 함수타입
  if (opts.pattern in this.customFormatter) {
    opts.enterableKeyCodes = this.customFormatter[opts.pattern].getEnterableKeyCodes.call(this, opts, optIdx);
  } else if (opts.pattern in __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */]) {
    opts.enterableKeyCodes = __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */][opts.pattern].getEnterableKeyCodes.call(this, opts, optIdx);
  }

  opts.$input.off('focus.ax6formatter').on('focus.ax6formatter', formatterEvent.focus.bind(this, this.queue[optIdx], optIdx)).off('keydown.ax6formatter').on('keydown.ax6formatter', formatterEvent.keydown.bind(this, this.queue[optIdx], optIdx)).off('keyup.ax6formatter').on('keyup.ax6formatter', formatterEvent.keyup.bind(this, this.queue[optIdx], optIdx)).off('blur.ax6formatter').on('blur.ax6formatter', formatterEvent.blur.bind(this, this.queue[optIdx], optIdx));

  formatterEvent.blur.call(this, this.queue[optIdx], optIdx);

  return this;
};
const unbindFormatterTarget = function (opts, optIdx) {
  opts.$input.off('focus.ax6formatter').off('keydown.ax6formatter').off('keyup.ax6formatter').off('blur.ax6formatter');

  return this;
};
const getQueIdx = function (boundID) {
  if (!__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isString(boundID)) {
    boundID = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(boundID).data("data-formatter");
  }
  /*
   if (!U.isString(boundID)) {
   console.log(info.getError("ax6formatter", "402", "getQueIdx"));
   return;
   }
   */
  return __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].search(this.queue, function () {
    return this.id == boundID;
  });
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIFormatter extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */] {
  /**
   * @constructor
   * @param config
   * @param {Object} [config.formatter]
   * @example
   * ```js
   * var formatter = new Formatter();
   *
   * // Extend formatter
   * var myFormatter = new Formatter({
     *  formatter: {
     *      "mystyle": {
     *          getEnterableKeyCodes: function (_opts) {
     *              var enterableKeyCodes = {
     *                  '189': '-' // eventKeyCode
     *              };
     *              return jQuery.extend(enterableKeyCodes, {});
     *          }
     *          getPatternValue: function (_opts, optIdx, e, val, eType) {
     *              val = val.replace(/\D/g, "");
     *              var regExpPattern = /^([0-9]{2})\-?([0-9]{2})?\-?([0-9]{2})?\-?([0-9]{2})?/;
     *              return val.replace(regExpPattern, function (a, b) {
     *                  var nval = [arguments[1]];
     *                  if (arguments[2]) nval.push(arguments[2]);
     *                  if (arguments[3]) nval.push(arguments[3]);
     *                  if (arguments[4]) nval.push(arguments[4]);
     *                  return nval.join("-");
     *              });
     *          }
     *      }
     *  }
     * });
   * ```
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.animateTime=250]
     */
    this.config = {
      animateTime: 250
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * @member
     * @type {Array}
     */
    this.queue = [];
    this.openTimer = null;
    this.closeTimer = null;

    this.init();
  }

  /**
   * @method
   */
  init() {

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   * @return {AX6UIFormatter}
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @param {Object} opts
   * @param {Element} opts.target
   * @return {AX6UIFormatter}
   */
  bind(opts) {
    let formatterConfig = {},
        optIdx;

    // 사용자 포메터 체크
    this.customFormatter = AX6UIFormatter.getFormatter();

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, formatterConfig, this.config);
    if (opts) __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, formatterConfig, opts);
    opts = formatterConfig;

    if (!opts.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].getError("ax6formatter", "401", "bind"));
      return this;
    }
    opts.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(opts.target);
    if (!opts.$target.get(0)) {
      console.log(__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].getError("ax6formatter", "401", "can't found target element"));
      return this;
    }

    if (opts.$target.get(0).tagName == "INPUT") {
      opts.$input = opts.$target;
    } else {
      opts.$input = opts.$target.find('input[type="text"]');
      if (opts.$input.length > 1) {
        opts.$input.each(function () {
          opts.target = this;
          self.bind(opts);
        });
        return this;
      }
    }

    opts.$input = opts.$target.get(0).tagName == "INPUT" ? opts.$target : opts.$target.find('input[type="text"]');

    if (!opts.id) opts.id = opts.$input.data("ax6-formatter");

    if (!opts.id) {
      opts.id = 'ax6-formatter-' + __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */].getInstanceId();
      opts.$input.data("ax6-formatter", opts.id);
    }
    optIdx = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].search(this.queue, function () {
      return this.id == opts.id;
    });

    if (optIdx === -1) {
      this.queue.push(opts);
      bindFormatterTarget.call(this, this.queue[this.queue.length - 1], this.queue.length - 1);
    } else {
      this.queue[optIdx] = opts;
      bindFormatterTarget.call(this, this.queue[optIdx], optIdx);
    }

    return this;
  }

  /**
   * @method
   * @return {AX6UIFormatter}
   */
  formatting() {
    let queIdx = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);
    if (queIdx === -1) {
      let i = this.queue.length;
      while (i--) {
        formatterEvent.blur.call(this, this.queue[i], i, null, true);
      }
    } else {
      formatterEvent.blur.call(this, this.queue[queIdx], queIdx, null, true);
    }
    return this;
  }

  /**
   * @method
   * @param opts
   * @return {AX6UIFormatter}
   */
  unbind(opts) {
    let self = this;
    let optIdx;

    if (!opts.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].getError("ax6formatter", "401", "unbind"));
      return this;
    }
    opts.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(opts.target);

    if (opts.$target.get(0).tagName == "INPUT") {
      opts.$input = opts.$target;
    } else {
      opts.$input = opts.$target.find('input[type="text"]');
      if (opts.$input.length > 1) {
        opts.$input.each(function () {
          opts.target = this;
          self.unbind(opts);
        });
        return this;
      }
    }

    opts.$input = opts.$target.get(0).tagName == "INPUT" ? opts.$target : opts.$target.find('input[type="text"]');
    opts.id = opts.$input.data("ax6-formatter");

    if (opts.id) {
      optIdx = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].search(this.queue, function () {
        return this.id == opts.id;
      });

      unbindFormatterTarget.call(this, this.queue[optIdx]);
      this.queue.splice(optIdx, 1);
    }

    return this;
  }

  /**
   * @static
   * @param _formatter
   */
  static setFormatter(_formatter) {
    return formatter = Object.assign(formatter, _formatter);
  }

  /**
   * @static
   * @return {{}}
   */
  static getFormatter() {
    return formatter || {};
  }

  /**
   * @static
   * @return {{}}
   */
  static getCtrlKeys() {
    return __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */].ctrlKeys;
  }

  /**
   * @static
   * @return {{}}
   */
  static getNumKeys() {
    return __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter_AX6UIFormatter_formatter__["a" /* default */].numKeys;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIFormatter);

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

const frameTmpl = function (columnKeys) {
  return `
<div data-ax6ui-palette="">
<div data-ax6palette-container="root">
    <div data-ax6palette-container="colors"></div>
    <div data-ax6palette-container="controls"></div>
</div>
</div>
`;
};
const colorsTmpl = function (columnKeys) {
  return `
{{#colors}}
{{#list}}
<div data-ax6palette-color="{{label}}" data-ax6palette-color-index="{{@i}}">
    <div data-panel="color-preview" style="padding:{{preview.cellPadding}}px;width:{{preview.cellWidth}}px;">
        <div data-panel="color-box" style="width:{{preview.width}}px;height:{{preview.height}}px;"><div data-panel="color" style="background-color:{{value}};"></div></div>
    </div>
    <div data-panel="color-label" style="width:{{label.width}}px;">{{label}}</div>
    <div data-panel="color-slider">
        <div data-panel="color-track" style="height:{{slider.trackHeight}}px;background: linear-gradient(90deg, {{_color0value}}, {{_color1value}}, {{_color2value}}); ">
            <div data-panel="color-handle">
                <div data-panel="color-handle-after" style="width:{{slider.handleWidth}}px;height:{{slider.handleWidth}}px;left:{{slider.handleLeft}}px;top:{{slider.handleLeft}}px;"></div>
            </div>
        </div>
    </div>
</div>
{{/list}}
{{/colors}}
`;
};
const ENM = {
  "mousedown": __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch ? "touchstart" : "mousedown",
  "mousemove": __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch ? "touchmove" : "mousemove",
  "mouseup": __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch ? "touchend" : "mouseup"
};
const onStateChanged = function (opts, that) {
  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  that = null;
};
const getMousePosition = function (e) {
  let mouseObj,
      originalEvent = e.originalEvent ? e.originalEvent : e;
  mouseObj = 'changedTouches' in originalEvent && originalEvent.changedTouches ? originalEvent.changedTouches[0] : originalEvent;
  // clientX, Y 쓰면 스크롤에서 문제 발생
  return {
    clientX: mouseObj.pageX,
    clientY: mouseObj.pageY
  };
};
const bindHandle = function (item) {
  item.originalTrackWidth = item.$track.width();
  item.trackWidth = item.originalTrackWidth - this.config.colors.slider.handleWidth / 5;
  let handleLeft = amountToHandleLeft.call(this, item, item._amount);

  // handleLeft 가 범위를 벗어나면?
  if (handleLeft < 0 || handleLeft > item.trackWidth) {
    let amount;
    handleLeft = handleLeft < 0 ? 0 : handleLeft > item.trackWidth ? item.trackWidth : handleLeft;
    amount = handleLeftToAmount.call(this, item, handleLeft);
    updatePreviewColor.call(this, item, amountToColor.call(this, item, amount));
  }

  item.$handle.css({ left: handleLeft });
  item.$item.off(ENM["mousedown"]).on(ENM["mousedown"], '[data-panel="color-handle"]', e => {
    let mouseObj = getMousePosition(e);
    item._originalHandleClientX = mouseObj.clientX;
    item._originalHandleLeft = item.$handle.position().left;
    handleMoveEvent.on.call(this, item);
    __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e.originalEvent);
  }).off("click").on("click", '[data-panel="color-label"], [data-panel="color-preview"]', e => {
    if (this.onClick) {
      this.onClick.call(item, '#' + item._selectedColor.toUpperCase(), e);
    }
  }).on("click", '[data-panel="color-track"]', e => {
    if (e.target.getAttribute("data-panel") == "color-track") {
      let mouseObj = getMousePosition(e),
          newHandleLeft = mouseObj.clientX - item.$track.offset().left,
          amount = handleLeftToAmount(item, newHandleLeft);

      item.$handle.css({ left: newHandleLeft });
      updatePreviewColor.call(this, item, amountToColor.call(this, item, amount), e);

      mouseObj = null;
      newHandleLeft = null;
      amount = null;
    }
  });
};
const updatePreviewColor = function (item, color, event) {
  item.$preview.css({ "background-color": '#' + color });
  item.$label.html('#' + color.toUpperCase());
  item._selectedColor = color;

  if (event && this.onUpdateColor) {
    this.onUpdateColor.call(item, '#' + item._selectedColor.toUpperCase());
  }
};
const amountToColor = function (item, amount) {
  const processor = {
    "black"(_color, _amount) {
      return _color.lighten(this.config.colors.slider.amount / 2).darken(_amount).getHexValue();
    },
    "white"(_color, _amount) {
      return _color.darken(this.config.colors.slider.amount / 2).darken(_amount).getHexValue();
    },
    "normal"(_color, _amount) {
      return _color.darken(_amount).getHexValue();
    }
  };

  if (item._uniqColor in processor) {
    return processor[item._uniqColor].call(this, item._color, amount);
  } else {
    return processor["normal"].call(this, item._color, amount);
  }
};
const colorToAmount = function (item, color) {
  /// todo : 색상에 가까운 색 표현.
  const processor = {
    "black"(_color, _diffColor) {
      let color1 = _color.lighten(this.config.colors.slider.amount / 2);
      return (color1.getHsl().l - _diffColor.getHsl().l) * 100;
    },
    "white"(_color, _diffColor) {
      let color1 = _color.darken(this.config.colors.slider.amount / 2);
      return (color1.getHsl().l - _diffColor.getHsl().l) * 100;
    },
    "normal"(_color, _diffColor) {
      return (_color.getHsl().l - _diffColor.getHsl().l) * 100;
    }
  };

  if (item._uniqColor in processor) {
    return processor[item._uniqColor].call(this, item._color, color);
  } else {
    return processor["normal"].call(this, item._color, color);
  }
};
const handleLeftToAmount = function (item, handleLeft) {
  return this.config.colors.slider.amount * (handleLeft - item.trackWidth / 2) / (item.originalTrackWidth / 2);
};
const amountToHandleLeft = function (item, amount) {
  return amount * (item.originalTrackWidth / 2) / this.config.colors.slider.amount + item.trackWidth / 2;
};
const handleMoveEvent = {
  "on"(item) {
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).on(ENM["mousemove"] + ".ax6palette-" + this.instanceId, e => {
      let mouseObj = getMousePosition(e),
          da = mouseObj.clientX - item._originalHandleClientX,
          newHandleLeft = item._originalHandleLeft + da,
          amount;

      newHandleLeft = newHandleLeft < 0 ? 0 : newHandleLeft > item.trackWidth ? item.trackWidth : newHandleLeft;
      item.$handle.css({ left: newHandleLeft });
      amount = handleLeftToAmount.call(this, item, newHandleLeft);

      updatePreviewColor.call(this, item, amountToColor.call(this, item, amount), e);

      mouseObj = null;
      da = null;
    }).on(ENM["mouseup"] + ".ax6palette-" + this.instanceId, e => {
      handleMoveEvent.off.call(this);
      __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
    }).on("mouseleave.ax6palette-" + this.instanceId, e => {
      handleMoveEvent.off.call(this);
      __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
  },
  "off"() {
    this.xvar.resizerLived = false;

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off(ENM["mousemove"] + ".ax6palette-" + this.instanceId).off(ENM["mouseup"] + ".ax6palette-" + this.instanceId).off("mouseleave.ax6palette-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');
  }
};
const repaint = function (selectedColor) {
  let box = {
    width: this.$target.innerWidth(),
    height: this.$target.innerHeight()
  };

  // 패널 프레임 초기화
  this.$target.html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(frameTmpl.call(this), {}, this.config.columnKeys));

  // 각 패널들을 캐싱~
  this.$ = {
    "root": this.$target.find('[data-ax6palette-container="root"]'),
    "colors": this.$target.find('[data-ax6palette-container="colors"]'),
    "controls": this.$target.find('[data-ax6palette-container="controls"]')
  };

  // todo : controls 나중에 고민하여 구현
  // this.$["controls"].css({height: this.config.controls.height});

  /// colors.list 색상 범위 결정 / 초기화
  this.config.colors.list.forEach(c => {
    c._color = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].color(c.value);
    c._selectedColor = c._color.getHexValue();
    if (c._color.r == 0 && c._color.g == 0 && c._color.b == 0) {
      c._amount = this.config.colors.slider.amount;
      c._uniqColor = "black";
      c._color0value = "#" + c._color.lighten(this.config.colors.slider.amount).getHexValue();
      c._color1value = "#" + c._color.lighten(this.config.colors.slider.amount / 2).getHexValue();
      c._color2value = "#" + c._color.getHexValue();
    } else if (c._color.r == 255 && c._color.g == 255 && c._color.b == 255) {
      c._amount = -this.config.colors.slider.amount;
      c._uniqColor = "white";
      c._color0value = "#" + c._color.getHexValue();
      c._color1value = "#" + c._color.darken(this.config.colors.slider.amount / 2).getHexValue();
      c._color2value = "#" + c._color.darken(this.config.colors.slider.amount).getHexValue();
    } else {
      c._amount = 0;
      c._color0value = "#" + c._color.lighten(this.config.colors.slider.amount).getHexValue();
      c._color1value = "#" + c._color.getHexValue();
      c._color2value = "#" + c._color.darken(this.config.colors.slider.amount).getHexValue();
    }
  });

  // 색생조절 핸들의 위치 조정this.config.colors.list[minDiffColorIndex]
  this.config.colors.slider.handleLeft = -this.config.colors.slider.handleWidth / 2;
  this.config.colors.slider.handleTop = -this.config.colors.slider.handleHeight / 2;

  // 팔렛트 컬러 패널 초기화
  this.$["colors"].html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(colorsTmpl.call(this), this.config, this.config.columnKeys));

  this.$["colors"].find('[data-ax6palette-color-index]').each((elIdx, el) => {
    let idx = el.getAttribute("data-ax6palette-color-index");
    let color = this.config.colors.list[idx];
    let item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, color);
    item._index = idx;
    item.$item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(el);
    item.$preview = item.$item.find('[data-panel="color"]');
    item.$label = item.$item.find('[data-panel="color-label"]');
    item.$track = item.$item.find('[data-panel="color-track"]');
    item.$handle = item.$item.find('[data-panel="color-handle"]');
    bindHandle.call(this, item);
    /////
    this.colors.push(item);
  });

  if (selectedColor) {
    this.setSelectedColor(selectedColor);
  }
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIPalette extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */] {
  /**
   * @constructor
   * @param config
   * @param [config.theme]
   * @param config.target
   * @param [config.animateTime]
   * @param {String} [config.selectedColor]
   * @param {Object} [config.colors]
   * @param {Object} [config.colors.preview]
   * @param {Number} [config.colors.preview.width=24]
   * @param {Number} [config.colors.preview.height=24]
   * @param {Number} [config.colors.preview.cellWidth=30]
   * @param {Object} [config.colors.label]
   * @param {Number} [config.colors.label.width=80]
   * @param {Object} [config.colors.slider]
   * @param {Number} [config.colors.slider.trackHeight=8]
   * @param {Number} [config.colors.slider.amount=32]
   * @param {Number} [config.colors.slider.handleWidth=18]
   * @param {Number} [config.colors.slider.handleHeight=18]
   * @param {Object[]} [config.colors.list=[red,orange,yellow,green,blue,purple,black,white]]
   * @param {String} config.colors.list[].label
   * @param {String} config.colors.list[].value
   * @param {Object} [config.controls]
   * @param {Number} [config.controls.height=0]
   * @param [config.onStateChanged]
   * @param [config.onClick]
   * @param [config.onUpdateColor]
   * @example
   * ```js
   * myPalette = new Palette({
     *  target: $('[data-ax5palette="01"]'),
     *  onClick: function (hexColor) {
     *      alert(hexColor);
     *  }
     * });
   *
   * myPalette = new Palette({
     *  target: $('[data-ax5palette="01"]'),
     *  colors: {
     *      list: [
     *          {label: "red", value: "#ff0000"},
     *          {label: "orange", value: "#ff9802"},
     *          {label: "yellow", value: "#ffff00"},
     *          {label: "skyblue", value: "#84e4ff"},
     *          {label: "white", value: "#ffffff"}
     *      ]
     *  }
     *  onClick: function (hexColor) {
     *
     *  }
     * });
   * ```
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param config.target
     * @param [config.theme=default]
     * @param [config.clickEventName="click"]
     * @param [config.animateTime=100]
     * @param [config.colors]
     * @param [config.colors.preview]
     * @param [config.colors.preview.width=24]
     * @param [config.colors.preview,height=24]
     * @param [config.colors.preview.cellWidth=30]
     * @param [config.colors.label]
     * @param [config.colors.label.width=80]
     * @param [config.colors.slider]
     * @param [config.colors.slider.trackHeight=8]
     * @param [config.colors.slider.amount=32]
     * @param [config.colors.slider.handleWidth=18]
     * @param [config.colors.slider.handleHeight=18]
     * @param [config.colors.list]
     * @param [config.colors.list[].label]
     * @param [config.colors.list[].value]
     * @param [config.controls]
     * @param [config.controls.height=0]
     * @param [config.columnKeys={}]
     * @param [config.onStateChanged]
     * @param [config.onClick]
     */
    this.config = {
      clickEventName: "click",
      theme: 'default',
      animateTime: 100,
      colors: {
        preview: {
          width: 24,
          height: 24,
          cellWidth: 30
        },
        label: {
          width: 80
        },
        slider: {
          trackHeight: 8,
          amount: 32,
          handleWidth: 18,
          handleHeight: 18
        },
        list: [{ label: "red", value: "#ff0000" }, { label: "orange", value: "#ff9802" }, { label: "yellow", value: "#ffff00" }, { label: "green", value: "#00ff36" }, { label: "blue", value: "#0000ff" }, { label: "purple", value: "#ba00ff" },
        //{label: "skyblue", value: "#84e4ff"},
        //{label: "pink", value: "#ff77c4"},
        { label: "black", value: "#000000" }, { label: "white", value: "#ffffff" }]
      },
      controls: {
        height: 0
      },
      columnKeys: {}
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * @member {Object}
     */
    this.$target = null;
    /**
     * @member {Object}
     */
    this.xvar = {};
    /**
     * @member {Array}
     */
    this.colors = [];

    this.init();
  }

  /**
   * @method
   * @param config
   * @param [config.theme]
   * @param config.target
   * @param [config.animateTime]
   * @param {String} [config.selectedColor]
   * @param {Object} [config.colors]
   * @param {Object} [config.colors.preview]
   * @param {Number} [config.colors.preview.width=24]
   * @param {Number} [config.colors.preview.height=24]
   * @param {Number} [config.colors.preview.cellWidth=30]
   * @param {Object} [config.colors.label]
   * @param {Number} [config.colors.label.width=80]
   * @param {Object} [config.colors.slider]
   * @param {Number} [config.colors.slider.trackHeight=8]
   * @param {Number} [config.colors.slider.amount=32]
   * @param {Number} [config.colors.slider.handleWidth=18]
   * @param {Number} [config.colors.slider.handleHeight=18]
   * @param {Object[]} [config.colors.list=[red,orange,yellow,green,blue,purple,black,white]]
   * @param {String} config.colors.list[].label
   * @param {String} config.colors.list[].value
   * @param {Object} [config.controls]
   * @param {Number} [config.controls.height=0]
   * @param [config.onStateChanged]
   * @param [config.onClick]
   * @param [config.onUpdateColor]
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;
    this.onClick = this.config.onClick;
    delete this.config.onClick;
    this.onUpdateColor = this.config.onUpdateColor;
    delete this.config.onUpdateColor;

    if (!this.config.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6palette", "401", "setConfig"));
    }
    this.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.target);

    setTimeout(() => {
      repaint.call(this, (this.config.selectedColor || "").trim()); // 팔렛트 그리기.
    });

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @return {AX6UIPalette}
   */
  repaint() {
    repaint.call(this);
    return this;
  }

  /**
   * @method
   * @param selectedColor
   * @return {AX6UIPalette}
   */
  setSelectedColor(selectedColor) {
    let sColor = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].color(selectedColor.trim());
    // 지정된 색이 가장 가까운 파렛 검색
    let minDiffColor = 255 * 3,
        minDiffColorIndex = -1;

    this.colors.forEach(function (c, cidx) {
      let c1hsl = c._color.getHsl(),
          c2hsl = sColor.getHsl();
      let diffColor = Math.abs(c1hsl.h - c2hsl.h) + Math.abs(c1hsl.s - c2hsl.s) + Math.abs(c1hsl.l - c2hsl.l);
      if (diffColor < minDiffColor) {
        minDiffColor = diffColor;
        minDiffColorIndex = cidx;
      }
    });

    if (minDiffColorIndex > -1) {
      let amount,
          handleLeft,
          item = this.colors[minDiffColorIndex];

      item._amount = colorToAmount.call(this, item, sColor);
      handleLeft = amountToHandleLeft.call(this, item, item._amount);
      //handleLeft = handleLeft < 0 ? 0 : handleLeft > item.trackWidth ? item.trackWidth : handleLeft;
      item.$handle.css({ left: handleLeft });

      amount = handleLeftToAmount.call(this, item, handleLeft);
      updatePreviewColor.call(this, item, amountToColor.call(this, item, amount));
    }

    return this;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIPalette);

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let tmpl = {
  frame(columnKeys) {
    return `
<div data-ax6ui-calendar="" class="ax6-ui-calendar {{theme}}" data-calendar-els="root" onselectstart="return false;">
    {{#control}}
    <div class="calendar-control" data-calendar-els="control" style="{{controlCSS}}">
        <a class="date-move-left" data-calendar-move="left" style="{{controlButtonCSS}}">{{{left}}}</a>
        <div class="date-display" data-calendar-els="control-display" style="{{controlCSS}}"></div>
        <a class="date-move-right" data-calendar-move="right" style="{{controlButtonCSS}}">{{{right}}}</a>
    </div>
    {{/control}}
    <div class="calendar-body" data-calendar-els="body"></div>
</div>
`;
  },
  day(columnKeys) {
    return `
<table data-calendar-table="day" cellpadding="0" cellspacing="0" style="width:100%;">
    <thead>
        <tr>
        {{#weekNames}}
            <td class="calendar-col-{{col}}" style="height: {{colHeadHeight}}">
            {{label}}
            </td>
        {{/weekNames}}
        </tr>
    </thead>
    <tbody>
        <tr>
            {{#list}}    
            {{#isStartOfWeek}}
            {{^@first}}
        </tr>
        <tr>
            {{/@first}}
            {{/isStartOfWeek}}
            <td class="calendar-col-{{col}}" style="{{itemStyles}}">
                <a class="calendar-item-day {{addClass}}" data-calendar-item-date="{{thisDate}}">
                    <span class="addon addon-header"></span>
                    {{thisDataLabel}}
                    <span class="addon addon-footer"></span>
                </a>
            </td>
            {{/list}}
        </tr>
    </tbody>
</table>
`;
  },
  month(columnKeys) {
    return `
<table data-calendar-table="month" cellpadding="0" cellspacing="0" style="width:100%;">
    <thead>
        <tr>
            <td class="calendar-col-0" colspan="3" style="height: {{colHeadHeight}}">
            {{colHeadLabel}}
            </td>
        </tr>
    </thead>
    <tbody>
        <tr>
            {{#list}}    
            {{#isStartOfRow}}
            {{^@first}}
        </tr>
        <tr>
            {{/@first}}
            {{/isStartOfRow}}
            <td class="calendar-col-{{col}}" style="{{itemStyles}}">
                <a class="calendar-item-month {{addClass}}" data-calendar-item-month="{{thisMonth}}">
                    <span class="addon"></span>
                    {{thisMonthLabel}}
                    <span class="lunar"></span>
                </a>
            </td>
            {{/list}}
        </tr>
    </tbody>
</table>
`;
  },
  year(columnKeys) {
    return `
<table data-calendar-table="year" cellpadding="0" cellspacing="0" style="width:100%;">
    <thead>
        <tr>
            <td class="calendar-col-0" colspan="4" style="height: {{colHeadHeight}}">
            {{colHeadLabel}}
            </td>
        </tr>
    </thead>
    <tbody>
        <tr>
            {{#list}}    
            {{#isStartOfRow}}
            {{^@first}}
        </tr>
        <tr>
            {{/@first}}
            {{/isStartOfRow}}
            <td class="calendar-col-{{col}}" style="{{itemStyles}}">
                <a class="calendar-item-year {{addClass}}" data-calendar-item-year="{{thisYear}}">
                    <span class="addon"></span>
                    {{thisYearLabel}}
                    <span class="lunar"></span>
                </a>
            </td>
            {{/list}}
        </tr>
    </tbody>
</table>
`;
  }
};

const onStateChanged = function (opts, that) {
  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  that = null;
};
const getFrame = function () {
  let data = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, {
    controlCSS: {},
    controlButtonCSS: {}
  });

  data.controlButtonCSS["height"] = data.controlCSS["height"] = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.controlHeight);
  data.controlButtonCSS["line-height"] = data.controlCSS["line-height"] = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.controlHeight);
  data.controlButtonCSS["width"] = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.controlHeight);

  data.controlCSS = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].css(data.controlCSS);
  data.controlButtonCSS = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].css(data.controlButtonCSS);

  try {
    return __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.frame.call(this), data);
  } finally {
    data = null;
  }
};
const setDisplay = function () {
  let myDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate),
      yy = "",
      mm = "",
      yy1,
      yy2;

  if (this.config.control) {
    if (this.config.mode == "day" || this.config.mode == "d") {
      yy = this.config.control.yearTmpl ? this.config.control.yearTmpl.replace('%s', myDate.getFullYear()) : myDate.getFullYear();
      mm = this.config.control.monthTmpl ? this.config.control.monthTmpl.replace('%s', this.config.lang.months[myDate.getMonth()]) : this.config.lang.months[myDate.getMonth()];

      this.$["control-display"].html((() => {
        if (this.config.control.yearFirst) {
          return '<span data-calendar-display="year">' + yy + '</span>' + '<span data-calendar-display="month">' + mm + '</span>';
        } else {
          return '<span data-calendar-display="month">' + mm + '</span>' + '<span data-calendar-display="year">' + yy + '</span>';
        }
      })());
    } else if (this.config.mode == "month" || this.config.mode == "m") {
      yy = this.config.control.yearTmpl ? this.config.control.yearTmpl.replace('%s', myDate.getFullYear()) : myDate.getFullYear();
      this.$["control-display"].html('<span data-calendar-display="year">' + yy + '</span>');
    } else if (this.config.mode == "year" || this.config.mode == "y") {
      yy1 = this.config.control.yearTmpl ? this.config.control.yearTmpl.replace('%s', myDate.getFullYear() - 10) : myDate.getFullYear() - 10;
      yy2 = this.config.control.yearTmpl ? this.config.control.yearTmpl.replace('%s', Number(myDate.getFullYear()) + 9) : Number(myDate.getFullYear()) + 9;
      this.$["control-display"].html(yy1 + ' ~ ' + yy2);
    }

    this.$["control-display"].off(this.config.clickEventName).on(this.config.clickEventName, '[data-calendar-display]', function (e) {
      let target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
        if (target.getAttribute("data-calendar-display")) {
          return true;
        }
      }),
          mode;
      if (target) {
        mode = target.getAttribute("data-calendar-display");
        this.changeMode(mode);
      }
      target = null;
      mode = null;
    }.bind(this));
  }

  myDate = null;
  yy = null;
  mm = null;
  yy1 = null;
  yy2 = null;
  return this;
};
const printDay = function (nowDate) {
  let dotDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(nowDate),
      monthStratDate = new Date(dotDate.getFullYear(), dotDate.getMonth(), 1, 12),
      _today = this.config.displayDate,
      tableStartDate = (() => {
    let day = monthStratDate.getDay();
    if (day == 0) day = 7;
    day -= this.config.startOfWeek;

    try {
      return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(monthStratDate, { add: { d: -day } });
    } finally {
      day = null;
    }
  })(),
      loopDate,
      thisMonth = dotDate.getMonth(),
      itemStyles = {},
      i,
      k,
      _k,
      frameWidth = this.$["body"].width(),
      frameHeight = Math.floor(frameWidth * (6 / 7)),
      // 1week = 7days, 1month = 6weeks
  data;

  if (this.config.dimensions.height) {
    frameHeight = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.height) - __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.colHeadHeight);
  }

  itemStyles['height'] = Math.floor(frameHeight / 6) - __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.itemPadding) * 2 + 'px';
  itemStyles['line-height'] = itemStyles['height'];
  itemStyles['padding'] = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.itemPadding);

  data = {
    weekNames: [].concat(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].weekNames),
    list: []
  };

  if (this.config.startOfWeek) {
    data.weekNames = data.weekNames.concat(data.weekNames.slice(0, this.config.startOfWeek)).splice(this.config.startOfWeek);
  }

  data.weekNames.forEach(n => {
    n.colHeadHeight = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.colHeadHeight);
  });

  loopDate = tableStartDate;
  i = 0;
  while (i < 6) {
    k = 0;
    while (k < 7) {
      _k = (7 + (k - this.config.startOfWeek)) % 7;
      let thisDate = '' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(loopDate, { "return": this.config.dateFormat }),
          _date = {
        'row': i,
        'col': k,
        isStartOfWeek: k == 0,
        thisDate: '' + thisDate,
        thisDataLabel: this.config.lang.dayTmpl.replace('%s', loopDate.getDate()),
        itemStyles: __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].css(itemStyles),
        addClass: (() => {
          let classNames = "";

          if (this.config.selectable) {
            if (this.selectableMap[thisDate]) {
              classNames += loopDate.getMonth() == thisMonth ? " live" : "";
            } else {
              classNames += " disable";
            }
          } else {
            if (loopDate.getMonth() == thisMonth) {
              if (thisDate == __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(_today, { "return": "yyyyMMdd" })) {
                classNames += " focus";
              } else {
                classNames += " live";
              }

              if (loopDate.getDay() == 0) {
                classNames += " sunday";
              }
              if (loopDate.getDay() == 6) {
                classNames += " saturday";
              }
            }
          }

          return classNames;
        })() + ' ' + (() => {
          return this.markerMap[thisDate] ? this.markerMap[thisDate].theme || this.config.defaultMarkerTheme : '';
        })() + ' ' + (() => {
          return this.selectionMap[thisDate] ? "selected-day" : '';
        })()
      };
      data.list.push(_date);

      k++;
      loopDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(loopDate, { add: { d: 1 } });

      thisDate = null;
      _date = null;
    }
    i++;
  }

  this.$["body"].html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.day.call(this), data)).off(this.config.clickEventName).on(this.config.clickEventName, '[data-calendar-item-date]', e => {
    e = e || window.event;
    onclick.call(this, e, 'date');
    __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
  });

  this.printedDay = {
    start: tableStartDate, end: loopDate
  };

  onStateChanged.call(this, null, {
    self: this,
    action: "printDay",
    printedDay: this.printedDay
  });
  setDisplay.call(this);

  dotDate = null;
  monthStratDate = null;
  _today = null;
  tableStartDate = null;
  loopDate = null;
  thisMonth = null;
  itemStyles = null;
  i = null;
  k = null;
  frameWidth = null;
  frameHeight = null;
  data = null;
};
const printMonth = function (nowDate) {
  let dotDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(nowDate),
      nMonth = dotDate.getMonth(),
      itemStyles = {},
      i,
      k,
      m,
      tableStartMonth,
      frameWidth = this.$["body"].width(),
      frameHeight = Math.floor(frameWidth * (6 / 7)),
      data;

  if (this.config.dimensions.height) {
    frameHeight = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.height) - __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.colHeadHeight);
  }

  itemStyles['height'] = Math.floor(frameHeight / 4) - __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.itemPadding) * 2 + 'px';
  itemStyles['line-height'] = itemStyles['height'];
  itemStyles['padding'] = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.itemPadding);

  data = {
    colHeadHeight: __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.colHeadHeight),
    colHeadLabel: this.config.lang.monthHeading,
    list: []
  };

  tableStartMonth = 0;
  m = 0;
  i = 0;
  while (i < 4) {
    k = 0;
    while (k < 3) {
      let _month = {
        row: i,
        col: k,
        isStartOfRow: k == 0,
        thisMonth: dotDate.getFullYear() + '-' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].setDigit(m + 1, 2) + '-' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].setDigit(dotDate.getDate(), 2),
        thisMonthLabel: this.config.lang.months[m],
        itemStyles: __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].css(itemStyles),
        addClass: (() => {
          if (this.config.selectable) {
            return this.selectableMap[m] ? 'live' : 'disable';
          } else {
            return 'live';
          }
        })() + ' ' + (() => {
          return m == nMonth ? "focus" : "";
        })() + ' ' + (() => {
          return this.markerMap[m] ? this.markerMap[m].theme || this.config.defaultMarkerTheme : '';
        })()
      };
      data.list.push(_month);
      m++;
      k++;
      _month = null;
    }
    i++;
  }

  this.$["body"].html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.month.call(this), data)).off(this.config.clickEventName).on(this.config.clickEventName, '[data-calendar-item-month]', e => {
    e = e || window.event;
    onclick.call(this, e, 'month');
    __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
  });

  this.printedDay = {
    start: dotDate.getFullYear() + '-' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].setDigit(tableStartMonth + 1, 2),
    end: dotDate.getFullYear() + '-' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].setDigit(m, 2)
  };

  onStateChanged.call(this, null, {
    self: this,
    action: "printMonth",
    printedDay: this.printedDay
  });
  setDisplay.call(this);

  dotDate = null;
  nMonth = null;
  itemStyles = null;
  i = null;
  k = null;
  m = null;
  tableStartMonth = null;
  frameWidth = null;
  frameHeight = null;
  data = null;
};
const printYear = function (nowDate) {
  let dotDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(nowDate),
      nYear = dotDate.getFullYear(),
      itemStyles = {},
      i,
      k,
      y,
      tableStartYear,
      frameWidth = this.$["body"].width(),
      frameHeight = Math.floor(frameWidth * (6 / 7)),
      data;

  if (this.config.dimensions.height) {
    frameHeight = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.height) - __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.colHeadHeight);
  }

  itemStyles['height'] = Math.floor(frameHeight / 5) - __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.config.dimensions.itemPadding) * 2 + 'px';
  itemStyles['line-height'] = itemStyles['height'];
  itemStyles['padding'] = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.itemPadding);

  data = {
    colHeadHeight: __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(this.config.dimensions.colHeadHeight),
    colHeadLabel: this.config.lang.yearHeading,
    list: []
  };

  tableStartYear = nYear - 10;
  y = nYear - 10;
  i = 0;
  while (i < 5) {
    k = 0;
    while (k < 4) {
      let _year = {
        row: i,
        col: k,
        isStartOfRow: k == 0,
        thisYear: y + '-' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].setDigit(dotDate.getMonth() + 1, 2) + '-' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].setDigit(dotDate.getDate(), 2),
        thisYearLabel: this.config.lang.yearTmpl.replace('%s', y),
        itemStyles: __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].css(itemStyles),
        addClass: (() => {
          if (this.config.selectable) {
            return this.selectableMap[y] ? 'live' : 'disable';
          } else {
            return 'live';
          }
        })() + ' ' + (() => {
          return y == nYear ? "focus" : "";
        })() + ' ' + (() => {
          return this.selectableMap[y] ? this.selectableMap[y].theme || this.config.defaultMarkerTheme : '';
        })()
      };
      data.list.push(_year);
      y++;
      k++;
      _year = null;
    }
    i++;
  }

  this.$["body"].html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.year.call(this), data)).off(this.config.clickEventName).on(this.config.clickEventName, '[data-calendar-item-year]', e => {
    e = e || window.event;
    onclick.call(this, e, 'year');
    __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
  });

  this.printedDay = {
    start: tableStartYear, end: y - 1
  };

  onStateChanged.call(this, null, {
    self: this,
    action: "printYear",
    printedDay: this.printedDay
  });
  setDisplay.call(this);

  dotDate = null;
  nYear = null;
  itemStyles = null;
  i = null;
  k = null;
  y = null;
  tableStartYear = null;
  frameWidth = null;
  frameHeight = null;
  data = null;
};
const onclick = function (e, mode, target, value) {
  let removed, dt, selectable;

  mode = mode || "date";
  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-calendar-item-" + mode)) {
      return true;
    }
  });
  if (target) {
    value = target.getAttribute("data-calendar-item-" + mode);

    dt = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(value, { "return": this.config.dateFormat });
    selectable = true;
    this.selectableCount = this.config.multipleSelect ? __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(this.config.multipleSelect) ? this.config.multipleSelect : 2 : 1;

    if (this.config.selectable) {
      if (!this.selectableMap[dt]) selectable = false;
    }

    if (mode == "date") {
      if (selectable) {

        if (this.selection.length >= this.selectableCount) {
          removed = this.selection.splice(0, this.selection.length - (this.selectableCount - 1));
          removed.forEach(d => {
            this.$["body"].find('[data-calendar-item-date="' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": this.config.dateFormat }) + '"]').removeClass("selected-day");
          });
        }

        __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(target).addClass("selected-day");
        this.selection.push(value);

        if (this.onClick) {
          this.onClick.call({
            self: this, date: value, target: this.target, dateElement: target
          });
        }
      }
    } else if (mode == "month") {
      if (this.config.selectMode == "month") {
        if (selectable) {
          if (this.selection.length >= this.selectableCount) {
            removed = this.selection.splice(0, this.selection.length - (this.selectableCount - 1));
            removed.forEach(d => {
              this.$["body"].find('[data-calendar-item-month="' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": 'yyyy-MM-dd' }) + '"]').removeClass("selected-month");
            });
          }

          __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(target).addClass("selected-month");
          this.selection.push(value);

          if (this.onClick) {
            this.onClick.call({
              self: this, date: value, target: this.target, dateElement: target
            });
          }
        }
      } else {
        this.changeMode("day", value);
      }
    } else if (mode == "year") {
      if (this.config.selectMode == "year") {
        if (selectable) {
          if (this.selection.length >= this.selectableCount) {
            removed = this.selection.splice(0, this.selection.length - (this.selectableCount - 1));
            removed.forEach(d => {
              this.$["body"].find('[data-calendar-item-year="' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": 'yyyy-MM-dd' }) + '"]').removeClass("selected-year");
            });
          }

          __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(target).addClass("selected-year");
          this.selection.push(value);

          if (this.onClick) {
            this.onClick.call({
              self: this, date: value, target: this.target, dateElement: target
            });
          }
        }
      } else {
        this.changeMode("month", value);
      }
    }
  }

  mode = null;
  target = null;
  value = null;
  removed = null;
  dt = null;
  selectable = null;
};
const move = function (e, target, value) {
  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-calendar-move")) {
      return true;
    }
  });
  if (target) {
    value = target.getAttribute("data-calendar-move");
    if (this.config.mode == "day" || this.config.mode == "d") {
      if (value == "left") {
        this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate, { add: { m: -1 } });
      } else {
        this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate, { add: { m: 1 } });
      }
      printDay.call(this, this.config.displayDate);
    } else if (this.config.mode == "month" || this.config.mode == "m") {
      if (value == "left") {
        this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate, { add: { y: -1 } });
      } else {
        this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate, { add: { y: 1 } });
      }
      printMonth.call(this, this.config.displayDate);
    } else if (this.config.mode == "year" || this.config.mode == "y") {
      if (value == "left") {
        this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate, { add: { y: -10 } });
      } else {
        this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate, { add: { y: 10 } });
      }
      printYear.call(this, this.config.displayDate);
    }
  }

  target = null;
  value = null;
};
const applyMarkerMap = function () {
  setTimeout(function () {
    if (this.config.mode === "day" || this.config.mode === "d") {
      for (let k in this.markerMap) {
        this.$["body"].find('[data-calendar-item-date="' + k + '"]').addClass(this.markerMap[k].theme || this.config.defaultMarkerTheme);
      }
    }
  }.bind(this));
};
const applySelectionMap = function () {
  setTimeout(function () {
    for (let k in this.selectionMap) {
      this.$["body"].find('[data-calendar-item-date="' + k + '"]').addClass("selected-day");
    }
  }.bind(this));
};
const applyPeriodMap = function () {
  setTimeout(function () {
    if (this.config.mode === "day" || this.config.mode === "d") {
      for (let k in this.periodMap) {
        if (this.periodMap[k].label) {
          this.$["body"].find('[data-calendar-item-date="' + k + '"]').find(".addon-footer").html(this.periodMap[k].label);
        }
        this.$["body"].find('[data-calendar-item-date="' + k + '"]').addClass(this.periodMap[k].theme);
      }
    }
  }.bind(this));
};
const clearPeriodMap = function () {
  if (this.config.mode === "day" || this.config.mode === "d") {
    for (let k in this.periodMap) {
      this.$["body"].find('[data-calendar-item-date="' + k + '"]').find(".addon-footer").empty();
      this.$["body"].find('[data-calendar-item-date="' + k + '"]').removeClass(this.periodMap[k].theme);
    }
  }
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UICalendar extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */] {
  /**
   * @constructor
   * @param {object} config
   * @param {string} [config.theme = 'default']
   * @param {!(object|string)} [config.target]
   * @param {number} [config.animateTime = 100]
   * @param {function} [config.onStateChanged]
   * @param {function} [config.onClick]
   * @param [config.content]
   * @example
   * ```js
   * var myCalendar = new AX6UICalendar();
   * ```
   */
  constructor(config) {
    super();

    this.config = {
      clickEventName: "click",
      theme: 'default',
      startOfWeek: 0,
      mode: 'day', // day|month|year,
      dateFormat: 'yyyy-MM-dd',
      displayDate: new Date(),
      animateTime: 100,
      dimensions: {
        controlHeight: '40',
        controlButtonWidth: '40',
        colHeadHeight: '30',
        itemPadding: 2
      },
      lang: {
        yearHeading: "Choose the year",
        monthHeading: "Choose the month",
        yearTmpl: "%s",
        months: __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].months || ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],
        dayTmpl: "%s"
      },
      multipleSelect: false,
      selectMode: 'day',
      defaultMarkerTheme: 'holiday',
      defaultPeriodTheme: 'period'
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    this.$target = null;
    this.selection = [];
    this.selectionMap = {};
    this.selectableMap = {};
    this.markerMap = {};
    this.printedDay = {
      start: "", end: ""
    };
    this.selectableCount = 1;

    this.init();
  }

  /**
   * @method AX6UICalendar.init
   * @example
   * ```js
   * myCalendar.init();
   * ```
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;
    this.onClick = this.config.onClick;
    delete this.config.onClick;

    if (!this.config.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6calendar", "401", "setConfig"));
    }
    this.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.target);
    this.config.displayDate = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(this.config.displayDate);

    this.$target.html(getFrame.call(this));

    // 부속수집
    this.$ = {
      "root": this.$target.find('[data-calendar-els="root"]'),
      "control": this.$target.find('[data-calendar-els="control"]'),
      "control-display": this.$target.find('[data-calendar-els="control-display"]'),
      "body": this.$target.find('[data-calendar-els="body"]')
    };

    if (this.config.control) {
      this.$["root"].on(this.config.clickEventName, '[data-calendar-move]', e => {
        move.call(this, e || window.event);
      });
    }

    // collect selectableMap
    if (this.config.selection) {
      this.setSelection(this.config.selection, false);
    }
    // collect selectableMap
    if (this.config.selectable) {
      this.setSelectable(this.config.selectable, false);
    }
    // collect markerMap
    if (this.config.marker) {
      this.setMarker(this.config.marker, false);
    }

    setTimeout(function () {
      if (this.config.mode === "day" || this.config.mode === "d") {
        printDay.call(this, this.config.displayDate);
      } else if (this.config.mode === "month" || this.config.mode === "m") {
        printMonth.call(this, this.config.displayDate);
      } else if (this.config.mode === "year" || this.config.mode === "y") {
        printYear.call(this, this.config.displayDate);
      }
    }.bind(this));

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method AX6UICalendar.initOnce
   * @example
   * ```js
   * myCalendar.initOnce();
   * ```
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * Outputs to the screen in the output mode defined in the Calendar. If you pass an argument, you can change the output mode and output reference date.
   * 캘린더의 모드를 변경합니다.
   * @method AX6UICalendar.changeMode
   * @param {string} mode - day, d, month, m , year, y
   * @param {(Date|string)} [changeDate]
   * @return {AX6UICalendar}
   * @example
   * ```js
   * myCalendar.changeMode("y");
   * myCalendar.changeMode("year");
   * myCalendar.changeMode("month");
   * myCalendar.changeMode("m");
   * myCalendar.changeMode("day");
   * myCalendar.changeMode("d");
   * ```
   */
  changeMode(mode, changeDate) {
    if (typeof changeDate != "undefined") this.config.displayDate = changeDate;
    if (mode) this.config.mode = mode;

    this.$["body"].removeClass("fadein").addClass("fadeout");

    setTimeout(() => {
      if (this.config.mode == "day" || this.config.mode == "d") {
        printDay.call(this, this.config.displayDate);
      } else if (this.config.mode == "month" || this.config.mode == "m") {
        printMonth.call(this, this.config.displayDate);
      } else if (this.config.mode == "year" || this.config.mode == "y") {
        printYear.call(this, this.config.displayDate);
      }
      this.$["body"].removeClass("fadeout").addClass("fadein");
    }, this.config.animateTime);

    return this;
  }

  /**
   * Changes to state a date is selected, which is included in the selection.
   * 캘린더에 해당일자를 선택된 상태로 설정합니다.
   * @method AX6UICalendar.setSelection
   * @param {Array} selection
   * @param {boolean} [isPrint]
   * @return {AX6UICalendar}
   * @example
   * ```js
   * myCalendar.setSelection([new Date()]);
   * ```
   */
  setSelection(selection, isPrint) {
    this.selectionMap = {};
    let result = {};
    const processor = {
      'arr': function (v, map, count) {
        map = {};
        if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        this.selection = v = v.splice(0, count);
        v.forEach(n => {
          if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDate(n)) n = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n, { 'return': this.config.dateFormat });
          map[n] = true;
        });
        return map;
      }
    };

    this.selectableCount = this.config.multipleSelect ? __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(this.config.multipleSelect) ? this.config.multipleSelect : 2 : 1;

    if (this.config.selection = selection) {
      if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(selection)) {
        result = processor.arr.call(this, selection, {}, this.selectableCount);
      } else {
        return this;
      }
    }

    this.selectionMap = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, result);
    // 변경내용 적용하여 출력

    if (isPrint !== false) applySelectionMap.call(this);

    result = null;

    return this;
  }

  /**
   * 캘린더에서 선택된 일자를 반환합니다.
   * @method AX6UICalendar.getSelection
   * @return {Array}
   * @example
   * ```js
   * myCalendar.getSelection();
   * ```
   */
  getSelection() {
    return this.selection;
  }

  /**
   * Set the date / year / month that can be selected from the Calendar. selectable is, Array and Object({from: '', to: ''}) is made up of.
   * 캘린더에 해당일자를 선택할 수 있는 상태로 설정합니다.
   * @method AX6UICalendar.setSelectable
   * @param {Array} selectable
   * @param {boolean} [isPrint]
   * @return {AX6UICalendar}
   * @example
   * ```js
   * myCalendar.setSelectable(['2016-01-01', ...]);
   * myCalendar.setSelectable([new Date(), ...]);
   * myCalendar.setSelectable({ range: [{from: '2016-01-01', to: '2016-01-10'}] });
   * myCalendar.setSelectable({ range: [{from: new Date(), to: new Date()}] });
   * myCalendar.setSelectable({ '2016-01-01': true, '2016-01-02': true });
   * ```
   */
  setSelectable(selectable, isPrint) {
    this.selectableMap = {};
    let key,
        result = {};
    const processor = {
      'arr': function (v, map) {
        map = {};
        if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        v.forEach(n => {
          if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDate(n)) n = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n, { 'return': this.config.dateFormat });
          map[n] = true;
        });
        return map;
      },
      'obj': function (v, map) {
        map = {};
        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        if (v.range) return map;
        for (let k in v) {
          map[k] = v[k];
        }
        return map;
      },
      'range': function (v, map) {
        map = {};
        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        if (!v.range) return map;

        v.range.forEach(n => {
          if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDateFormat(n.from) && __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDateFormat(n.to)) {
            for (let d = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.from); d <= __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.to); d.setDate(d.getDate() + 1)) {
              map[__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": this.config.dateFormat })] = true;
            }
          } else {
            for (let i = n.from; i <= n.to; i++) {
              map[i] = true;
            }
          }
        });

        return map;
      }
    };

    if (this.config.selectable = selectable) {
      if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(selectable)) {
        result = processor.arr.call(this, selectable);
      } else {
        for (key in processor) {
          if (selectable[key]) {
            result = processor[key].call(this, selectable);
            break;
          }
        }
        if (Object.keys(result).length === 0) {
          result = processor.obj.call(this, selectable);
        }
      }
    }

    this.selectableMap = result;
    // 변경내용 적용하여 출력
    if (isPrint !== false) this.changeMode();

    return this;
  }

  /**
   * 캘린더에 휴일을 표시합니다.
   * @method AX6UICalendar.marker
   * @param {Object} marker
   * @param {boolean} [isApply]
   * @return {AX6UICalendar}
   * @example
   * ```js
   * myCalendar.setMarker({
     * '2016-02-07': {theme: 'holiday', label: '설날'},
     * '2016-02-08': {theme: 'holiday', label: '설날'},
     * '2016-02-09': {theme: 'holiday', label: '설날'},
     * '2016-02-10': {theme: 'holiday', label: '대체휴일'}
     *  });
   * ```
   */
  setMarker(marker, isApply) {
    this.markerMap = {};
    let key,
        result = {};
    const processor = {
      'obj': function (v, map) {
        map = {};
        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        if (v.range) return map;
        for (let k in v) {
          map[k] = v[k];
        }

        v = null;
        return map;
      },
      'range': function (v, map) {
        map = {};
        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        if (!v.range) return map;

        v.range.forEach(n => {
          if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDateFormat(n.from) && __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDateFormat(n.to)) {
            for (let d = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.from); d <= __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.to); d.setDate(d.getDate() + 1)) {
              map[__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": this.config.dateFormat })] = { theme: n.theme, label: n.label };
            }
          } else {
            for (let i = n.from; i <= n.to; i++) {
              map[i] = { theme: n.theme, label: n.label };
            }
          }
        });

        v = null;
        return map;
      }
    };

    if (this.config.marker = marker) {
      for (key in processor) {
        if (marker[key]) {
          result = processor[key].call(this, marker);
          break;
        }
      }
      if (Object.keys(result).length === 0) {
        result = processor.obj.call(this, marker);
      }
    }

    this.markerMap = result;
    // 변경내용 적용하여 출력
    if (isApply !== false) applyMarkerMap.call(this);
    return this;
  }

  /**
   * @method AX6UICalendar.setPeriod
   * @param {Object} period
   * @param {boolean} [isApply]
   * @return {AX6UICalendar}
   * @example
   * ```js
   * myCalendar.setPeriod({
     *  range: [
     *      {from: '2016-07-05', to: '2016-07-09', fromLabel: '시작', toLabel: '종료'},
     *      {from: '2016-07-11', to: '2016-07-15', fromLabel: '시작', toLabel: '종료'}
     *  ]
     * });
   * ```
   */
  setPeriod(period, isApply) {
    let key,
        result = {};
    const processor = {
      'range': function (v, map) {
        map = {};
        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(v)) return map;
        if (!v.range) return map;

        v.range.forEach(n => {
          if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDateFormat(n.from) && __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isDateFormat(n.to)) {
            for (let d = new Date(__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.from)); d <= __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.to); d.setDate(d.getDate() + 1)) {
              if (d.getTime() == __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.from).getTime()) {
                map[__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": this.config.dateFormat })] = {
                  theme: n.theme || this.config.defaultPeriodTheme,
                  label: n.fromLabel
                };
              } else if (d.getTime() == __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(n.to).getTime()) {
                map[__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": this.config.dateFormat })] = {
                  theme: n.theme || this.config.defaultPeriodTheme,
                  label: n.toLabel
                };
              } else {
                map[__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(d, { "return": this.config.dateFormat })] = { theme: n.theme || this.config.defaultPeriodTheme };
              }
            }
          }
        });

        v = null;
        return map;
      }
    };

    // 변경내용 적용하여 출력
    if (isApply !== false) {
      clearPeriodMap.call(this);
    }

    if (this.config.period = period) {
      result = processor.range.call(this, period);
    }

    this.periodMap = result;

    // 변경내용 적용하여 출력
    if (isApply !== false) {
      applyPeriodMap.call(this);
    }
    return this;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UICalendar);

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__ = __webpack_require__(6);







let moveout_timer = new Date().getTime();

const convertScrollPosition = {
  "vertical": function (css, _var) {
    let _content_height = _var._content_height - _var._panel_height,
        _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,
        top = _content_height * css.top / _scroller_height;

    if (top < 0) top = 0;else if (_content_height < top) {
      top = _content_height;
    }
    return {
      top: -top
    };
  },
  "horizontal": function (css, _var) {
    let _content_width = _var._content_width - _var._panel_width,
        _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,
        left = _content_width * css.left / _scroller_width;

    if (left < 0) left = 0;else if (_content_width < left) {
      left = _content_width;
    }
    return {
      left: -left
    };
  }
};

const convertScrollBarPosition = {
  "vertical": function (_top, _var) {

    let self = this,
        type = "vertical",
        _content_height = _var._content_height - _var._panel_height,
        _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,
        top = _scroller_height * _top / _content_height,
        scrollPositon;

    if (-top > _scroller_height) {
      top = -_scroller_height;

      scrollPositon = convertScrollPosition[type].call(this, { top: -top }, {
        _content_width: _var._content_width,
        _content_height: _var._content_height,
        _panel_width: _var._panel_width,
        _panel_height: _var._panel_height,
        _horizontal_scroller_width: _var._horizontal_scroller_width,
        _vertical_scroller_height: _var._vertical_scroller_height,
        verticalScrollBarHeight: _var.verticalScrollBarHeight,
        horizontalScrollBarWidth: _var.horizontalScrollBarWidth
      });

      __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, scrollPositon);
    }

    return -top;
  },
  "horizontal": function (_left, _var) {
    let self = this,
        type = "horizontal",
        _content_width = _var._content_width - _var._panel_width,
        _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,
        left = _scroller_width * _left / _content_width,
        scrollPositon;

    if (-left > _scroller_width) {
      left = -_scroller_width;
      scrollPositon = convertScrollPosition[type].call(this, { left: -left }, {
        _content_width: _var._content_width,
        _content_height: _var._content_height,
        _panel_width: _var._panel_width,
        _panel_height: _var._panel_height,
        _horizontal_scroller_width: _var._horizontal_scroller_width,
        _vertical_scroller_height: _var._vertical_scroller_height,
        verticalScrollBarHeight: _var.verticalScrollBarHeight,
        horizontalScrollBarWidth: _var.horizontalScrollBarWidth
      });

      __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__["a" /* default */].scrollTo.call(self, scrollPositon);
      __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, scrollPositon);
    }

    return -left;
  }
};

const scrollBarMover = {
  "click": function (track, bar, type, e) {

    // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.
    if (new Date().getTime() - moveout_timer < 20) {
      return false;
    }

    let self = this,
        trackOffset = track.offset(),
        barBox = {
      width: bar.outerWidth(), height: bar.outerHeight()
    },
        trackBox = {
      width: track.innerWidth(), height: track.innerHeight()
    },
        _vertical_scroller_height = self.$["scroller"]["vertical"].innerHeight(),
        _panel_height = self.$["panel"]["body"].height(),
        _horizontal_scroller_width = self.$["scroller"]["horizontal"].innerWidth(),
        _panel_width = self.$["panel"]["body"].width(),
        _content_height = self.xvar.scrollContentHeight,
        _content_width = self.xvar.scrollContentWidth,
        verticalScrollBarHeight = self.$["scroller"]["vertical-bar"].outerHeight(),
        horizontalScrollBarWidth = self.$["scroller"]["horizontal-bar"].outerWidth(),
        getScrollerPosition = {
      "vertical": function (e) {
        let mouseObj = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
        // track을 벗어 나지 안도록 범위 체크
        let newTop = mouseObj.clientY - trackOffset.top;
        if (newTop < 0) {
          newTop = 0;
        } else if (newTop + barBox.height > trackBox.height) {
          newTop = trackBox.height - barBox.height;
        }
        return { top: newTop };
      },
      "horizontal": function (e) {
        let mouseObj = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
        // track을 벗어 나지 안도록 범위 체크
        let newLeft = mouseObj.clientX - trackOffset.left;
        if (newLeft < 0) {
          newLeft = 0;
        } else if (newLeft + barBox.width > trackBox.width) {
          newLeft = trackBox.width - barBox.width;
        }
        return { left: newLeft };
      }
    },
        css = getScrollerPosition[type](e);

    bar.css(css);

    let scrollPositon = convertScrollPosition[type].call(self, css, {
      _content_width: _content_width,
      _content_height: _content_height,
      _panel_width: _panel_width,
      _panel_height: _panel_height,
      _horizontal_scroller_width: _horizontal_scroller_width,
      _vertical_scroller_height: _vertical_scroller_height,
      verticalScrollBarHeight: verticalScrollBarHeight,
      horizontalScrollBarWidth: horizontalScrollBarWidth
    });
    if (type === "horizontal") __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__["a" /* default */].scrollTo.call(self, scrollPositon);
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, scrollPositon);

    scrollPositon = null;
  },
  "on": function (track, bar, type, e) {
    let self = this,
        barOffset = bar.position(),
        barBox = {
      width: bar.outerWidth(), height: bar.outerHeight()
    },
        trackBox = {
      width: track.innerWidth(), height: track.innerHeight()
    },
        _vertical_scroller_height = self.$["scroller"]["vertical"].innerHeight(),
        _panel_height = self.$["panel"]["body"].height(),
        _horizontal_scroller_width = self.$["scroller"]["horizontal"].innerWidth(),
        _panel_width = self.$["panel"]["body"].width(),
        _content_height = self.xvar.scrollContentHeight,
        _content_width = self.xvar.scrollContentWidth,
        verticalScrollBarHeight = self.$["scroller"]["vertical-bar"].outerHeight(),
        horizontalScrollBarWidth = self.$["scroller"]["horizontal-bar"].outerWidth(),
        getScrollerPosition = {
      "vertical": function (e) {
        var mouseObj = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;
        // track을 벗어 나지 안도록 범위 체크
        var newTop = barOffset.top + self.xvar.__da;
        if (newTop < 0) {
          newTop = 0;
        } else if (newTop + barBox.height > trackBox.height) {
          newTop = trackBox.height - barBox.height;
        }
        return { top: newTop };
      },
      "horizontal": function (e) {
        var mouseObj = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;
        // track을 벗어 나지 안도록 범위 체크
        var newLeft = barOffset.left + self.xvar.__da;
        if (newLeft < 0) {
          newLeft = 0;
        } else if (newLeft + barBox.width > trackBox.width) {
          newLeft = trackBox.width - barBox.width;
        }
        return { left: newLeft };
      }
    };

    self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).on(__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].ENM["mousemove"] + ".ax6grid-" + this.instanceId, function (e) {
      let css = getScrollerPosition[type](e);
      bar.css(css);

      let scrollPositon = convertScrollPosition[type].call(self, css, {
        _content_width: _content_width,
        _content_height: _content_height,
        _panel_width: _panel_width,
        _panel_height: _panel_height,
        _horizontal_scroller_width: _horizontal_scroller_width,
        _vertical_scroller_height: _vertical_scroller_height,
        verticalScrollBarHeight: verticalScrollBarHeight,
        horizontalScrollBarWidth: horizontalScrollBarWidth
      });

      if (type === "horizontal") __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__["a" /* default */].scrollTo.call(self, scrollPositon);

      __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, scrollPositon);
    }).on(__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].ENM["mouseup"] + ".ax6grid-" + this.instanceId, function (e) {
      scrollBarMover.off.call(self);
    }).on("mouseleave.ax6grid-" + this.instanceId, function (e) {
      scrollBarMover.off.call(self);
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
  },
  "off": function () {
    moveout_timer = new Date().getTime();

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off(__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].ENM["mousemove"] + ".ax6grid-" + this.instanceId).off(__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].ENM["mouseup"] + ".ax6grid-" + this.instanceId).off("mouseleave.ax6grid-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');
  }
};

const scrollContentMover = {
  "wheel": function (delta) {
    let self = this,
        _body_scroll_position = self.$["panel"]["body-scroll"].position(),
        _panel_height = self.xvar.body_panel_height,
        _panel_width = self.xvar.body_panel_width,
        _content_height = self.xvar.scrollContentHeight,
        _content_width = self.xvar.scrollContentWidth;

    if (isNaN(_content_height) || isNaN(_content_width)) {
      return false;
    }

    let newLeft,
        newTop,
        _top_is_end = false,
        _left_is_end = false;

    newLeft = _body_scroll_position.left - delta.x;
    newTop = _body_scroll_position.top - delta.y;

    // newTop이 범위를 넘었는지 체크
    if (newTop >= 0) {
      newTop = 0;
      _top_is_end = true;
    } else if (newTop <= _panel_height - _content_height) {
      newTop = _panel_height - _content_height;
      if (newTop >= 0) newTop = 0;
      _top_is_end = true;
    } else {
      if (delta.y == 0) _top_is_end = true;
    }

    // newLeft이 범위를 넘었는지 체크
    if (newLeft >= 0) {
      newLeft = 0;
      _left_is_end = true;
    } else if (newLeft <= _panel_width - _content_width) {
      newLeft = _panel_width - _content_width;
      if (newLeft >= 0) newLeft = 0;
      _left_is_end = true;
    } else {
      if (delta.x == 0) _left_is_end = true;
    }

    __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__["a" /* default */].scrollTo.call(self, { left: newLeft });
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, { left: newLeft, top: newTop }, {
      callback: function () {
        resize.call(self);
      }
    });

    return !_top_is_end || !_left_is_end;
  },
  "on": function () {
    let self = this,
        _body_scroll_position = self.$["panel"]["body-scroll"].position(),
        _panel_height = self.xvar.body_panel_height,
        _panel_width = self.xvar.body_panel_width,
        _content_height = self.xvar.scrollContentHeight,
        _content_width = self.xvar.scrollContentWidth,
        getContentPosition = function (e) {
      let mouseObj = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e),
          newLeft,
          newTop;

      self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;
      self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;

      newLeft = _body_scroll_position.left + self.xvar.__x_da;
      newTop = _body_scroll_position.top + self.xvar.__y_da;

      // newTop이 범위를 넘었는지 체크
      if (newTop >= 0) {
        newTop = 0;
      } else if (newTop <= _panel_height - _content_height) {
        newTop = _panel_height - _content_height;
        if (newTop >= 0) newTop = 0;
      }

      // newLeft이 범위를 넘었는지 체크
      if (newLeft >= 0) {
        newLeft = 0;
      } else if (newLeft <= _panel_width - _content_width) {
        newLeft = _panel_width - _content_width;
        if (newLeft >= 0) newLeft = 0;
      }

      return {
        left: newLeft, top: newTop
      };
    };

    this.xvar.__x_da = 0; // 이동량 변수 초기화
    this.xvar.__y_da = 0; // 계산이 잘못 될까바
    this.xvar.touchmoved = false;

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).on("touchmove" + ".ax6grid-" + this.instanceId, function (e) {
      let css = getContentPosition(e);

      resize.call(self);
      __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__["a" /* default */].scrollTo.call(self, { left: css.left });
      __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, css, { noRepaint: "noRepaint" });
      __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e.originalEvent);
      self.xvar.touchmoved = true;
    }).on("touchend" + ".ax6grid-" + this.instanceId, function (e) {
      if (self.xvar.touchmoved) {
        let css = getContentPosition(e);

        resize.call(self);
        __WEBPACK_IMPORTED_MODULE_4__AX6UIGrid_header__["a" /* default */].scrollTo.call(self, { left: css.left });
        __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_body__["a" /* default */].scrollTo.call(self, css);
        __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e.originalEvent);
        scrollContentMover.off.call(self);
      }
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
  },
  "off": function () {

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off("touchmove" + ".ax6grid-" + this.instanceId).off("touchend" + ".ax6grid-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');
  }
};

const init = function () {
  let self = this,
      margin = this.config.scroller.trackPadding;

  if (margin == 0) {
    this.$["scroller"]["vertical-bar"].css({ width: this.config.scroller.size, left: -1 });
    this.$["scroller"]["horizontal-bar"].css({ height: this.config.scroller.size, top: -1 });
  } else {
    this.$["scroller"]["vertical-bar"].css({ width: this.config.scroller.size - (margin + 1), left: margin / 2 });
    this.$["scroller"]["horizontal-bar"].css({ height: this.config.scroller.size - (margin + 1), top: margin / 2 });
  }

  this.$["scroller"]["vertical-bar"].on(__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].ENM["mousedown"], function (e) {
    this.xvar.mousePosition = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
    scrollBarMover.on.call(this, this.$["scroller"]["vertical"], this.$["scroller"]["vertical-bar"], "vertical", e);
  }.bind(this)).on("dragstart", function (e) {
    __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
    return false;
  });

  this.$["scroller"]["vertical"].on("click", function (e) {
    if (e.target.getAttribute("data-ax6grid-scroller") == "vertical") {
      scrollBarMover.click.call(this, this.$["scroller"]["vertical"], this.$["scroller"]["vertical-bar"], "vertical", e);
    }
  }.bind(this));

  this.$["scroller"]["horizontal-bar"].on(__WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].ENM["mousedown"], function (e) {
    this.xvar.mousePosition = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
    scrollBarMover.on.call(this, this.$["scroller"]["horizontal"], this.$["scroller"]["horizontal-bar"], "horizontal", e);
  }.bind(this)).on("dragstart", function (e) {
    __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
    return false;
  });

  this.$["scroller"]["horizontal"].on("click", function (e) {
    if (e.target.getAttribute("data-ax6grid-scroller") == "horizontal") {
      scrollBarMover.click.call(this, this.$["scroller"]["horizontal"], this.$["scroller"]["horizontal-bar"], "horizontal", e);
    }
  }.bind(this));

  this.$["container"]["body"].on('mousewheel DOMMouseScroll', function (e) {
    let E = e.originalEvent,
        delta = { x: 0, y: 0 };

    if (E.detail) {
      delta.y = E.detail * 10;
    } else {
      if (typeof E.deltaY === "undefined") {
        delta.y = -E.wheelDelta;
        delta.x = 0;
      } else {
        delta.y = E.deltaY;
        delta.x = E.deltaX;
      }
    }

    if (scrollContentMover.wheel.call(this, delta)) {
      __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */].stopEvent(e);
    }
  }.bind(this));

  if (__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].supportTouch) {
    this.$["container"]["body"].on("touchstart", '[data-ax6grid-panel]', function (e) {
      self.xvar.mousePosition = __WEBPACK_IMPORTED_MODULE_3__AX6UIGrid_util__["a" /* default */].getMousePosition(e);
      scrollContentMover.on.call(self);
    });
  }

  this.xvar.body_panel_height = this.$["panel"]["body"].height();
  this.xvar.body_panel_width = this.$["panel"]["body"].width();
};

const resize = function () {
  let _vertical_scroller_height = this.$["scroller"]["vertical"].height(),
      _horizontal_scroller_width = this.$["scroller"]["horizontal"].width(),
      _panel_height = this.$["panel"]["body"].height(),
      _panel_width = this.$["panel"]["body"].width(),
      _content_height = this.xvar.scrollContentHeight,
      _content_width = this.xvar.scrollContentWidth,
      verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,
      horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;

  if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;
  if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;

  this.$["scroller"]["vertical-bar"].css({
    top: convertScrollBarPosition.vertical.call(this, this.$.panel["body-scroll"].position().top, {
      _content_width: _content_width,
      _content_height: _content_height,
      _panel_width: _panel_width,
      _panel_height: _panel_height,
      _horizontal_scroller_width: _horizontal_scroller_width,
      _vertical_scroller_height: _vertical_scroller_height,
      verticalScrollBarHeight: verticalScrollBarHeight,
      horizontalScrollBarWidth: horizontalScrollBarWidth
    }),
    height: verticalScrollBarHeight
  });

  this.$["scroller"]["horizontal-bar"].css({
    left: convertScrollBarPosition.horizontal.call(this, this.$.panel["body-scroll"].position().left, {
      _content_width: _content_width,
      _content_height: _content_height,
      _panel_width: _panel_width,
      _panel_height: _panel_height,
      _horizontal_scroller_width: _horizontal_scroller_width,
      _vertical_scroller_height: _vertical_scroller_height,
      verticalScrollBarHeight: verticalScrollBarHeight,
      horizontalScrollBarWidth: horizontalScrollBarWidth
    }),
    width: horizontalScrollBarWidth
  });

  this.xvar.body_panel_height = _panel_height;
  this.xvar.body_panel_width = _panel_width;

  _vertical_scroller_height = null;
  _horizontal_scroller_width = null;
  _panel_height = null;
  _panel_width = null;
  _content_height = null;
  _content_width = null;
  verticalScrollBarHeight = null;
  horizontalScrollBarWidth = null;
};

/* harmony default export */ __webpack_exports__["a"] = ({
  // 타이머
  moveout_timer: moveout_timer,
  init: init,
  resize: resize
});

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Mustache__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6UICore__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AX6UIMask__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__AX6UIPalette__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__AX6UIDialog__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__AX6UIPicker__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__AX6UICalendar__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__AX6UISelect__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__AX6UIMenu__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__AX6UIToast__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__AX6UIModal__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__AX6UIUploader__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__AX6UIAutocomplete__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__AX6UISideNav__ = __webpack_require__(33);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6Info", function() { return __WEBPACK_IMPORTED_MODULE_0__AX6Info__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6Util", function() { return __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UICore", function() { return __WEBPACK_IMPORTED_MODULE_3__AX6UICore__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6Mustache", function() { return __WEBPACK_IMPORTED_MODULE_2__AX6Mustache__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIFormatter", function() { return __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIMask", function() { return __WEBPACK_IMPORTED_MODULE_5__AX6UIMask__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIPalette", function() { return __WEBPACK_IMPORTED_MODULE_6__AX6UIPalette__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIDialog", function() { return __WEBPACK_IMPORTED_MODULE_7__AX6UIDialog__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIPicker", function() { return __WEBPACK_IMPORTED_MODULE_8__AX6UIPicker__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UICalendar", function() { return __WEBPACK_IMPORTED_MODULE_9__AX6UICalendar__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UISelect", function() { return __WEBPACK_IMPORTED_MODULE_10__AX6UISelect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIGrid", function() { return __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIMenu", function() { return __WEBPACK_IMPORTED_MODULE_12__AX6UIMenu__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIToast", function() { return __WEBPACK_IMPORTED_MODULE_13__AX6UIToast__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIModal", function() { return __WEBPACK_IMPORTED_MODULE_14__AX6UIModal__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIUploader", function() { return __WEBPACK_IMPORTED_MODULE_15__AX6UIUploader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UIAutocomplete", function() { return __WEBPACK_IMPORTED_MODULE_16__AX6UIAutocomplete__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AX6UISideNav", function() { return __WEBPACK_IMPORTED_MODULE_17__AX6UISideNav__["a"]; });



















/**
 * @module AX6UI
 */


/* harmony default export */ __webpack_exports__["default"] = ({
  AX6Info: __WEBPACK_IMPORTED_MODULE_0__AX6Info__["a" /* default */],
  AX6Util: __WEBPACK_IMPORTED_MODULE_1__AX6Util__["a" /* default */],
  AX6UICore: __WEBPACK_IMPORTED_MODULE_3__AX6UICore__["a" /* default */],
  AX6Mustache: __WEBPACK_IMPORTED_MODULE_2__AX6Mustache__["a" /* default */],
  AX6UIFormatter: __WEBPACK_IMPORTED_MODULE_4__AX6UIFormatter__["a" /* default */],
  AX6UIMask: __WEBPACK_IMPORTED_MODULE_5__AX6UIMask__["a" /* default */],
  AX6UIPalette: __WEBPACK_IMPORTED_MODULE_6__AX6UIPalette__["a" /* default */],
  AX6UIDialog: __WEBPACK_IMPORTED_MODULE_7__AX6UIDialog__["a" /* default */],
  AX6UIPicker: __WEBPACK_IMPORTED_MODULE_8__AX6UIPicker__["a" /* default */],
  AX6UICalendar: __WEBPACK_IMPORTED_MODULE_9__AX6UICalendar__["a" /* default */],
  AX6UISelect: __WEBPACK_IMPORTED_MODULE_10__AX6UISelect__["a" /* default */],
  AX6UIGrid: __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid__["a" /* default */],
  AX6UIMenu: __WEBPACK_IMPORTED_MODULE_12__AX6UIMenu__["a" /* default */],
  AX6UIToast: __WEBPACK_IMPORTED_MODULE_13__AX6UIToast__["a" /* default */],
  AX6UIModal: __WEBPACK_IMPORTED_MODULE_14__AX6UIModal__["a" /* default */],
  AX6UIUploader: __WEBPACK_IMPORTED_MODULE_15__AX6UIUploader__["a" /* default */],
  AX6UIAutocomplete: __WEBPACK_IMPORTED_MODULE_16__AX6UIAutocomplete__["a" /* default */],
  AX6UISideNav: __WEBPACK_IMPORTED_MODULE_17__AX6UISideNav__["a" /* default */]
});

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jqmin = __webpack_require__(1);

var _jqmin2 = _interopRequireDefault(_jqmin);

var _ax6ui = __webpack_require__(16);

__webpack_require__(34);

__webpack_require__(37);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $slide_out = void 0;
var $body = void 0;
var _module = void 0;
var currentModule = '';
var sideNav = void 0;

function loadModule(moduleName) {
  if (_module && _module.fn) _module.fn.moduleDestroy($body);
  _module = null;
  $body.empty();
  currentModule = moduleName;

  switch (moduleName) {
    case "AX6Util":
      __webpack_require__.e/* require.ensure */(14).then((function (n) {
        _module = __webpack_require__(44).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case "AX6UIMask":
      __webpack_require__.e/* require.ensure */(9).then((function (n) {
        _module = __webpack_require__(45).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case "AX6UIFormatter":
      __webpack_require__.e/* require.ensure */(15).then((function (n) {
        _module = __webpack_require__(46).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UICalendar':
      __webpack_require__.e/* require.ensure */(12).then((function (n) {
        _module = __webpack_require__(47).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIPicker':
      __webpack_require__.e/* require.ensure */(2).then((function (n) {
        _module = __webpack_require__(48).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIPalette':
      __webpack_require__.e/* require.ensure */(6).then((function (n) {
        _module = __webpack_require__(49).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIDialog':
      __webpack_require__.e/* require.ensure */(11).then((function (n) {
        _module = __webpack_require__(50).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIToast':
      __webpack_require__.e/* require.ensure */(4).then((function (n) {
        _module = __webpack_require__(51).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UISelect':
      __webpack_require__.e/* require.ensure */(5).then((function (n) {
        _module = __webpack_require__(52).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIAutocomplete':
      __webpack_require__.e/* require.ensure */(13).then((function (n) {
        _module = __webpack_require__(53).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIMenu':
      __webpack_require__.e/* require.ensure */(8).then((function (n) {
        _module = __webpack_require__(54).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIGrid':
      __webpack_require__.e/* require.ensure */(0).then((function (n) {
        _module = __webpack_require__(55).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIModal':
      __webpack_require__.e/* require.ensure */(7).then((function (n) {
        _module = __webpack_require__(56).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIUploader':
      __webpack_require__.e/* require.ensure */(1).then((function (n) {
        _module = __webpack_require__(57).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UITooltip':
      __webpack_require__.e/* require.ensure */(3).then((function (n) {
        _module = __webpack_require__(58).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;

    case 'AX6UIDocker':
      __webpack_require__.e/* require.ensure */(10).then((function (n) {
        _module = __webpack_require__(59).default;
        $body.html(_module.html);
        _module.fn.moduleRun($body);
      }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
      break;
  }
}

window.onpopstate = function (e) {
  var param = _ax6ui.AX6Util.param(document.location.search.replace("?", ""));
  if (typeof param.module !== 'undefined' && param.module != currentModule) {
    loadModule(param.module);
  }
};

(0, _jqmin2.default)(document).ready(function (e) {
  sideNav = new _ax6ui.AX6UISideNav({
    menu: {
      target: document.querySelector('[data-ax6ui-sidenav-menu]')
    },
    panel: {
      target: document.querySelector('[data-ax6ui-sidenav-panel]')
    }
  });

  $slide_out = (0, _jqmin2.default)('#slide-out');
  $body = (0, _jqmin2.default)("#sample-body");

  (0, _jqmin2.default)('[data-activates="slide-out"]').on('click', function () {
    sideNav.open();
  });

  (0, _jqmin2.default)('[data-href]').on("click", function (e) {
    sideNav.close();

    var moduleName = this.getAttribute("data-href");
    history.pushState(null, null, "?module=" + moduleName);
    loadModule(moduleName);
  });

  var param = _ax6ui.AX6Util.param(document.location.search.replace("?", ""));

  if (typeof param.module == 'undefined') {
    loadModule("AX6Util");
  } else if (param.module != currentModule) {
    loadModule(param.module);
  }
});

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AX6Util__ = __webpack_require__(0);


let TODAY = new Date();

/**
 * @module AX6UIFormatter_formatter
 */

let ctrlKeys = {
  "18": "KEY_ALT",
  "8": "KEY_BACKSPACE",
  "17": "KEY_CONTROL",
  "46": "KEY_DELETE",
  "40": "KEY_DOWN",
  "35": "KEY_END",
  "187": "KEY_EQUAL",
  "27": "KEY_ESC",
  "36": "KEY_HOME",
  "45": "KEY_INSERT",
  "37": "KEY_LEFT",
  "189": "KEY_MINUS",
  "34": "KEY_PAGEDOWN",
  "33": "KEY_PAGEUP",
  // "190": "KEY_PERIOD",
  "13": "KEY_RETURN",
  "39": "KEY_RIGHT",
  "16": "KEY_SHIFT",
  // "32": "KEY_SPACE",
  "9": "KEY_TAB",
  "38": "KEY_UP",
  "91": "KEY_WINDOW"
  //"107" : "NUMPAD_ADD",
  //"194" : "NUMPAD_COMMA",
  //"110" : "NUMPAD_DECIMAL",
  //"111" : "NUMPAD_DIVIDE",
  //"12" : "NUMPAD_EQUAL",
  //"106" : "NUMPAD_MULTIPLY",
  //"109" : "NUMPAD_SUBTRACT"
};

let numKeys = {
  '48': 1, '49': 1, '50': 1, '51': 1, '52': 1, '53': 1, '54': 1, '55': 1, '56': 1, '57': 1,
  '96': 1, '97': 1, '98': 1, '99': 1, '100': 1, '101': 1, '102': 1, '103': 1, '104': 1, '105': 1
};

let pattern_money = {
  getEnterableKeyCodes: function (_opts) {
    let enterableKeyCodes = {
      '188': ','
    };
    if (_opts.patternArgument == "int") {
      // 소수점 입력 안됨
    } else {
      enterableKeyCodes['190'] = "."; // 소수점 입력 허용
    }
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/[^0-9^\.^\-]/g, "");
    let regExpPattern = new RegExp('([0-9])([0-9][0-9][0-9][,.])'),
        arrNumber = val.split('.'),
        returnValue;

    arrNumber[0] += '.';

    do {
      arrNumber[0] = arrNumber[0].replace(regExpPattern, '$1,$2');
    } while (regExpPattern.test(arrNumber[0]));

    if (arrNumber.length > 1) {
      if (__WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].isNumber(_opts.maxRound)) {
        returnValue = arrNumber[0] + __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].left(arrNumber[1], _opts.maxRound);
      } else {
        returnValue = arrNumber.join('');
      }
    } else {
      returnValue = arrNumber[0].split('.')[0];
    }

    return returnValue;
  }
};

let pattern_number = {
  getEnterableKeyCodes: function getEnterableKeyCodes(_opts) {
    let enterableKeyCodes = {
      '190': '.',
      '110': '.'

    };
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/[^0-9^\.^\-]/g, "");
    let arrNumber = val.split('.'),
        returnValue;

    arrNumber[0] += ".";

    if (arrNumber.length > 1) {
      if (__WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].isNumber(_opts.maxRound)) {
        returnValue = arrNumber[0] + __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].left(arrNumber[1], _opts.maxRound);
      } else {
        returnValue = arrNumber.join('');
      }
    } else {
      returnValue = arrNumber[0].split('.')[0];
    }

    return returnValue;
  }
};

let pattern_date = {
  getEnterableKeyCodes: function (_opts) {
    let enterableKeyCodes = {
      '189': '-', '191': '/'
    };
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/\D/g, "");
    if (val == "") return val;
    let regExpPattern = /^([0-9]{4})\-?([0-9]{1,2})?\-?([0-9]{1,2})?.*$/;

    if (_opts.patternArgument == "time") {
      regExpPattern = /^([0-9]{4})\-?([0-9]{1,2})?\-?([0-9]{1,2})? ?([0-9]{1,2})?:?([0-9]{1,2})?:?([0-9]{1,2})?.*$/;
    } else if (_opts.patternArgument == "year") {
      regExpPattern = /^([0-9]{0,4})?.*$/;
    } else if (_opts.patternArgument == "month") {
      regExpPattern = /^([0-9]{4})\-?([0-9]{1,2})?.*$/;
    }

    let matchedPattern = val.match(regExpPattern),
        returnValue = "",
        inspectValue = function (val, format, inspect, data) {
      let _val = {
        'Y': function (v) {
          if (typeof v == "undefined") v = TODAY.getFullYear();
          if (v == '' || v == '0000') v = TODAY.getFullYear();
          return v.length < 4 ? __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].setDigit(v, 4) : v;
        },
        'M': function (v) {
          if (typeof v == "undefined") v = TODAY.getMonth() + 1;
          return v > 12 ? 12 : v == 0 ? '01' : __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].setDigit(v, 2);
        },
        'D': function (v) {
          if (typeof v == "undefined") v = TODAY.getDate() + 1;
          let dLen = __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].daysOfMonth(data[1], data[2] - 1);
          return v > dLen ? dLen : v == 0 ? '01' : __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].setDigit(v, 2);
        },
        'h': function (v) {
          if (!v) v = 0;
          return v > 23 ? 23 : __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].setDigit(v, 2);
        },
        'm': function (v) {
          if (!v) v = 0;
          return v > 59 ? 59 : __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].setDigit(v, 2);
        },
        's': function (v) {
          if (!v) v = 0;
          return v > 59 ? 59 : __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].setDigit(v, 2);
        }
      };
      return inspect ? _val[format](val) : val;
    };

    returnValue = val.replace(regExpPattern, function (a, b) {
      let nval = [];

      if (_opts.patternArgument == "year") {
        nval.push(inspectValue(arguments[1], "Y", eType));
      } else if (_opts.patternArgument == "month") {
        nval.push(inspectValue(arguments[1], "Y", eType));
        if (arguments[2] || eType) nval.push('-' + inspectValue(arguments[2], "M", eType));
      } else if (_opts.patternArgument == "time") {
        nval.push(inspectValue(arguments[1], "Y", eType));
        if (arguments[2] || eType) nval.push('-' + inspectValue(arguments[2], "M", eType));
        if (arguments[3] || eType) nval.push('-' + inspectValue(arguments[3], "D", eType, arguments));
        if (arguments[4] || eType) nval.push(' ' + inspectValue(arguments[4], "h", eType));
        if (arguments[5] || eType) nval.push(':' + inspectValue(arguments[5], "m", eType));
        if (arguments[6] || eType) nval.push(':' + inspectValue(arguments[6], "s", eType));
      } else {
        nval.push(inspectValue(arguments[1], "Y", eType));
        if (arguments[2] || eType) nval.push('-' + inspectValue(arguments[2], "M", eType));
        if (arguments[3] || eType) nval.push('-' + inspectValue(arguments[3], "D", eType, arguments));
      }
      return nval.join('');
    });

    if (eType == 'blur' && !matchedPattern) {
      returnValue = function () {
        let nval = [];

        if (_opts.patternArgument == "year") {
          nval.push(inspectValue(0, "Y", eType));
        } else if (_opts.patternArgument == "month") {
          nval.push(inspectValue(0, "Y", eType));
          nval.push('-' + inspectValue(0, "M", eType));
        } else if (_opts.patternArgument == "time") {
          nval.push(inspectValue(0, "Y", eType));
          nval.push('-' + inspectValue(0, "M", eType));
          nval.push('-' + inspectValue(0, "D", eType, arguments));
          nval.push(' ' + inspectValue(0, "h", eType));
          nval.push(':' + inspectValue(0, "m", eType));
          nval.push(':' + inspectValue(0, "s", eType));
        } else {
          nval.push(inspectValue(0, "Y", eType));
          nval.push('-' + inspectValue(0, "M", eType));
          nval.push('-' + inspectValue(0, "D", eType, arguments));
        }
        return nval.join('');
      }();
    } else if (!matchedPattern) returnValue = returnValue.length > 4 ? __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].left(returnValue, 4) : returnValue;

    return returnValue;
  }
};

let pattern_time = {
  getEnterableKeyCodes: function (_opts) {
    let enterableKeyCodes = {
      '186': ':'
    };
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/\D/g, "");
    let regExpPattern = /^([0-9]{1,2})?:?([0-9]{1,2})?:?([0-9]{1,2})?.*$/;

    let matchedPattern = val.match(regExpPattern),
        returnValue = val.replace(regExpPattern, function (a, b) {
      let nval = [arguments[1]];
      if (arguments[2]) nval.push(':' + arguments[2]);
      if (arguments[3]) nval.push(':' + arguments[3]);
      return nval.join('');
    });

    if (!matchedPattern) returnValue = returnValue.length > 2 ? __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].left(returnValue, 2) : returnValue;

    return returnValue;
  }
};

let pattern_bizno = {
  getEnterableKeyCodes: function (_opts) {
    let enterableKeyCodes = {
      '189': '-'
    };
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/\D/g, "");
    let regExpPattern = /^([0-9]{3})\-?([0-9]{1,2})?\-?([0-9]{1,5})?.*$/,
        returnValue = val.replace(regExpPattern, function (a, b) {
      let nval = [arguments[1]];
      if (arguments[2]) nval.push(arguments[2]);
      if (arguments[3]) nval.push(arguments[3]);
      return nval.join("-");
    });

    return returnValue;
  }
};

let pattern_phone = {
  getEnterableKeyCodes: function (_opts) {
    let enterableKeyCodes = {
      '189': '-', '188': ','
    };
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/\D/g, "");
    let regExpPattern3 = /^([0-9]{3})\-?([0-9]{1,4})?\-?([0-9]{1,4})?\-?([0-9]{1,4})?\-?([0-9]{1,4})?/;
    if (val.substr(0, 2) == "02") {
      regExpPattern3 = /^([0-9]{2})\-?([0-9]{1,4})?\-?([0-9]{1,4})?\-?([0-9]{1,4})?\-?([0-9]{1,4})?/;
    }

    let returnValue = val.replace(regExpPattern3, function (a, b) {
      let nval = [arguments[1]];
      if (arguments[2]) nval.push(arguments[2]);
      if (arguments[3]) nval.push(arguments[3]);
      if (arguments[4]) nval.push(arguments[4]);
      if (arguments[5]) nval.push(arguments[5]);
      return nval.join("-");
    });
    return returnValue;
  }
};

let pattern_credit = {
  getEnterableKeyCodes: function (_opts) {
    let enterableKeyCodes = {
      '189': '-'
    };
    return Object.assign(enterableKeyCodes, ctrlKeys, numKeys);
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    val = val.replace(/\D/g, "").substring(0, 16);

    let regExpPattern3 = /^([0-9]{4})\-?([0-9]{4})?\-?([0-9]{4})?\-?([0-9]{4})?/,
        returnValue = val.replace(regExpPattern3, function (a, b) {
      let nval = [arguments[1]];
      if (arguments[2]) nval.push(arguments[2]);
      if (arguments[3]) nval.push(arguments[3]);
      if (arguments[4]) nval.push(arguments[4]);
      return nval.join("-");
    });
    return returnValue;
  }
};

let pattern_custom = {
  getEnterableKeyCodes: function (_opts) {
    if (_opts.getEnterableKeyCodes) {
      return _opts.getEnterableKeyCodes.call(_opts, { $input: _opts.$input });
    } else {
      return null;
    }
  },
  getPatternValue: function (_opts, optIdx, e, val, eType) {
    if (_opts.getPatternValue) {
      return _opts.getPatternValue.call(_opts, { event: e, $input: _opts.$input, value: val });
    }
  }
};

/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   * 컨트롤 keycodes
   * @example
   * ```js
   * let ctrlKeys = {
    "18": "KEY_ALT",
    "8": "KEY_BACKSPACE",
    "17": "KEY_CONTROL",
    "46": "KEY_DELETE",
    "40": "KEY_DOWN",
    "35": "KEY_END",
    "187": "KEY_EQUAL",
    "27": "KEY_ESC",
    "36": "KEY_HOME",
    "45": "KEY_INSERT",
    "37": "KEY_LEFT",
    "189": "KEY_MINUS",
    "34": "KEY_PAGEDOWN",
    "33": "KEY_PAGEUP",
    "13": "KEY_RETURN",
    "39": "KEY_RIGHT",
    "16": "KEY_SHIFT",
    // "32": "KEY_SPACE",
    "9": "KEY_TAB",
    "38": "KEY_UP",
    "91": "KEY_WINDOW"
  };
   * ```
   */
  ctrlKeys: ctrlKeys,
  /**
   * 숫자키패드 keycodes
   * @example
   * ```js
   * let numKeys = {
    '48': 1, '49': 1, '50': 1, '51': 1, '52': 1, '53': 1, '54': 1, '55': 1, '56': 1, '57': 1,
    '96': 1, '97': 1, '98': 1, '99': 1, '100': 1, '101': 1, '102': 1, '103': 1, '104': 1, '105': 1
  };
   * ```
   */
  numKeys: numKeys,
  /**
   * 통화패턴
   */
  money: pattern_money,
  /**
   * 숫자패턴
   */
  number: pattern_number,
  /**
   * 날짜패턴
   */
  date: pattern_date,
  /**
   * 시간패턴
   */
  time: pattern_time,
  /**
   * 한국 사업자 번호 패턴
   */
  bizno: pattern_bizno,
  /**
   * 전화번호 패턴
   */
  phone: pattern_phone,
  credit: pattern_credit,
  /**
   * 사용자 정의 패턴 사용시
   */
  custom: pattern_custom
});

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Mustache_js__ = __webpack_require__(4);




/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

const getBodyTmpl = function (data, columnKeys) {
  const defaultMask = function (columnKeys) {
    return `
            <div data-ax6ui-mask="" class="{{theme}}" id="{{maskId}}">
                <div class="ax-mask-bg"></div>
                <div class="ax-mask-content">
                    <div class="ax-mask-body">
                    {{{body}}}
                    </div>
                </div>
            </div>
        `;
  };
  return __WEBPACK_IMPORTED_MODULE_3__AX6Mustache_js__["a" /* default */].render(defaultMask.call(this, columnKeys), data);
};
const onStateChanged = function (opts, that) {
  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  opts = null;
  that = null;
  return true;
};
const setBody = function (content) {
  this.maskContent = content;
};

/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIMask extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme]
     * @param [config.target=document.body]
     * @param [config.animateTime=250]
     * @param [config.onStateChanged]
     * @param [config.onClick]
     * @param [config.content]
     *
     */
    this.config = {
      theme: '',
      target: __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).get(0),
      animateTime: 250
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * @member {String}
     */
    this.maskContent = '';
    /**
     * @member {String}
     */
    this.status = "off";
    /**
     * @member {JSON}
     */
    this.activeConfig = {};

    if (typeof config !== "undefined") this.init();
  }

  /**
   * @method
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;
    this.onClick = this.config.onClick;
    delete this.config.onClick;

    setBody.call(this, this.config.content || "");

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @param options
   * @param {number} [options.zIndex] - 마스크 엘리먼트의 z-index 값을 정합니다
   * @return {AX6UIMask}
   * @example
   * ```js
   * let myMask = new Mask();
   * myMask.setConfig({
     *  zIndex: 1000
     * });
   *
   * myMask.open();
   * ```
   */
  open(options) {
    if (this.status === "on") this.close();
    setBody.call(this, options ? options.content || "" : "");

    let _cfg = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, options),
        target = _cfg.target,
        $target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(target),
        maskId = 'ax-mask-' + this.instanceId,
        $mask,
        css = {},
        that = {},
        templateName = _cfg.templateName,
        body = getBodyTmpl({
      theme: _cfg.theme,
      maskId: maskId,
      body: this.maskContent,
      templateName: templateName
    }).trim();

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(body);

    // 마스크의 타겟이 html body 가 아니라면
    if (target && target !== __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).get(0)) {
      css = {
        position: _cfg.position || "absolute",
        left: $target.offset().left,
        top: $target.offset().top,
        width: $target.outerWidth(),
        height: $target.outerHeight()
      };

      $target.addClass("ax-masking");

      // 마스크의 타겟이 html body가 아닌경우 window resize 이벤트를 추적하여 엘리먼트 마스크의 CSS 속성 변경
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6ui-mask-" + this.instanceId).on("resize.ax6ui-mask-" + this.instanceId, __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].throttle(function (e) {
        this.align();
      }, 100).bind(this));
    }

    if (typeof _cfg.zIndex !== "undefined") {
      css["z-index"] = _cfg.zIndex;
    }

    this.$mask = $mask = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()("#" + maskId);
    this.$target = $target;
    this.status = "on";
    $mask.css(css);

    if (this.onClick) {
      $mask.on("click", e => {
        that = {
          self: this,
          state: "open",
          type: "click"
        };
        this.onClick.call(that, that);
      });
    }

    onStateChanged.call(this, null, {
      self: this,
      state: "open"
    });

    // 현재 활성화된 설정 기억
    this.activeConfig = _cfg;

    options = null;
    _cfg = null;
    target = null;
    $target = null;
    maskId = null;
    $mask = null;
    css = null;
    that = null;
    templateName = null;
    body = null;

    return this;
  }

  /**
   * @method
   * @param delay
   * @return {AX6UIMask}
   */
  close(delay) {
    if (this.$mask) {

      let _close = function () {
        this.status = "off";
        this.$mask.remove();
        this.$target.removeClass("ax-masking");

        onStateChanged.call(this, null, {
          self: this,
          state: "close"
        });

        __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6ui-mask-" + this.instanceId);
      };

      if (delay) {
        setTimeout(function () {
          _close.call(this);
        }.bind(this), delay);
      } else {
        _close.call(this);
      }
    }
    return this;
  }

  /**
   * @method
   * @return {AX6UIMask}
   */
  fadeOut() {
    if (this.$mask) {
      let _close = function () {
        this.status = "off";
        this.$mask.remove();
        this.$target.removeClass("ax-masking");

        onStateChanged.call(this, null, {
          self: this,
          state: "close"
        });

        __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6ui-mask-" + this.instanceId);
      };

      this.$mask.addClass("fade-out");
      setTimeout(function () {
        _close.call(this);
      }.bind(this), this.activeConfig.animateTime);
    }
    return this;
  }

  /**
   * @method
   * @return {AX6UIMask}
   */
  align() {
    if (this.$mask && this.activeConfig && this.activeConfig.target && this.activeConfig.target !== __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).get(0)) {
      try {
        let css = {
          position: this.activeConfig.position || "absolute",
          left: this.$target.offset().left,
          top: this.$target.offset().top,
          width: this.$target.outerWidth(),
          height: this.$target.outerHeight()
        };
        this.$mask.css(css);
      } catch (e) {}
    }
    return this;
  }

  destory() {
    if (this.$mask) this.$mask.remove();
    if (this.$target) this.$target.removeClass("ax-masking");
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6ui-mask-" + this.instanceId);
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIMask);

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Info_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache_js__ = __webpack_require__(4);






/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

const dialogTmpl = function (columnKeys) {
  return ` 
<div id="{{dialogId}}" data-dialog-els="root" data-ax6ui-dialog="" class="{{theme}}">
    <div class="ax-dialog-header" data-dialog-els="header">
        {{{title}}}
    </div>
    <div class="ax-dialog-body" data-dialog-els="body">
        <div class="ax-dialog-msg">{{{msg}}}</div>
        
        {{#input}}
        <div class="ax-dialog-prompt">
            {{#@each}}
            <div class="form-group">
            {{#@value.label}}
            <label>{{#_crlf}}{{{.}}}{{/_crlf}}</label>
            {{/@value.label}}
            <input type="{{@value.type}}" placeholder="{{@value.placeholder}}" class="form-control {{@value.theme}}" data-dialog-prompt="{{@key}}" style="width:100%;" value="{{@value.value}}" />
            {{#@value.help}}
            <p class="help-block">{{#_crlf}}{{.}}{{/_crlf}}</p>
            {{/@value.help}}
            </div>
            {{/@each}}
        </div>
        {{/input}}
        
        <div class="ax-dialog-buttons" data-dialog-els="buttons">
            <div class="ax-button-wrap">
            {{#btns}}
                {{#@each}}
                <button type="button" data-dialog-btn="{{@key}}" class="btn btn-{{@value.theme}}">{{@value.label}}</button>
                {{/@each}}
            {{/btns}}
            </div>
        </div>
        
        {{#additionalContent}}
        <div data-dialog-els="additional-content">{{{.}}}</div>
        {{/additionalContent}}
    </div>
</div>  
`;
};
const onStateChanged = function (opts, that) {
  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  opts = null;
  that = null;
  return true;
};
const getContent = function (dialogId, opts) {
  let data = {
    dialogId: dialogId,
    title: opts.title || this.config.title || "",
    msg: (opts.msg || this.config.msg || "").replace(/\n/g, "<br/>"),
    input: opts.input,
    btns: opts.btns,
    '_crlf': function () {
      return this.replace(/\n/g, "<br/>");
    },
    additionalContent: function (additionalContent) {
      if (__WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].isFunction(additionalContent)) {
        return additionalContent.call(opts);
      } else {
        return additionalContent;
      }
    }(opts.additionalContent)
  };

  return __WEBPACK_IMPORTED_MODULE_4__AX6Mustache_js__["a" /* default */].render(dialogTmpl.call(this), data);
};
const open = function (opts, callback) {
  let pos = {},
      box = {
    width: opts.width
  };

  this.dialogConfig = opts;
  this.$activeDialog = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(getContent.call(this, opts.id, opts));
  this.$activeDialog.css({ width: box.width });
  __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$activeDialog);

  if (typeof callback === "undefined") {
    callback = opts.callback;
  }

  // dialog 높이 구하기 - 너비가 정해지면 높이가 변경 될 것.
  opts.height = box.height = this.$activeDialog.height();

  //- position 정렬
  if (typeof opts.position === "undefined" || opts.position === "center") {
    pos.top = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).height() / 2 - box.height / 2;
    pos.left = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width() / 2 - box.width / 2;
  } else {
    pos.left = opts.position.left || 0;
    pos.top = opts.position.top || 0;
  }
  if (this.config.zIndex) {
    pos["z-index"] = this.config.zIndex;
  }

  this.$activeDialog.css(pos).on(opts.clickEventName, "[data-dialog-btn]", e => {
    btnOnClick.call(this, e || window.event, opts, callback);
  }).find(opts.dialogType === "prompt" ? "[data-dialog-prompt]" : "[data-dialog-btn]").trigger("focus");

  // bind key event
  __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("keydown.ax6dialog", e => {
    onKeyup.call(this, e || window.event, opts, callback);
  }).on("resize.ax6dialog", __WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].throttle(function (e) {
    align.call(this, e || window.event);
  }, 30).bind(this));

  onStateChanged.call(this, opts, {
    self: this,
    state: "open"
  });

  if (opts.autoCloseTime) {
    this.autoCloseTimer = setTimeout(() => {
      this.close();
    }, opts.autoCloseTime);
  }

  pos = null;
  box = null;
};
const align = function (e) {
  if (!this.$activeDialog) return this;
  let opts = this.dialogConfig,
      box = {
    width: opts.width,
    height: opts.height
  };

  //- position 정렬
  if (typeof opts.position === "undefined" || opts.position === "center") {
    box.top = window.innerHeight / 2 - box.height / 2;
    box.left = window.innerWidth / 2 - box.width / 2;
  } else {
    box.left = opts.position.left || 0;
    box.top = opts.position.top || 0;
  }
  if (box.left < 0) box.left = 0;
  if (box.top < 0) box.top = 0;

  this.$activeDialog.css(box);

  opts = null;
  box = null;

  return this;
};
const btnOnClick = function (e, opts, callback, target, k) {
  let that,
      emptyKey = null;

  if (e.srcElement) e.target = e.srcElement;

  target = __WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-dialog-btn")) {
      return true;
    }
  });

  if (target) {
    k = target.getAttribute("data-dialog-btn");

    that = {
      self: this,
      key: k, value: opts.btns[k],
      dialogId: opts.id,
      btnTarget: target
    };
    if (opts.dialogType === "prompt") {
      that.input = {};
      for (let oi in opts.input) {
        that.input[oi] = this.$activeDialog.find('[data-dialog-prompt=' + oi + ']').val();
        if (opts.input[oi].required && (that.input[oi] == "" || that.input[oi] == null)) {
          emptyKey = oi;
          break;
        }
      }
    }
    if (opts.btns[k].onClick) {
      opts.btns[k].onClick.call(that, that);
    } else if (opts.dialogType === "alert") {
      if (callback) callback.call(that, that);
      this.close({ doNotCallback: true });
    } else if (opts.dialogType === "confirm") {
      if (callback) callback.call(that, that);
      this.close({ doNotCallback: true });
    } else if (opts.dialogType === "prompt") {
      if (k === 'ok') {
        if (emptyKey) {
          this.$activeDialog.find('[data-dialog-prompt="' + emptyKey + '"]').get(0).focus();
          return false;
        }
      }
      if (callback) callback.call(that, that);
      this.close({ doNotCallback: true });
    }
  }

  that = null;
  opts = null;
  callback = null;
  target = null;
  k = null;
};
const onKeyup = function (e, opts, callback, target, k) {
  let that,
      emptyKey = null;

  if (e.keyCode == __WEBPACK_IMPORTED_MODULE_3__AX6Info_js__["a" /* default */].eventKeys.ESC) {
    this.close();
  }
  if (opts.dialogType === "prompt") {
    if (e.keyCode == __WEBPACK_IMPORTED_MODULE_3__AX6Info_js__["a" /* default */].eventKeys.RETURN) {
      that = {
        self: this,
        key: k, value: opts.btns[k],
        dialogId: opts.id,
        btnTarget: target
      };
      that.input = {};

      for (let oi in opts.input) {
        that.input[oi] = this.$activeDialog.find('[data-dialog-prompt=' + oi + ']').val();
        if (opts.input[oi].required && (that.input[oi] == "" || that.input[oi] == null)) {
          emptyKey = oi;
          break;
        }
      }
      if (emptyKey) {
        that = null;
        emptyKey = null;
        return false;
      }
      if (callback) callback.call(that, that);
      this.close({ doNotCallback: true });
    }
  }

  that = null;
  emptyKey = null;
  opts = null;
  callback = null;
  target = null;
  k = null;
};

/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIDialog extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme='default']
     * @param [config.width=300]
     * @param [config.title='']
     * @param [config.msg='']
     * @param [config.lang]
     * @param [config.lang.ok='ok']
     * @param [config.lang.cancel='cancel']
     * @param [config.animateTime=150]
     * @param [config.autoCloseTime=0]
     * @param [config.onStateChanged]
     *
     */
    this.config = {
      id: 'ax6-dialog-' + this.instanceId,
      clickEventName: "click",
      theme: 'default',
      width: 300,
      title: 'AX6UIDialog',
      msg: '',
      lang: {
        "ok": "ok", "cancel": "cancel"
      },
      animateTime: 150,
      autoCloseTime: 0
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * dialog가 열려있는 상태에서 다시 open이 되면 queue에 보관 하였다가 close후 open
     * @member {Array}
     */
    this.queue = [];
    /**
     * @member {jQueryElement}
     */
    this.$activeDialog = null;
    /**
     * @member {Object}
     */
    this.autoCloseTimer = null;

    this.init();
  }

  /**
   * @method
   * @param config
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @param opts
   * @param callback
   * @param tryCount
   * @return {AX6UIDialog}
   * @example
   * ```js
   * import {Dialog} from "ax6ui"
   *
   * const dialog = new Dialog();
   * dialog.alert("Alert Message");
   * dialog.alert({
     *     title: "Title",
     *     msg: "Alert Message"
     * });
   * ```
   */
  alert(opts, callback, tryCount) {
    if (typeof opts === "undefined") {
      opts = {
        title: this.config.title,
        msg: ""
      };
    } else if (__WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].isString(opts)) {
      opts = {
        title: this.config.title,
        msg: opts
      };
    }

    opts = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, opts, {
      dialogType: "alert",
      callback: callback
    });

    if (typeof opts.btns === "undefined") {
      opts.btns = {
        ok: { label: opts.lang["ok"], theme: opts.theme }
      };
    }

    if (this.$activeDialog) {
      this.queue.push(opts);
    } else {
      open.call(this, opts, callback);
    }
  }

  /**
   * @method
   * @param opts
   * @param callback
   * @param tryCount
   * @return {AX6UIDialog}
   * @example
   * ```js
   * import {Dialog} from "ax6ui"
   *
   * const dialog = new Dialog();
   * dialog.confirm({
     *     title: "확인",
     *     msg: "확인 또는 취소를 누르세요"
     * }, function (res) {
     *     //console.log(this, a, b);
     *     if(res.key == "ok"){
     *         console.log("OK");
     *     }
     *     else if(res.key == "cancel"){
     *         console.log("CANCEL");
     *     }
     * });
   *
   * // btns custom
   * dialog.config({
     *  title: "예/아니오",
     *  msg: "당신은 개발자 입니까?",
     *  btns: {
     *      Y: {label: "예"},
     *      N: {label: "아니오"}
     *  }
     * }, function (res) {
     *      console.log(res);
     * });
   * ```
   */
  confirm(opts, callback, tryCount) {
    if (typeof opts === "undefined") {
      opts = {
        title: this.config.title,
        msg: ""
      };
    } else if (__WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].isString(opts)) {
      opts = {
        title: this.config.title,
        msg: opts
      };
    }

    opts = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, opts, {
      dialogType: "confirm",
      callback: callback
    });

    if (typeof opts.btns === "undefined") {
      opts.btns = {
        ok: { label: opts.lang["ok"], theme: opts.theme },
        cancel: { label: opts.lang["cancel"] }
      };
    }

    if (this.$activeDialog) {
      this.queue.push(opts);
    } else {
      open.call(this, opts, callback);
    }

    return this;
  }

  /**
   * @method
   * @param opts
   * @param callback
   * @param tryCount
   * @return {AX6UIDialog}
   * @example
   * ```js
   * import {Dialog} from "ax6ui"
   *
   * const dialog = new Dialog();
   *
   * dialog.prompt({
     *  title: "prompt",
     *  msg: '다음의 값을 입력하세요.',
     *  input: {
     *      data1: {label: "data1의 라벨", type: "password"},
     *      data2: {label: "data2의 라벨"}
     *  }
     * }, function(res){
     *      console.log(res);
     * });
   * ```
   */
  prompt(opts, callback, tryCount) {
    if (typeof opts === "undefined") {
      opts = {
        title: this.config.title,
        msg: ""
      };
    } else if (__WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].isString(opts)) {
      opts = {
        title: this.config.title,
        msg: opts
      };
    }

    opts = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, opts, {
      dialogType: "prompt",
      callback: callback
    });

    if (typeof opts.input === "undefined") {
      opts.input = {
        value: { label: "" }
      };
    }
    if (typeof opts.btns === "undefined") {
      opts.btns = {
        ok: { label: opts.lang["ok"], theme: opts.theme },
        cancel: { label: opts.lang["cancel"] }
      };
    }

    if (this.$activeDialog) {
      this.queue.push(opts);
    } else {
      open.call(this, opts, callback);
    }

    return this;
  }

  /**
   * @method
   * @param _option
   * @return {AX6UIDialog}
   * @example
   * ```js
   * dialog.close();
   * dialog.close({callback: function(){
     *
     * });
     * ```
     */
  close(_option) {
    let opts, that;

    if (this.$activeDialog) {
      if (this.autoCloseTimer) clearTimeout(this.autoCloseTimer);

      opts = this.dialogConfig;

      this.$activeDialog.addClass("destroy");
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("keydown.ax6dialog").off("resize.ax6dialog");

      setTimeout(function () {
        if (this.$activeDialog) {
          this.$activeDialog.remove();
          this.$activeDialog = null;
        }

        that = {
          self: this,
          state: "close",
          dialogId: opts.id
        };

        if (_option && __WEBPACK_IMPORTED_MODULE_2__AX6Util_js__["a" /* default */].isFunction(_option.callback)) {
          _option.callback.call(that, that);
        } else if (opts.callback && (!_option || !_option.doNotCallback)) {
          opts.callback.call(that, that);
        }

        if (opts && opts.onStateChanged) {
          opts.onStateChanged.call(that, that);
        } else if (this.onStateChanged) {
          this.onStateChanged.call(that, that);
        }

        // 열려야 할 큐가 남아 있다면 큐아이템으로 다시 open
        if (this.queue && this.queue.length) {
          open.call(this, this.queue.shift());
        }

        opts = null;
        that = null;
      }.bind(this), this.config.animateTime);
    }
    return this;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIDialog);

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AX6UIFormatter__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__AX6UICalendar__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__AX6UIPalette__ = __webpack_require__(13);








/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let tmpl = {
  pickerTmpl(columnKeys) {
    return `
<div data-ax6ui-picker="" class="{{theme}}" id="{{id}}" data-picker-els="root" {{#zIndex}}style="z-index:{{zIndex}};"{{/zIndex}}>
    {{#title}}
        <div class="ax-picker-heading">{{title}}</div>
    {{/title}}
    <div class="ax-picker-body">
        <div class="ax-picker-content" data-picker-els="content" style="width:{{contentWidth}}px;"></div>
        {{#btns}}
            <div class="ax-picker-buttons">
            {{#btns}}
                {{#@each}}
                <button data-picker-btn="{{@key}}" class="{{@value.theme}}">{{@value.label}}</button>
                {{/@each}}
            {{/btns}}
            </div>
        {{/btns}}
    </div>
    <div class="ax-picker-arrow"></div>
</div>
`;
  }
};

const onStateChanged = function (item, that) {
  if (item && item.onStateChanged) {
    item.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }
  return true;
};
const bindPickerTarget = function () {
  const pickerEvent = {
    'focus': function (queIdx, e) {
      this.open(queIdx);
    },
    'click': function (queIdx, e) {
      this.open(queIdx);
    }
  };
  const pickerType = {
    '@fn': function (queIdx, _input) {
      let item = this.queue[queIdx],
          inputLength = _input.length,
          config = {
        inputLength: inputLength || 1
      };

      if (inputLength > 1) {
        config.btns = {
          ok: { label: this.config.lang["ok"], theme: this.config.theme }
        };
      }

      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, config, item);

      config = null;
      inputLength = null;
    },
    'date': function (queIdx, _input) {
      let item = this.queue[queIdx],
          contentWidth = item.content ? item.content.width || 270 : 270,
          contentMargin = item.content ? item.content.margin || 5 : 5,
          inputLength = _input.length,
          config = {
        contentWidth: contentWidth * inputLength + (inputLength - 1) * contentMargin,
        content: { width: contentWidth, margin: contentMargin },
        inputLength: inputLength || 1
      };

      if (inputLength > 1 && !item.btns) {
        config.btns = {
          ok: { label: this.config.lang["ok"], theme: this.config.theme }
        };
      }

      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, config, item);

      contentWidth = null;
      contentMargin = null;
      config = null;
      inputLength = null;
    },
    'secure-num': function (queIdx, _input) {
      let item = this.queue[queIdx],
          inputLength = _input.length,
          config = {
        inputLength: inputLength || 1
      };

      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, config, item);

      config = null;
      inputLength = null;
    },
    'keyboard': function (queIdx, _input) {
      let item = this.queue[queIdx],
          inputLength = _input.length,
          config = {
        inputLength: inputLength || 1
      };

      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, config, item);

      config = null;
      inputLength = null;
    },
    'numpad': function (queIdx, _input) {
      let item = this.queue[queIdx],
          inputLength = _input.length,
          config = {
        inputLength: inputLength || 1
      };

      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, config, item);

      config = null;
      inputLength = null;
    },
    'color': function (queIdx, _input) {
      let item = this.queue[queIdx],
          contentWidth = item.content ? item.content.width || 270 : 270,
          contentMargin = item.content ? item.content.margin || 5 : 5,
          inputLength = _input.length,
          config = {
        contentWidth: contentWidth * inputLength + (inputLength - 1) * contentMargin,
        content: { width: contentWidth, margin: contentMargin },
        inputLength: inputLength || 1
      },
          $colorPreview = item.$target.find('[data-ax6picker-color="preview"]');

      if ($colorPreview.get(0)) {
        $colorPreview.css({ "background-color": "#" + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].color(_input.val() || "#000000").getHexValue() });
        // 컬러 피커인 경우 input의 값이 변경되면 preview를 수정
        _input.on("change", function () {
          $colorPreview.css({ "background-color": "#" + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].color(this.value || "#000000").getHexValue() });
        });
      }

      if (inputLength > 1 && !item.btns) {
        config.btns = {
          ok: { label: this.config.lang["ok"], theme: this.config.theme }
        };
      }

      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, config, item);

      contentWidth = null;
      contentMargin = null;
      config = null;
      inputLength = null;
    }
  };

  return function (queIdx) {
    let item = this.queue[queIdx],
        input;

    if (!item.content) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6picker", "501", "bind"));
      return this;
    }

    input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : item.$target.find('input[type]');

    // 함수타입
    if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isFunction(item.content)) {
      pickerType["@fn"].call(this, queIdx, input);
    } else {
      for (var key in pickerType) {
        if (item.content.type == key) {
          pickerType[key].call(this, queIdx, input);
          break;
        }
      }
    }

    input.off('focus.ax6picker').off('click.ax6picker').on('focus.ax6picker', pickerEvent.focus.bind(this, queIdx)).on('click.ax6picker', pickerEvent.click.bind(this, queIdx));

    item.$target.find('.input-group-addon').off('click.ax6picker').on('click.ax6picker', pickerEvent.click.bind(this, queIdx));

    if (item.content.formatter) {
      this.formatter.bind(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, item.content.formatter, { target: input }));
    }

    input = null;
    item = null;
    queIdx = null;
    return this;
  };
}();
const alignPicker = function (append) {
  if (!this.activePicker) return this;

  let _alignPicker = function (item) {
    let $window = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window),
        $body = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body);
    let pos = {},
        positionMargin = 12,
        dim = {},
        pickerDim = {},
        pickerDirection;

    pos = item.$target.offset();
    dim = {
      width: item.$target.outerWidth(),
      height: item.$target.outerHeight()
    };
    pickerDim = {
      winWidth: Math.max($window.width(), $body.width()),
      winHeight: Math.max($window.height(), $body.height()),
      width: this.activePicker.outerWidth(),
      height: this.activePicker.outerHeight()
    };

    // picker css(width, left, top) & direction 결정

    if (!item.direction || item.direction === "" || item.direction === "auto") {
      // set direction
      pickerDirection = "top";
      if (pos.top - pickerDim.height - positionMargin < 0) {
        pickerDirection = "top";
      } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {
        pickerDirection = "bottom";
      }
    } else {
      pickerDirection = item.direction;
    }

    if (append) {
      this.activePicker.addClass("direction-" + pickerDirection);
    }

    let positionCSS = function () {
      let css = { left: 0, top: 0 };
      switch (pickerDirection) {
        case "top":
          css.left = pos.left + dim.width / 2 - pickerDim.width / 2;
          css.top = pos.top + dim.height + positionMargin;
          break;
        case "bottom":
          css.left = pos.left + dim.width / 2 - pickerDim.width / 2;
          css.top = pos.top - pickerDim.height - positionMargin;
          break;
        case "left":
          css.left = pos.left + dim.width + positionMargin;
          css.top = pos.top - pickerDim.height / 2 + dim.height / 2;
          break;
        case "right":
          css.left = pos.left - pickerDim.width - positionMargin;
          css.top = pos.top - pickerDim.height / 2 + dim.height / 2;
          break;
      }
      return css;
    }();

    {
      if (pickerDirection == "top" || pickerDirection == "bottom") {
        if (positionCSS.left < 0) {
          positionCSS.left = positionMargin;
          this.activePickerArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });
        } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {
          positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;
          this.activePickerArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });
        }
      }
    }

    this.activePicker.css(positionCSS);
  };
  let item = this.queue[this.activePickerQueueIndex];

  if (append) {
    this.activePicker.css({ top: -999 });
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.activePicker);
  }

  setTimeout(function () {
    _alignPicker.call(this, item);
  }.bind(this));
};
const onBodyClick = function (e, target) {
  if (!this.activePicker) return this;

  let item = this.queue[this.activePickerQueueIndex];

  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-picker-els")) {
      return true;
    } else if (item.$target.get(0) == target) {
      return true;
    }
  });
  if (!target) {
    this.close();
    return this;
  }
  //console.log("i'm picker");
  return this;
};
const onBtnClick = function (e, target) {
  // console.log('btn click');
  if (e.srcElement) e.target = e.srcElement;

  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-picker-btn")) {
      return true;
    }
  });

  if (target) {
    let item = this.queue[this.activePickerQueueIndex],
        k = target.getAttribute("data-picker-btn");

    if (item.btns && item.btns[k].onClick) {
      let that = {
        key: k,
        value: item.btns[k],
        self: this,
        item: item
      };
      item.btns[k].onClick.call(that, k);
    } else {
      this.close();
    }
  }
};
const onBodyKeyup = function (e) {
  if (e.keyCode == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.ESC) {
    this.close();
  }
};
const getQueIdx = function (boundID) {
  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(boundID)) {
    boundID = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(boundID).data("data-axpicker-id");
  }
  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(boundID)) {
    console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6picker", "402", "getQueIdx"));
    return;
  }
  return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(this.queue, function () {
    return this.id == boundID;
  });
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIPicker extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */] {
  /**
   * @constructor
   * @param config
   * @param [config.theme]
   * @param [config.target]
   * @param [config.animateTime]
   * @param [config.onStateChanged]
   * @param [config.onClick]
   * @param [config.content]
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme=default]
     * @param config.target
     * @param [config.animateTime=100]
     * @param [config.calendar]
     * @param [config.calendar.multipleSelect=false]
     * @param [config.calendar.control]
     * @param [config.calendar.control.left='&#x02190']
     * @param [config.calendar.control.yearTmpl='%s']
     * @param [config.calendar.control.monthTmpl='%s']
     * @param [config.calendar.control.right='&#x02192']
     * @param [config.calendar.control.yearFirst=true]
     * @param [config.palette={}]
     * @param [config.formatter={}]
     * @param [config.onStateChanged]
     * @param [config.onClick]
     */
    this.config = {
      clickEventName: "click", //(('ontouchstart' in document.documentElement) ? "touchend" : "click"),
      theme: 'default',
      title: '',
      lang: {
        "ok": "ok",
        "cancel": "cancel"
      },
      animateTime: 100,
      calendar: {
        multipleSelect: false,
        control: {
          left: '&#x02190',
          yearTmpl: '%s',
          monthTmpl: '%s',
          right: '&#x02192',
          yearFirst: true
        }
      },
      palette: {},
      formatter: {}
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * @member {Array}
     */
    this.queue = [];
    /**
     * @member {Object}
     */
    this.activePicker = null;
    /**
     * @member {Number}
     */
    this.activePickerQueueIndex = -1;
    /**
     * @member {Object}
     */
    this.openTimer = null;
    /**
     * @member {Object}
     */
    this.closeTimer = null;

    this.init();
  }

  /**
   * @method
   * @param config
   * @param [config.theme]
   * @param [config.target]
   * @param [config.animateTime]
   * @param [config.onStateChanged]
   * @param [config.onClick]
   * @param [config.content]
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;

    // formatter 인스턴스
    this.formatter = new __WEBPACK_IMPORTED_MODULE_5__AX6UIFormatter__["a" /* default */]();
  }

  /**
   * @method
   * @param item
   * @param {Element} item.target
   * @param {String} item.direction - top|left|right|bottom|auto
   * @param {Number} item.contentWidth
   * @param {Boolean} item.disableChangeTrigger
   * @param {Function} item.onStateChanged
   * @param {Object} item.btns
   * @param {Object} item.content
   * @param {Number} item.content.width
   * @param {Number} item.content.margin
   * @param {String} item.content.type
   * @param {Object} item.content.config - binded UI config
   * @param {Object} item.content.formatter
   * @param {String} item.content.formatter.pattern
   * @return {AX6UIPicker}
   * @example
   * ```js
   * import $ from "jqmin";
   * import Picker from "../../src/AX6UIPicker";
   *
   * let picker = new Picker();
   * picker.bind({
     *     target: $("#color-0"),
     *     direction: "auto",
     *     content: {
     *         width: 250,
     *         margin: 10,
     *         type: 'color',
     *         config: {
     *
     *         }
     *     },
     *     onStateChanged: function () {
     *
     *     }
     * });
   * ```
   */
  bind(item) {
    let pickerConfig = {},
        queIdx;
    item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, pickerConfig, this.config, item);

    if (!item.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6picker", "401", "bind"));
      return this;
    }
    item.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.target);

    if (!item.$target.get(0)) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6picker", "401", "bind"));
      return this;
    }

    if (!item.id) item.id = item.$target.data("data-axpicker-id");
    if (!item.id) {
      item.id = 'ax6-picker-' + __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */].getInstanceId();
      item.$target.data("data-axpicker-id", item.id);
    }
    queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(this.queue, function () {
      return this.id == item.id;
    });

    if (queIdx === -1) {
      this.queue.push(item);
      bindPickerTarget.call(this, this.queue.length - 1);
    } else {
      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.queue[queIdx], item);
      bindPickerTarget.call(this, queIdx);
    }

    pickerConfig = null;
    queIdx = null;
    return this;
  }

  /**
   * @method
   * @param boundID
   * @param inputIndex
   * @param val
   * @param _option
   * @return {AX6UIPicker}
   */
  setContentValue(boundID, inputIndex, val, _option) {
    const multipleInputProcessor = {
      "date": function (_item, _inputIndex, _val) {
        var values = [],
            diffDay,
            prevInputValue,
            nextInputValue;

        if (_item.$target.get(0).tagName.toUpperCase() !== "INPUT") {
          _item.$target.find('input[type]').each(function () {
            values.push(this.value);
          });
        }

        if (_inputIndex == 0) {
          if (values.length > 1 && values[1] !== "") {
            // 값 검증
            diffDay = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].dday(values[1], { today: values[0] });
            if (diffDay < 0) {
              // 다음날짜 달력을 변경합니다.
              nextInputValue = _val;
            } else {}
          } else {
            nextInputValue = _val;
          }

          if (nextInputValue) {
            _item.pickerCalendar[1].calendar.setSelection([nextInputValue], false).changeMode("d", nextInputValue);
            this.setContentValue(_item.id, 1, nextInputValue);
          }

          return _val;
        } else if (_inputIndex == 1) {

          if (values.length > 1) {
            // 값 검증
            diffDay = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].dday(values[1], { today: values[0] });
            if (diffDay < 0) {
              // 다음날짜 달력을 변경합니다.
              prevInputValue = values[1];
            }
          }

          if (prevInputValue) {
            _item.pickerCalendar[0].calendar.setSelection([prevInputValue], false).changeMode("d", prevInputValue);
            this.setContentValue(_item.id, 0, prevInputValue);
          }

          return _val;
        }
      }
    };

    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID),
        item = this.queue[queIdx],
        _input;

    if (!_option) _option = {};
    if (item) {

      _input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.$target.find('input[type]').get(inputIndex));
      _input.val(val);

      if (!item.disableChangeTrigger) {
        _input.trigger("change");
      } else {
        let $colorPreview = item.$target.find('[data-ax6picker-color="preview"]');
        if ($colorPreview.get(0)) {
          $colorPreview.css({ "background-color": val });
        }
      }

      // picker의 입력이 2개이상인 경우
      //console.log(item.inputLength);
      if (item.inputLength > 1) {
        // 경우에 따라 첫번 선택에 따라 해야할 일들 처리
        if (multipleInputProcessor[item.content.type]) {
          val = multipleInputProcessor[item.content.type].call(this, item, inputIndex, val);
        }
      }

      let that = {
        self: this,
        state: "changeValue",
        item: item,
        inputIndex: inputIndex,
        value: val,
        values: [val]
      };
      if (item.$target.get(0).tagName.toUpperCase() !== "INPUT") {
        that.values = [];
        item.$target.find('input[type]').each(function () {
          that.values.push(this.value);
        });
      }

      onStateChanged.call(this, item, that);

      if (item.inputLength == 1 && !_option.doNotClose) {
        this.close();
      }
    }

    item = null;
    boundID = null;
    inputIndex = null;
    val = null;
    return this;
  }

  /**
   * @method
   * @param boundID
   * @param inputIndex
   * @return {*}
   */
  getContentValue(boundID, inputIndex) {
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID),
        item = this.queue[queIdx],
        _input;

    if (item) {
      _input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.$target.find('input[type]').get(inputIndex));
      return _input.val();
    }

    item = null;
    boundID = null;
    inputIndex = null;
    return this;
  }

  /**
   * @method
   * @param boundID
   * @param tryCount
   * @return {AX6UIPicker}
   */
  open(boundID, tryCount) {
    const pickerContent = {
      '@fn': function (queIdx, callback) {
        let item = this.queue[queIdx];
        item.content.call(item, function (html) {
          callback(html);
        });
        return true;
      },
      'date': function (queIdx) {
        let item = this.queue[queIdx],
            html = [],
            calendarConfig = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.config.calendar, { displayDate: new Date() }),
            input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : item.$target.find('input[type]');

        for (let i = 0; i < item.inputLength; i++) {
          html.push('<div ' + 'style="width:' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(item.content.width) + ';float:left;" ' + 'class="ax-picker-content-box" ' + 'data-calendar-target="' + i + '"></div>');
          if (i < item.inputLength - 1) html.push('<div style="width:' + item.content.margin + 'px;float:left;height: 5px;"></div>');
        }
        html.push('<div style="clear:both;"></div>');
        item.pickerContent.html(html.join(''));

        // calendar bind
        item.pickerCalendar = [];
        item.pickerContent.find('[data-calendar-target]').each(function () {

          // calendarConfig extend ~
          let idx = this.getAttribute("data-calendar-target"),
              dValue = input.get(idx).value,
              d = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(dValue),
              dateConvert = {
            "year"(_d) {
              return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(_d, { "return": "yyyy" });
            },
            "month"(_d) {
              return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].date(_d, { "return": "yyyy-MM" });
            },
            "day"(_d) {
              return _d;
            }
          };

          calendarConfig.displayDate = d;

          if (dValue) calendarConfig.selection = [d];

          calendarConfig = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, calendarConfig, item.content.config || {});
          calendarConfig.target = this;
          calendarConfig.onClick = function () {
            self.setContentValue(item.id, idx, dateConvert[calendarConfig.selectMode || "day"](this.date));
          };

          item.pickerCalendar.push({
            itemId: item.id,
            inputIndex: idx,
            calendar: new __WEBPACK_IMPORTED_MODULE_6__AX6UICalendar__["a" /* default */](calendarConfig)
          });
        });
      },
      'secure-num': function (queIdx) {
        let item = this.queue[queIdx],
            html = [];
        for (let i = 0; i < item.inputLength; i++) {
          html.push('<div ' + 'style="width:' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(item.content.width) + ';float:left;" ' + 'class="ax-picker-content-box" ' + 'data-secure-num-target="' + i + '"></div>');
          if (i < item.inputLength - 1) html.push('<div style="width:' + item.content.margin + 'px;float:left;height: 5px;"></div>');
        }
        html.push('<div style="clear:both;"></div>');
        item.pickerContent.html(html.join(''));

        // secure-num bind
        item.pickerContent.find('[data-secure-num-target]').each((elIdx, el) => {
          let idx = el.getAttribute("data-secure-num-target"),
              po = [];

          let numArray = function (a) {
            let j, x, i;
            for (i = a.length; i; i -= 1) {
              j = Math.floor(Math.random() * i);
              x = a[i - 1];
              a[i - 1] = a[j];
              a[j] = x;
            }
            return a;
          }([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

          let specialArray = [{ label: "&#x02190", fn: "back" }, { label: "C", fn: "clear" }];

          numArray.forEach(function (n) {
            po.push('<div style="float:left;' + item.content.config.btnWrapStyle + '">');
            po.push('<button class="' + item.content.config.btnTheme + '" ' + 'style="' + item.content.config.btnStyle + '" data-secure-num-value="' + n + '">' + n + '</button>');
            po.push('</div>');
          });
          specialArray.forEach(function (n) {
            po.push('<div style="float:left;' + item.content.config.btnWrapStyle + '">');
            po.push('<button class="' + item.content.config.specialBtnTheme + '" ' + 'style="' + item.content.config.btnStyle + '" data-secure-num-value="' + n.fn + '">' + n.label + '</button>');
            po.push('</div>');
          });

          po.push('<div style="clear:both;"></div>');

          $(el).html(po.join('')).on("click", '[data-secure-num-value]', e => {
            let act = e.currentTarget.getAttribute("data-secure-num-value");
            let _input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.$target.find('input[type]').get(idx));
            let val = _input.val();

            if (act == "back") {
              _input.val(val.substring(0, val.length - 1));
            } else if (act == "clear") {
              _input.val('');
            } else {
              _input.val(val + act);
            }

            onStateChanged.call(this, item, {
              self: this,
              state: "changeValue",
              item: item,
              value: _input.val()
            });
          });
        });
      },
      'keyboard': function (queIdx) {
        let item = this.queue[queIdx];
        let html = [];
        for (let i = 0; i < item.inputLength; i++) {
          html.push('<div ' + 'style="width:' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(item.content.width) + ';float:left;" ' + 'class="ax-picker-content-box" ' + 'data-keyboard-target="' + i + '"></div>');
          if (i < item.inputLength - 1) html.push('<div style="width:' + item.content.margin + 'px;float:left;height: 5px;"></div>');
        }
        html.push('<div style="clear:both;"></div>');
        item.pickerContent.html(html.join(''));

        let keyArray = [[{ value: "`", shiftValue: "~" }, { value: "1", shiftValue: "!" }, { value: "2", shiftValue: "@" }, { value: "3", shiftValue: "#" }, { value: "4", shiftValue: "$" }, { value: "5", shiftValue: "%" }, { value: "6", shiftValue: "^" }, { value: "7", shiftValue: "&" }, { value: "8", shiftValue: "*" }, { value: "9", shiftValue: "(" }, { value: "0", shiftValue: ")" }, { value: "-", shiftValue: "_" }, { value: "=", shiftValue: "+" }, { label: "&#x02190", fn: "back" }], [{ value: "q", shiftValue: "Q" }, { value: "w", shiftValue: "W" }, { value: "e", shiftValue: "E" }, { value: "r", shiftValue: "R" }, { value: "t", shiftValue: "T" }, { value: "y", shiftValue: "Y" }, { value: "u", shiftValue: "U" }, { value: "i", shiftValue: "I" }, { value: "o", shiftValue: "O" }, { value: "p", shiftValue: "P" }, { value: "[", shiftValue: "{" }, { value: "]", shiftValue: "}" }, { value: "\\", shiftValue: "|" }], [{ label: "Clear", fn: "clear" }, { value: "a", shiftValue: "A" }, { value: "s", shiftValue: "S" }, { value: "d", shiftValue: "D" }, { value: "f", shiftValue: "F" }, { value: "g", shiftValue: "G" }, { value: "h", shiftValue: "H" }, { value: "j", shiftValue: "J" }, { value: "k", shiftValue: "K" }, { value: "l", shiftValue: "L" }, { value: ";", shiftValue: ":" }, { value: "'", shiftValue: "\"" }], [{ label: "Shift", fn: "shift" }, { value: "z", shiftValue: "Z" }, { value: "x", shiftValue: "X" }, { value: "c", shiftValue: "C" }, { value: "v", shiftValue: "V" }, { value: "b", shiftValue: "B" }, { value: "n", shiftValue: "N" }, { value: "m", shiftValue: "M" }, { value: ",", shiftValue: "<" }, { value: ".", shiftValue: ">" }, { value: "/", shiftValue: "?" }, { label: "Close", fn: "close" }]];
        let specialArray = [{ label: "&#x02190", fn: "back" }, { label: "C", fn: "clear" }];
        const getKeyBoard = function (isShiftKey) {
          let po = [];
          keyArray.forEach(function (row) {
            po.push('<div style="display: table;margin:0 auto;">');
            row.forEach(function (n) {

              let keyValue, keyLabel, btnWrapStyle, btnTheme, btnStyle;
              if (n.fn) {
                keyValue = n.fn;
                keyLabel = n.label;
                btnWrapStyle = item.content.config.specialBtnWrapStyle;
                btnTheme = item.content.config.specialBtnTheme;
                btnStyle = item.content.config.specialBtnStyle;
              } else {
                keyLabel = keyValue = isShiftKey ? n.shiftValue : n.value;
                btnWrapStyle = item.content.config.btnWrapStyle;
                btnTheme = item.content.config.btnTheme;
                btnStyle = item.content.config.btnStyle;
              }

              po.push('<div style="display: table-cell;' + btnWrapStyle + '">');
              po.push('<button class="' + btnTheme + '" ' + 'style="' + btnStyle + '" data-keyboard-value="' + keyValue + '">' + keyLabel + '</button>');
              po.push('</div>');
            });
            po.push('</div>');
          });
          return po.join('');
        };

        // secure-num bind
        item.pickerContent.find('[data-keyboard-target]').each(function () {
          let idx = this.getAttribute("data-keyboard-target"),
              $this = $(this),
              isShiftKey = false,
              toggleShift = function () {
            isShiftKey = !isShiftKey;
            $this.html(getKeyBoard(isShiftKey));
          };

          $this.html(getKeyBoard(isShiftKey)).on("mousedown", '[data-keyboard-value]', function () {
            let act = this.getAttribute("data-keyboard-value"),
                _input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.$target.find('input[type]').get(idx)),
                val = _input.val();

            switch (act) {
              case "back":
                _input.val(val.substring(0, val.length - 1));
                break;
              case "clear":
                _input.val('');
                break;
              case "shift":
                toggleShift();
                return false;
                break;
              case "close":
                self.close();
                return false;
                break;
              default:
                _input.val(val + act);
            }

            onStateChanged.call(this, item, {
              self: self,
              state: "changeValue",
              item: item,
              value: _input.val()
            });
          });
        });
      },
      'numpad': function (queIdx) {
        let item = this.queue[queIdx],
            html = [];
        for (let i = 0; i < item.inputLength; i++) {
          html.push('<div ' + 'style="width:' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(item.content.width) + ';float:left;" ' + 'class="ax-picker-content-box" ' + 'data-numpad-target="' + i + '"></div>');
          if (i < item.inputLength - 1) html.push('<div style="width:' + item.content.margin + 'px;float:left;height: 5px;"></div>');
        }
        html.push('<div style="clear:both;"></div>');
        item.pickerContent.html(html.join(''));

        // secure-num bind
        item.pickerContent.find('[data-numpad-target]').each(function () {
          let idx = this.getAttribute("data-numpad-target"),
              po = [],
              keyArray = item.content.config.keyArray || [{ value: "7" }, { value: "8" }, { value: "9" }, { label: "BS", fn: "back" }, { value: "4" }, { value: "5" }, { value: "6" }, { label: "CLS", fn: "clear" }, { value: "1" }, { value: "2" }, { value: "3" }, { value: "" }, { value: "." }, { value: "0" }, { value: "" }, { label: "OK", fn: "enter" }];

          keyArray.forEach(function (n) {
            let keyValue, keyLabel, btnWrapStyle, btnTheme, btnStyle;

            if (n.fn) {
              keyValue = n.fn;
              keyLabel = n.label;
              btnTheme = item.content.config.specialBtnTheme;
              btnWrapStyle = item.content.config.specialBtnWrapStyle;
              btnStyle = item.content.config.specialBtnStyle;
            } else {
              keyLabel = keyValue = n.value;
              btnTheme = keyValue ? item.content.config.btnTheme : "";
              btnWrapStyle = item.content.config.btnWrapStyle;
              btnStyle = item.content.config.btnStyle;
            }

            po.push('<div style="float:left;' + btnWrapStyle + '">');
            po.push('<button class="btn btn-default btn-' + btnTheme + '" ' + 'style="' + btnStyle + '" data-numpad-value="' + keyValue + '">' + (keyLabel || "&nbsp;") + '</button>');
            po.push('</div>');
          });

          po.push('<div style="clear:both;"></div>');

          $(this).html(po.join('')).on("mousedown", '[data-numpad-value]', function () {
            let act = this.getAttribute("data-numpad-value"),
                _input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.$target.find('input[type]').get(idx)),
                val = _input.val(),
                state = "";

            switch (act) {
              case "back":
                state = "changeValue";
                _input.val(val.substring(0, val.length - 1));
                break;
              case "clear":
                state = "changeValue";
                _input.val('');
                break;
              case "enter":
                self.close(item, "enter");
                return false;
                break;
              case "close":
                self.close();
                return false;
                break;
              default:
                state = "changeValue";
                _input.val(val + act);
            }

            onStateChanged.call(this, item, {
              self: self,
              state: state,
              item: item,
              value: _input.val()
            });
          });
        });
      },
      'color': function (queIdx) {
        let item = this.queue[queIdx],
            html = [],
            paletteConfig = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.config.palette),
            input = item.$target.get(0).tagName.toUpperCase() == "INPUT" ? item.$target : item.$target.find('input[type]');

        for (let i = 0; i < item.inputLength; i++) {
          html.push('<div ' + 'style="padding: 5px;width:' + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].cssNumber(item.content.width) + ';float:left;" ' + 'class="ax-picker-content-box" ' + 'data-palette-target="' + i + '" data-ax5palette="ax6picker-' + item.id + '"></div>');
          if (i < item.inputLength - 1) html.push('<div style="width:' + item.content.margin + 'px;float:left;height: 5px;"></div>');
        }
        html.push('<div style="clear:both;"></div>');
        item.pickerContent.html(html.join(''));

        // calendar bind
        item.pickerPalette = [];
        item.pickerContent.find('[data-palette-target]').each(function () {
          // calendarConfig extend ~
          let idx = this.getAttribute("data-palette-target"),
              dColor = input.get(idx).value;

          paletteConfig.selectedColor = dColor;
          paletteConfig = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, paletteConfig, item.content.config || {});
          paletteConfig.target = this;
          paletteConfig.onClick = function (color) {
            self.setContentValue(item.id, idx, color);
          };
          paletteConfig.onUpdateColor = function (color) {
            self.setContentValue(item.id, idx, color, { doNotClose: true });
          };

          item.pickerPalette.push({
            itemId: item.id,
            inputIndex: idx,
            palette: new __WEBPACK_IMPORTED_MODULE_7__AX6UIPalette__["a" /* default */](paletteConfig)
          });
        });
      }
    };

    let self = this;
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID),
        item = this.queue[queIdx];

    /**
     다른 피커가 있는 경우와 다른 피커를 닫고 다시 오픈 명령이 내려진 경우에 대한 예외 처리 구문
     */
    if (this.openTimer) clearTimeout(this.openTimer);
    if (this.activePicker) {
      if (this.activePickerQueueIndex == queIdx) {
        return this;
      }

      if (tryCount > 2) return this;
      this.close();
      this.openTimer = setTimeout(function () {
        this.open(queIdx, (tryCount || 0) + 1);
      }.bind(this), this.config.animateTime);
      return this;
    }

    this.activePicker = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.pickerTmpl.call(this), item));
    this.activePickerArrow = this.activePicker.find(".ax-picker-arrow");
    this.activePickerQueueIndex = queIdx;
    item.pickerContent = this.activePicker.find('[data-picker-els="content"]');

    if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isFunction(item.content)) {
      // 함수타입
      item.pickerContent.html("Loading..");
      pickerContent["@fn"].call(this, queIdx, function (html) {
        item.pickerContent.html(html);
      });
    } else {
      if (item.content.type in pickerContent) {
        pickerContent[item.content.type].call(this, queIdx);
      }
    }

    // bind event picker btns
    this.activePicker.find("[data-picker-btn]").on(this.config.clickEventName, function (e) {
      onBtnClick.call(this, e || window.event, queIdx);
    }.bind(this));

    alignPicker.call(this, "append");

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("resize.ax6picker", __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].throttle(function (e) {
      alignPicker.call(this, e || window.event);
    }, 100).bind(this)).on("keyup.ax6picker", e => {
      e = e || window.event;
      onBodyKeyup.call(this, e);
      __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
    }).on("click.ax6picker", e => {
      e = e || window.event;
      onBodyClick.call(this, e);
      __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
    });

    onStateChanged.call(this, item, {
      self: this,
      state: "open",
      item: item
    });

    return this;
  }

  /**
   * @method
   * @param item
   * @param state
   * @return {AX6UIPicker}
   */
  close(item, state) {
    if (this.closeTimer) clearTimeout(this.closeTimer);
    if (!this.activePicker) return this;

    item = this.queue[this.activePickerQueueIndex];

    this.activePicker.addClass("destroy");
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6picker");
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("click.ax6picker");
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("keyup.ax6picker");

    this.closeTimer = setTimeout(function () {
      if (this.activePicker) this.activePicker.remove();
      this.activePicker = null;
      this.activePickerQueueIndex = -1;

      onStateChanged.call(this, item, {
        self: this,
        state: state || "close"
      });
    }.bind(this), this.config.animateTime);

    return this;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIPicker);

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let ctrlKeys = {
  "18": "KEY_ALT",
  "8": "KEY_BACKSPACE",
  "17": "KEY_CONTROL",
  "46": "KEY_DELETE",
  "40": "KEY_DOWN",
  "35": "KEY_END",
  "187": "KEY_EQUAL",
  "27": "KEY_ESC",
  "36": "KEY_HOME",
  "45": "KEY_INSERT",
  "37": "KEY_LEFT",
  "189": "KEY_MINUS",
  "34": "KEY_PAGEDOWN",
  "33": "KEY_PAGEUP",
  // "190": "KEY_PERIOD",
  "13": "KEY_RETURN",
  "39": "KEY_RIGHT",
  "16": "KEY_SHIFT",
  // "32": "KEY_SPACE",
  "9": "KEY_TAB",
  "38": "KEY_UP",
  "91": "KEY_WINDOW"
  //"107" : "NUMPAD_ADD",
  //"194" : "NUMPAD_COMMA",
  //"110" : "NUMPAD_DECIMAL",
  //"111" : "NUMPAD_DIVIDE",
  //"12" : "NUMPAD_EQUAL",
  //"106" : "NUMPAD_MULTIPLY",
  //"109" : "NUMPAD_SUBTRACT"
};
let tmpl = {
  "display"(columnKeys) {
    return `
<a {{^tabIndex}}href="#ax6ui-select-{{id}}" {{/tabIndex}}{{#tabIndex}}tabindex="{{tabIndex}}" {{/tabIndex}}class="ax6ui-select-display {{theme}}" 
data-ax6ui-select-display="{{id}}" data-ax6ui-select-instance="{{instanceId}}" style="height: {{height}}px;">
    <div class="ax6ui-select-display-table" data-els="display-table">
        <div data-ax6ui-select-display="label">{{label}}</div>
        <div data-ax6ui-select-display="addon"> 
            {{#multiple}}{{#reset}}
            <span class="addon-icon-reset" data-selected-clear="true">{{{.}}}</span>
            {{/reset}}{{/multiple}}
            {{#icons}}
            <span class="addon-icon-closed">{{clesed}}</span>
            <span class="addon-icon-opened">{{opened}}</span>
            {{/icons}}
            {{^icons}}
            <span class="addon-icon-closed"><span class="addon-icon-arrow"></span></span>
            <span class="addon-icon-opened"><span class="addon-icon-arrow"></span></span>
            {{/icons}}
        </div>
    </div>
    <input type="text" tabindex="-1" data-ax6ui-select-display="input" 
    style="position:absolute;z-index:0;left:0px;top:0px;font-size:1px;opacity: 0;width:1px;height:1px;border: 0 none;color : transparent;text-indent: -9999em;" />
</a>
`;
  },
  "select"(columnKeys) {
    return `
<select tabindex="-1" class="" name="{{name}}" {{#multiple}}multiple="multiple"{{/multiple}} style="height: {{height}}px;"></select>
`;
  },
  "optionGroup"(columnKeys) {
    return `
<div class="ax6ui-select-option-group {{theme}}" data-ax6ui-select-option-group="{{id}}">
    <div class="ax-select-body">
        <div class="ax-select-option-group-content" data-els="content"></div>
    </div>
    <div class="ax-select-arrow"></div> 
</div>
`;
  },
  "options"(columnKeys) {
    return `
{{#waitOptions}}
    <div class="ax-select-option-item">
            <div class="ax-select-option-item-holder">
                <span class="ax-select-option-item-cell ax-select-option-item-label">
                    {{{lang.loading}}}
                </span>
            </div>
        </div>
{{/waitOptions}}
{{^waitOptions}}
    {{#options}}
        {{#optgroup}}
            <div class="ax-select-option-group">
                <div class="ax-select-option-item-holder">
                    <span class="ax-select-option-group-label">
                        {{{.}}}
                    </span>
                </div>
                {{#options}}
                <div class="ax-select-option-item" data-option-focus-index="{{@findex}}" data-option-group-index="{{@gindex}}" data-option-index="{{@index}}" 
                data-option-value="{{${columnKeys.optionValue}}}" 
                {{#${columnKeys.optionSelected}}}data-option-selected="true"{{/${columnKeys.optionSelected}}}>
                    <div class="ax-select-option-item-holder">
                        {{#multiple}}
                        <span class="ax-select-option-item-cell ax-select-option-item-checkbox">
                            <span class="item-checkbox-wrap useCheckBox" data-option-checkbox-index="{{@i}}"></span>
                        </span>
                        {{/multiple}}
                        <span class="ax-select-option-item-cell ax-select-option-item-label">{{{${columnKeys.optionText}}}}</span>
                    </div>
                </div>
                {{/options}}
            </div>                            
        {{/optgroup}}
        {{^optgroup}}
        <div class="ax-select-option-item" data-option-focus-index="{{@findex}}" data-option-index="{{@index}}" data-option-value="{{${columnKeys.optionValue}}}" {{#${columnKeys.optionSelected}}}data-option-selected="true"{{/${columnKeys.optionSelected}}}>
            <div class="ax-select-option-item-holder">
                {{#multiple}}
                <span class="ax-select-option-item-cell ax-select-option-item-checkbox">
                    <span class="item-checkbox-wrap useCheckBox" data-option-checkbox-index="{{@i}}"></span>
                </span>
                {{/multiple}}
                <span class="ax-select-option-item-cell ax-select-option-item-label">{{{${columnKeys.optionText}}}}</span>
            </div>
        </div>
        {{/optgroup}}
    {{/options}}
    {{^options}}
        <div class="ax-select-option-item">
            <div class="ax-select-option-item-holder">
                <span class="ax-select-option-item-cell ax-select-option-item-label">
                    {{{lang.noOptions}}}
                </span>
            </div>
        </div>
    {{/options}}
{{/waitOptions}}
`;
  }
};

const $window = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window);
const onStateChanged = function (item, that) {
  if (item && item.onStateChanged) {
    item.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  if (that.state == "changeValue") {
    if (item && item.onChange) {
      item.onChange.call(that, that);
    } else if (this.onChange) {
      this.onChange.call(that, that);
    }
  }

  item = null;
  that = null;
  return true;
};
const alignSelectDisplay = function () {
  let i = this.queue.length,
      w;
  while (i--) {
    if (this.queue[i].$display) {
      w = Math.max(this.queue[i].$select.outerWidth(), __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(this.queue[i].minWidth));
      this.queue[i].$display.css({
        "min-width": w
      });
      if (this.queue[i].reset) {
        this.queue[i].$display.find(".addon-icon-reset").css({
          "line-height": this.queue[i].$display.height() + "px"
        });
      }
    }
  }

  i = null;
  w = null;
  return this;
};
const alignSelectOptionGroup = function (append) {
  if (!this.activeSelectOptionGroup) return this;

  let item = this.queue[this.activeSelectQueueIndex],
      pos = {},
      positionMargin = 0,
      dim = {},
      pickerDim = {},
      pickerDirection;

  if (append) __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.activeSelectOptionGroup);

  pos = item.$target.offset();
  dim = {
    width: item.$target.outerWidth(),
    height: item.$target.outerHeight()
  };
  pickerDim = {
    winWidth: Math.max($window.width(), __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).width()),
    winHeight: Math.max($window.height(), __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).height()),
    width: this.activeSelectOptionGroup.outerWidth(),
    height: this.activeSelectOptionGroup.outerHeight()
  };

  // picker css(width, left, top) & direction 결정
  if (!item.direction || item.direction === "" || item.direction === "auto") {
    // set direction
    pickerDirection = "top";

    if (pos.top - pickerDim.height - positionMargin < 0) {
      pickerDirection = "top";
    } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {
      pickerDirection = "bottom";
    }
  } else {
    pickerDirection = item.direction;
  }
  // todo : 표현할 공간이 없다면..
  if (append) {
    this.activeSelectOptionGroup.addClass("direction-" + pickerDirection);
  }
  this.activeSelectOptionGroup.css(function () {
    if (pickerDirection == "top") {
      if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {

        var newTop = pos.top + dim.height / 2 - pickerDim.height / 2;
        if (newTop + pickerDim.height + positionMargin > pickerDim.winHeight) {
          newTop = 0;
        }
        if (newTop < 0) {
          newTop = 0;
        }

        return {
          left: pos.left,
          top: newTop,
          width: dim.width
        };
      }
      return {
        left: pos.left,
        top: pos.top + dim.height + 1,
        width: dim.width
      };
    } else if (pickerDirection == "bottom") {
      return {
        left: pos.left,
        top: pos.top - pickerDim.height - 1,
        width: dim.width
      };
    }
  }.call(this));
};
const onBodyClick = function (e, target) {
  if (!this.activeSelectOptionGroup) return this;

  let item = this.queue[this.activeSelectQueueIndex],
      clickEl = "display";

  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-option-value") || target.getAttribute("data-option-value") == "") {
      clickEl = "optionItem";
      return true;
    } else if (item.$target.get(0) == target) {
      clickEl = "display";
      return true;
    }
  });

  if (!target) {
    this.close();
    return this;
  } else if (clickEl === "optionItem") {
    this.val(item.id, {
      index: {
        gindex: target.getAttribute("data-option-group-index"),
        index: target.getAttribute("data-option-index")
      }
    }, undefined, "internal");
    item.$select.trigger("change");
    item.$display.focus();
    if (!item.multiple) this.close();
  } else {
    //open and display click
    //console.log(this.instanceId);
  }

  return this;
};
const onBodyKeyup = function (e) {
  if (e.keyCode == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.ESC) {
    this.close();
  } else if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.RETURN) {
    if (this.queue[this.activeSelectQueueIndex].optionFocusIndex > -1) {
      // 아이템에 포커스가 활성화 된 후, 마우스 이벤트 이면 무시
      let $option = this.activeSelectOptionGroup.find('[data-option-focus-index="' + this.queue[this.activeSelectQueueIndex].optionFocusIndex + '"]');
      this.val(this.queue[this.activeSelectQueueIndex].id, {
        index: {
          gindex: $option.attr("data-option-group-index"),
          index: $option.attr("data-option-index")
        }
      }, undefined, "internal");
      this.queue[this.activeSelectQueueIndex].$select.trigger("change");
      if (!this.queue[this.activeSelectQueueIndex].multiple) this.close();
    } else {
      this.close();
    }
  }
};
const getLabel = function (queIdx) {
  let item = this.queue[queIdx],
      labels = [];

  if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(item.selected) && item.selected.length > 0) {
    item.selected.forEach(function (n) {
      if (n.selected) labels.push(n[item.columnKeys.optionText]);
    });
  } else {
    if (!item.multiple && item.options && item.options[0]) {
      if (item.options[0].optgroup) {
        labels[0] = item.options[0].options[0][item.columnKeys.optionText];
      } else {
        labels[0] = item.options[0][item.columnKeys.optionText];
      }
    } else {
      labels[0] = item.lang.noSelected;
    }
  }

  return function () {
    if (item.multiple && labels.length > 1) {
      let data = {
        label: labels[0],
        length: labels.length - 1
      };
      return __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(item.lang.multipleLabel, data);
    } else {
      return labels[0];
    }
  }();
};
const syncLabel = function (queIdx) {
  this.queue[queIdx].$displayLabel.html(getLabel.call(this, queIdx));
};
const focusWord = function (queIdx, searchWord) {
  let options = [],
      i = -1,
      l = this.queue[queIdx].indexedOptions.length - 1,
      n;
  if (searchWord) {
    while (l - i++) {
      n = this.queue[queIdx].indexedOptions[i];
      if (('' + n.value).toLowerCase() == searchWord.toLowerCase()) {
        options = [{ '@findex': n['@findex'], optionsSort: 0 }];
        break;
      } else {
        let sort = ('' + n.value).toLowerCase().search(searchWord.toLowerCase());
        if (sort > -1) {
          options.push({ '@findex': n['@findex'], optionsSort: sort });
          if (options.length > 2) break;
        }
        sort = null;
      }
    }
    options.sort(function (a, b) {
      return a.optionsSort - b.optionsSort;
    });
  }
  if (options && options.length > 0) {
    focusMove.call(this, queIdx, undefined, options[0]['@findex']);
  }

  try {
    return options;
  } finally {
    options = null;
    i = null;
    l = null;
    n = null;
  }
};
const focusMove = function (queIdx, direction, findex) {
  let _focusIndex, _prevFocusIndex, focusOptionEl, optionGroupScrollContainer;

  if (this.activeSelectOptionGroup && this.queue[queIdx].options && this.queue[queIdx].options.length > 0) {

    if (typeof findex !== "undefined") {
      _focusIndex = findex;
    } else {
      _prevFocusIndex = this.queue[queIdx].optionFocusIndex == -1 ? this.queue[queIdx].optionSelectedIndex || -1 : this.queue[queIdx].optionFocusIndex;
      if (_prevFocusIndex == -1) {
        _focusIndex = direction > 0 ? 0 : this.queue[queIdx].optionItemLength - 1;
      } else {
        _focusIndex = _prevFocusIndex + direction;
        if (_focusIndex < 0) _focusIndex = 0;else if (_focusIndex > this.queue[queIdx].optionItemLength - 1) _focusIndex = this.queue[queIdx].optionItemLength - 1;
      }
    }

    this.queue[queIdx].optionFocusIndex = _focusIndex;

    this.activeSelectOptionGroup.find('[data-option-focus-index]').removeClass("hover");

    focusOptionEl = this.activeSelectOptionGroup.find('[data-option-focus-index="' + _focusIndex + '"]').addClass("hover");

    optionGroupScrollContainer = this.activeSelectOptionGroup.find('[data-els="content"]');

    let focusOptionElHeight = focusOptionEl.outerHeight(),
        optionGroupScrollContainerHeight = optionGroupScrollContainer.innerHeight(),
        optionGroupScrollContainerScrollTop = optionGroupScrollContainer.scrollTop(),
        focusOptionElTop = focusOptionEl.position().top + optionGroupScrollContainer.scrollTop();

    if (optionGroupScrollContainerHeight + optionGroupScrollContainerScrollTop < focusOptionElTop + focusOptionElHeight) {
      optionGroupScrollContainer.scrollTop(focusOptionElTop + focusOptionElHeight - optionGroupScrollContainerHeight);
    } else if (optionGroupScrollContainerScrollTop > focusOptionElTop) {
      optionGroupScrollContainer.scrollTop(focusOptionElTop);
    }
    // optionGroup scroll check
  }
};
const bindSelectTarget = function (queIdx) {
  const selectEvent = {
    'click': function (queIdx, e) {
      let target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
        if (target.getAttribute("data-selected-clear")) {
          //clickEl = "clear";
          return true;
        }
      });

      if (target) {
        this.val(queIdx, { clear: true });
      } else {
        if (this.activeSelectQueueIndex == queIdx) {
          if (this.queue[queIdx].optionFocusIndex == -1) {
            // 아이템에 포커스가 활성화 된 후, 마우스 이벤트 이면 무시
            this.close();
          }
        } else {
          this.open(queIdx);
          __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
        }
      }
    },
    'keyUp': function (queIdx, e) {
      if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.SPACE) {
        selectEvent.click.call(this, queIdx, e);
      } else if (!ctrlKeys[e.which]) {
        // 사용자 입력이 뜸해지면 찾고 검색 값 제거...
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].debounce(function (searchWord, queIdx) {
          focusWord.call(this, queIdx, searchWord);
          this.queue[queIdx].$displayInput.val('');
        }, 300).call(this, this.queue[queIdx].$displayInput.val(), queIdx);
      }
    },
    'keyDown': function (queIdx, e) {
      if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.DOWN) {
        focusMove.call(this, queIdx, 1);
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      } else if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.UP) {
        focusMove.call(this, queIdx, -1);
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      }
    },
    'blur': function (queIdx, e) {},
    'selectChange': function (queIdx, e) {
      this.val(queIdx, this.queue[queIdx].$select.val(), true);
    }
  };

  let item = this.queue[queIdx],
      data = {};

  // find selected
  item.selected = [];
  if (!item.options) item.options = [];
  item.options.forEach(n => {
    if (n[this.config.columnKeys.optionSelected]) item.selected.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, n));
  });

  if (!item.$display) {
    /// 템플릿에 전달할 오브젝트 선언
    data.instanceId = this.instanceId;
    data.id = item.id;
    data.name = item.name;
    data.theme = item.theme;
    data.tabIndex = item.tabIndex;
    data.multiple = item.multiple;
    data.reset = item.reset;
    data.height = item.height;
    data.label = getLabel.call(this, queIdx);

    item.$display = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.display.call(this), data));
    //item.$display.css({height: item.height});
    item.$displayLabel = item.$display.find('[data-ax6ui-select-display="label"]');

    if (item.$target.find("select").get(0)) {
      item.$select = item.$target.find("select");
      // select 속성만 변경
      item.$select.attr("tabindex", "-1").css({ height: data.height });

      if (data.name) {
        item.$select.attr("name", "name");
      }
      if (data.multiple) {
        item.$select.attr("multiple", "multiple");
      }
    } else {
      item.$select = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.select.call(this), data));
      item.$target.append(item.$select);
      // select append
    }

    item.$target.append(item.$display);
    item.$displayInput = item.$display.find('[data-ax6ui-select-display="input"]'); // 사용자 입력값을 받기위한 숨음 입력필드
    item.options = syncSelectOptions.call(this, queIdx, item.options);

    alignSelectDisplay.call(this);

    item.$displayInput.off("blur.ax6ui-select").on("blur.ax6ui-select", selectEvent.blur.bind(this, queIdx)).off('keyup.ax6ui-select').on('keyup.ax6ui-select', selectEvent.keyUp.bind(this, queIdx)).off("keydown.ax6ui-select").on("keydown.ax6ui-select", selectEvent.keyDown.bind(this, queIdx));
  } else {
    item.$displayLabel.html(getLabel.call(this, queIdx));
    item.options = syncSelectOptions.call(this, queIdx, item.options);

    alignSelectDisplay.call(this);
  }

  item.$display.off('click.ax6ui-select').on('click.ax6ui-select', selectEvent.click.bind(this, queIdx)).off('keyup.ax6ui-select').on('keyup.ax6ui-select', selectEvent.keyUp.bind(this, queIdx));

  // select 태그에 대한 change 이벤트 감시
  item.$select.off('change.ax6ui-select').on('change.ax6ui-select', selectEvent.selectChange.bind(this, queIdx));

  data = null;
  item = null;
  queIdx = null;
  return this;
};
const syncSelectOptions = function (queIdx, options) {
  const setSelected = function (queIdx, O) {
    if (!O) {
      this.queue[queIdx].selected = [];
    } else {
      if (this.queue[queIdx].multiple) this.queue[queIdx].selected.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, O));else this.queue[queIdx].selected[0] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, O);
    }
  };

  let item = this.queue[queIdx],
      po,
      elementOptions,
      newOptions,
      focusIndex = 0;

  setSelected.call(this, queIdx, false); // item.selected 초기화

  if (options) {
    item.options = options;
    item.indexedOptions = [];

    // select options 태그 생성
    po = [];
    item.options.forEach((O, OIndex) => {
      if (O.optgroup) {

        O['@gindex'] = OIndex;
        O.options.forEach((OO, OOIndex) => {
          OO['@index'] = OOIndex;
          OO['@findex'] = focusIndex;
          po.push('<option value="' + OO[item.columnKeys.optionValue] + '" ' + (OO[item.columnKeys.optionSelected] ? ' selected="selected"' : '') + '>' + OO[item.columnKeys.optionText] + '</option>');
          if (OO[item.columnKeys.optionSelected]) {
            setSelected.call(this, queIdx, OO);
          }

          item.indexedOptions.push({
            '@findex': focusIndex, value: OO[item.columnKeys.optionValue], text: OO[item.columnKeys.optionText]
          });
          focusIndex++;
        });
      } else {
        O['@index'] = OIndex;
        O['@findex'] = focusIndex;
        po.push('<option value="' + O[item.columnKeys.optionValue] + '" ' + (O[item.columnKeys.optionSelected] ? ' selected="selected"' : '') + '>' + O[item.columnKeys.optionText] + '</option>');
        if (O[item.columnKeys.optionSelected]) {
          setSelected.call(this, queIdx, O);
        }

        item.indexedOptions.push({
          '@findex': focusIndex, value: O[item.columnKeys.optionValue], text: O[item.columnKeys.optionText]
        });
        focusIndex++;
      }
    });
    item.optionItemLength = focusIndex;
    item.$select.html(po.join(''));
  } else {
    /// select > options 태그로 스크립트 options를 만들어주는 역할
    elementOptions = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].toArray(item.$select.get(0).options);
    // select option 스크립트 생성
    newOptions = [];
    elementOptions.forEach((O, OIndex) => {
      let option = {};

      option[item.columnKeys.optionValue] = O.value;
      option[item.columnKeys.optionText] = O.text;
      option[item.columnKeys.optionSelected] = O.selected;
      option['@index'] = OIndex;
      option['@findex'] = OIndex;
      if (O.selected) setSelected.call(this, queIdx, option);
      newOptions.push(option);

      option = null;
    });
    item.options = newOptions;
    item.indexedOptions = newOptions;
  }

  if (!item.multiple && item.selected.length == 0 && item.options && item.options[0]) {
    if (item.options[0].optgroup) {
      item.options[0].options[0][item.columnKeys.optionSelected] = true;
      item.selected.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, item.options[0].options[0]));
    } else {
      item.options[0][item.columnKeys.optionSelected] = true;
      item.selected.push(__WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, item.options[0]));
    }
  }

  po = null;
  elementOptions = null;
  newOptions = null;
  return item.options;
};
const getQueIdx = function (boundID) {
  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(boundID)) {
    boundID = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(boundID).data("data-ax6ui-select-id");
  }
  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(boundID)) {
    console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-select", "402", "getQueIdx"));
    return;
  }
  return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(this.queue, function () {
    return this.id == boundID;
  });
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UISelect extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme='default']
     * @param [config.animateTime=100]
     * @param [config.height=34]
     * @param [config.lang] - 메세지들
     * @param [config.lang.noSelected='']
     * @param [config.lang.noOptions='no options']
     * @param [config.lang.loading='now loading..']
     * @param [config.lang.multipleLabel='"{{label}}"외 {{length}}건']
     * @param [config.columnKeys] - 내부에서 사용 JSON key 정의
     * @param [config.columnKeys.optionValue='value']
     * @param [config.columnKeys.optionText='text']
     * @param [config.columnKeys.optionSelected='selected']
     */
    this.config = {
      theme: 'default',
      animateTime: 100,
      height: 34,
      lang: {
        noSelected: '',
        noOptions: 'no options',
        loading: 'now loading..',
        multipleLabel: '"{{label}}"외 {{length}}건'
      },
      columnKeys: {
        optionValue: 'value',
        optionText: 'text',
        optionSelected: 'selected'
      }
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * bind를 통해 연결된 select가 저장되는 변수
     * @member {Array}
     */
    this.queue = [];
    /**
     * @member {Object}
     */
    this.activeSelectOptionGroup = null;
    /**
     * @member {Number}
     */
    this.activeSelectQueueIndex = -1;
    /**
     * @member {Object}
     */
    this.openTimer = null;
    /**
     * @member {Object}
     */
    this.closeTimer = null;
    /**
     * @member {Function}
     */
    this.waitOptionsCallback = null;
    /**
     * @member {Object}
     */
    this.keyUpTimer = null;
    /**
     * @member {Object}
     */
    this.xvar = {};

    this.init();
  }

  /**
   * @method
   * @param config
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;
    this.onChange = this.config.onChange;
    delete this.config.onChange;

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;

    // throttledResize
    $window.on("resize.ax6ui-select-display-" + this.instanceId, __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].throttle(function (e) {
      alignSelectDisplay.call(this, e || window.event);
      alignSelectOptionGroup.call(this);
    }, 100).bind(this));
  }

  /**
   * @method
   * @param item
   * @return {AX6UISelect}
   */
  bind(item) {
    let queIdx;
    item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, item);

    if (!item.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-select", "401", "bind"));
      return this;
    }
    item.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.target);

    if (!item.id) item.id = item.$target.data("data-ax6ui-select-id");
    if (!item.id) {
      item.id = 'ax6ui-select-' + __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */].getInstanceId();
      item.$target.data("data-ax6ui-select-id", item.id);
    }
    item.name = item.$target.attr("data-ax6ui-select");

    if (item.options) {
      item.options = JSON.parse(JSON.stringify(item.options));
    }

    // target attribute data
    (function (data) {
      if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isObject(data) && !data.error) {
        item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, item, data);
      }
    })(__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].parseJson(item.$target.attr("data-ax6ui-select-config"), true));

    queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(this.queue, function () {
      return this.id == item.id;
    });

    if (queIdx === -1) {
      this.queue.push(item);
      bindSelectTarget.call(this, this.queue.length - 1);
    } else {
      this.queue[queIdx].selected = [];
      this.queue[queIdx].options = item.options;
      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.queue[queIdx], item);
      bindSelectTarget.call(this, queIdx);
    }

    queIdx = null;
    return this;
  }

  /**
   * @method
   * @param boundID
   * @param tryCount
   * @return {AX6UISelect}
   */
  open(boundID, tryCount) {
    const onExpand = function (item) {
      item.onExpand.call({
        self: this,
        item: item
      }, O => {
        if (this.waitOptionsCallback) {
          let data = {};
          let item = this.queue[this.activeSelectQueueIndex];

          /// 현재 selected 검증후 처리
          (function (item, O) {
            let optionsMap = {};
            O.options.forEach((_O, _OIndex) => {
              _O["@index"] = _OIndex;
              optionsMap[_O[item.columnKeys.optionValue]] = _O;
            });
            if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(item.selected)) {
              item.selected.forEach(_O => {
                if (optionsMap[_O[item.columnKeys.optionValue]]) {
                  O.options[optionsMap[_O[item.columnKeys.optionValue]]["@index"]][item.columnKeys.optionSelected] = true;
                }
              });
            }
          })(item, O);

          item.$displayLabel.html(getLabel.call(this, this.activeSelectQueueIndex));
          item.options = syncSelectOptions.call(this, this.activeSelectQueueIndex, O.options);

          alignSelectDisplay.call(this);

          /// 템플릿에 전달할 오브젝트 선언
          data.id = item.id;
          data.theme = item.theme;
          data.multiple = item.multiple;
          data.lang = item.lang;
          data.options = item.options;
          this.activeSelectOptionGroup.find('[data-els="content"]').html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.options.call(this, item.columnKeys), data));
        }
      });
    };
    this.waitOptionsCallback = null;

    /**
     * open select from the outside
     */
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID),
        item = this.queue[queIdx],
        data = {},
        focusTop,
        selectedOptionEl;

    if (item.$display.attr("disabled")) return this;

    if (this.openTimer) clearTimeout(this.openTimer);
    if (this.activeSelectOptionGroup) {
      if (this.activeSelectQueueIndex == queIdx) {
        return this;
      }

      if (tryCount > 2) return this;
      this.close();
      this.openTimer = setTimeout(function () {
        this.open(queIdx, (tryCount || 0) + 1);
      }.bind(this), this.config.animateTime);

      return this;
    }

    item.optionFocusIndex = -1; // optionGroup이 열리면 포커스 인덱스 초기화 -1로
    if (item.selected && item.selected.length > 0) {
      item.optionSelectedIndex = item.selected[0]["@findex"];
    }

    /// 템플릿에 전달할 오브젝트 선언
    data.id = item.id;
    data.theme = item.theme;
    data.multiple = item.multiple;

    data.lang = item.lang;
    item.$display.attr("data-select-option-group-opened", "true");

    if (item.onExpand) {
      // onExpand 인 경우 UI 대기모드 추가
      data.waitOptions = true;
    }

    data.options = item.options;
    this.activeSelectOptionGroup = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.optionGroup.call(this), data));
    this.activeSelectOptionGroup.find('[data-els="content"]').html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.options.call(this, item.columnKeys), data));
    this.activeSelectQueueIndex = queIdx;

    alignSelectOptionGroup.call(this, "append"); // alignSelectOptionGroup 에서 body append

    /// 사용자 입력으로 옵션을 검색하기 위한 시나리오
    // 옵션그룹이 활성화 되면 사용자 입력을 받기위한 input 값 초기화 및 포커스 다른 select가 닫히면서 display focus 이벤트와 충돌하는 문제가 있으므로
    // 1밀리세컨 지연후 포커스 처리. input에 포커스가 되므로 input value로 options를 검색 할 수 있게 됩니다.
    item.$displayInput.val('');

    setTimeout(() => {

      if (item.selected && item.selected.length > 0) {
        selectedOptionEl = this.activeSelectOptionGroup.find('[data-option-index="' + item.selected[0]["@index"] + '"]');
        if (selectedOptionEl.get(0)) {
          focusTop = selectedOptionEl.position().top - this.activeSelectOptionGroup.height() / 3;
          this.activeSelectOptionGroup.find('[data-els="content"]').scrollTop(focusTop);
        }
      }

      item.$displayInput.trigger("focus");

      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("keyup.ax6ui-select-" + this.instanceId, function (e) {
        e = e || window.event;
        onBodyKeyup.call(this, e);
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      }.bind(this));

      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("click.ax6ui-select-" + this.instanceId, function (e) {
        e = e || window.event;
        onBodyClick.call(this, e);
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      }.bind(this));
    }, this.config.animateTime);

    onStateChanged.call(this, item, {
      self: this,
      state: "open",
      item: item
    });

    // waitOption timer
    if (item.onExpand) {
      this.waitOptionsCallback = true;
      onExpand.call(this, item);
    }

    data = null;
    focusTop = null;
    selectedOptionEl = null;
    return this;
  }

  /**
   * @method
   * @param _item
   * @return {AX6UISelect}
   */
  update(_item) {
    this.bind(_item);
    return this;
  }

  /**
   * @method
   * @param boundID
   * @param options
   * @return {AX6UISelect}
   */
  setOptions(boundID, options) {
    let queIdx = getQueIdx.call(this, boundID);
    this.queue[queIdx].selected = [];
    this.queue[queIdx].options = options;
    bindSelectTarget.call(this, queIdx);
    return this;
  }

  /**
   * @method
   * @param boundID
   * @param value
   * @param selected
   * @param internal
   * @return {*}
   */
  val(boundID, value, selected, internal) {
    const getSelected = function (_item, o, selected) {
      if (typeof selected === "undefined") {
        return _item.multiple ? !o : true;
      } else {
        return selected;
      }
    },
          clearSelected = function (queIdx) {
      this.queue[queIdx].options.forEach(n => {
        if (n.optgroup) {
          n.options.forEach(nn => {
            nn.selected = false;
          });
        } else {
          n.selected = false;
        }
      });
    },
          processor = {
      'index': function (queIdx, value, selected) {
        // 클래스 내부에서 호출된 형태, 그런 이유로 옵션그룹에 대한 상태를 변경 하고 있다.
        let item = this.queue[queIdx];

        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(value.index.gindex)) {
          item.options[value.index.gindex].options[value.index.index][item.columnKeys.optionSelected] = getSelected(item, item.options[value.index.gindex].options[value.index.index][item.columnKeys.optionSelected], selected);
          this.activeSelectOptionGroup.find('[data-option-group-index="' + value.index.gindex + '"][data-option-index="' + value.index.index + '"]').attr("data-option-selected", item.options[value.index.gindex].options[value.index.index][item.columnKeys.optionSelected].toString());
        } else {
          item.options[value.index.index][item.columnKeys.optionSelected] = getSelected(item, item.options[value.index.index][item.columnKeys.optionSelected], selected);
          this.activeSelectOptionGroup.find('[data-option-index="' + value.index.index + '"]').attr("data-option-selected", item.options[value.index.index][item.columnKeys.optionSelected].toString());
        }

        syncSelectOptions.call(this, queIdx, item.options);
        syncLabel.call(this, queIdx);
        alignSelectOptionGroup.call(this);
      },
      'arr': function (queIdx, values, selected) {
        values.forEach(value => {
          if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(value) || __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(value)) {
            processor.value.call(this, queIdx, value, selected);
          } else {
            for (let key in processor) {
              if (value[key]) {
                processor[key].call(this, queIdx, value, selected);
                break;
              }
            }
          }
        });
      },
      'value': function (queIdx, value, selected) {
        let item = this.queue[queIdx],
            optionIndex = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(item.options, function () {
          return this[item.columnKeys.optionValue] == value;
        });
        if (optionIndex > -1) {
          item.options[optionIndex][item.columnKeys.optionSelected] = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);
        } else {
          console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-select", "501", "val"));
          return;
        }

        syncSelectOptions.call(this, queIdx, item.options);
        syncLabel.call(this, queIdx);
      },
      'text': function (queIdx, value, selected) {
        let item = this.queue[queIdx],
            optionIndex = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(item.options, function () {
          return this[item.columnKeys.optionText] == value;
        });
        if (optionIndex > -1) {
          item.options[optionIndex][item.columnKeys.optionSelected] = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);
        } else {
          console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-select", "501", "val"));
          return;
        }

        syncSelectOptions.call(this, queIdx, item.options);
        syncLabel.call(this, queIdx);
      },
      'clear': function (queIdx) {
        clearSelected.call(this, queIdx);
        syncSelectOptions.call(this, queIdx, this.queue[queIdx].options);
        syncLabel.call(this, queIdx);

        if (this.activeSelectOptionGroup) {
          this.activeSelectOptionGroup.find('[data-option-index]').attr("data-option-selected", "false");
        }
      }
    };

    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);
    if (!this.queue[queIdx]) {
      return this;
    }
    if (typeof value !== "undefined" && !this.queue[queIdx].multiple) {
      clearSelected.call(this, queIdx);
    }

    if (typeof value == "undefined") {
      return this.queue[queIdx].selected;
    } else if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(value)) {
      processor.arr.call(this, queIdx, value, selected);
    } else if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(value) || __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(value)) {
      processor.value.call(this, queIdx, value, selected);
    } else {
      if (value === null) {
        processor.clear.call(this, queIdx);
      } else {
        for (var key in processor) {
          if (value[key]) {
            processor[key].call(this, queIdx, value, selected);
            break;
          }
        }
      }
    }

    if (typeof value !== "undefined") {
      onStateChanged.call(this, this.queue[queIdx], {
        self: this,
        item: this.queue[queIdx],
        state: internal ? "changeValue" : "setValue",
        value: this.queue[queIdx].selected,
        internal: internal
      });
    }

    boundID = null;
    return this;
  }

  /**
   * @method
   * @param item
   * @return {AX6UISelect}
   */
  close(item) {
    if (this.closeTimer) clearTimeout(this.closeTimer);
    if (!this.activeSelectOptionGroup) return this;

    item = this.queue[this.activeSelectQueueIndex];
    item.optionFocusIndex = -1;

    item.$displayInput.val('').trigger("blur");
    item.$display.removeAttr("data-select-option-group-opened").trigger("focus");

    this.activeSelectOptionGroup.addClass("destroy");

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6ui-select-" + this.instanceId).off("click.ax6ui-select-" + this.instanceId).off("keyup.ax6ui-select-" + this.instanceId);

    this.closeTimer = setTimeout(() => {
      if (this.activeSelectOptionGroup) this.activeSelectOptionGroup.remove();
      this.activeSelectOptionGroup = null;
      this.activeSelectQueueIndex = -1;

      let that = {
        self: this,
        item: item,
        value: item.selected,
        state: "close"
      };

      onStateChanged.call(this, item, that);

      // waitOption timer
      if (item.onClose) {
        item.onClose.call(that);
      }
    }, this.config.animateTime);
    this.waitOptionsCallback = null;
    return this;
  }

  /**
   * @method
   * @param boundID
   * @return {AX6UISelect}
   */
  enable(boundID) {
    let queIdx = getQueIdx.call(this, boundID);
    this.queue[queIdx].$display.removeAttr("disabled");
    this.queue[queIdx].$select.removeAttr("disabled");

    onStateChanged.call(this, this.queue[queIdx], {
      self: this,
      state: "enable"
    });

    return this;
  }

  /**
   * @method
   * @param boundID
   * @return {AX6UISelect}
   */
  disable(boundID) {
    let queIdx = getQueIdx.call(this, boundID);
    this.queue[queIdx].$display.attr("disabled", "disabled");
    this.queue[queIdx].$select.attr("disabled", "disabled");

    onStateChanged.call(this, this.queue[queIdx], {
      self: this,
      state: "disable"
    });

    return this;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UISelect);

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_AX6UIGrid_page__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__AX6UIGrid_AX6UIGrid_tmpl__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid_AX6UIGrid_util__ = __webpack_require__(5);













/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let formatter = {};
let collector = {};
let ctrlKeys = {
  "33": "KEY_PAGEUP",
  "34": "KEY_PAGEDOWN",
  "35": "KEY_END",
  "36": "KEY_HOME",
  "37": "KEY_LEFT",
  "38": "KEY_UP",
  "39": "KEY_RIGHT",
  "40": "KEY_DOWN"
};
let tmpl = {};

const initGrid = function () {
  // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.

  let data = {
    instanceId: this.id
  };

  this.$target.html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(this.__tmpl.main.call(this), data));

  // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.
  this.$ = {
    "container": {
      "hidden": this.$target.find('[data-ax6grid-container="hidden"]'),
      "root": this.$target.find('[data-ax6grid-container="root"]'),
      "header": this.$target.find('[data-ax6grid-container="header"]'),
      "body": this.$target.find('[data-ax6grid-container="body"]'),
      "page": this.$target.find('[data-ax6grid-container="page"]'),
      "scroller": this.$target.find('[data-ax6grid-container="scroller"]')
    },
    "panel": {
      "aside-header": this.$target.find('[data-ax6grid-panel="aside-header"]'),
      "left-header": this.$target.find('[data-ax6grid-panel="left-header"]'),
      "header": this.$target.find('[data-ax6grid-panel="header"]'),
      "header-scroll": this.$target.find('[data-ax6grid-panel-scroll="header"]'),
      "right-header": this.$target.find('[data-ax6grid-panel="right-header"]'),
      "top-aside-body": this.$target.find('[data-ax6grid-panel="top-aside-body"]'),
      "top-left-body": this.$target.find('[data-ax6grid-panel="top-left-body"]'),
      "top-body": this.$target.find('[data-ax6grid-panel="top-body"]'),
      "top-body-scroll": this.$target.find('[data-ax6grid-panel-scroll="top-body"]'),
      "top-right-body": this.$target.find('[data-ax6grid-panel="top-right-body"]'),
      "aside-body": this.$target.find('[data-ax6grid-panel="aside-body"]'),
      "aside-body-scroll": this.$target.find('[data-ax6grid-panel-scroll="aside-body"]'),
      "left-body": this.$target.find('[data-ax6grid-panel="left-body"]'),
      "left-body-scroll": this.$target.find('[data-ax6grid-panel-scroll="left-body"]'),
      "body": this.$target.find('[data-ax6grid-panel="body"]'),
      "body-scroll": this.$target.find('[data-ax6grid-panel-scroll="body"]'),
      "right-body": this.$target.find('[data-ax6grid-panel="right-body"]'),
      "right-body-scroll": this.$target.find('[data-ax6grid-panel-scroll="right-body"]'),
      "bottom-aside-body": this.$target.find('[data-ax6grid-panel="bottom-aside-body"]'),
      "bottom-left-body": this.$target.find('[data-ax6grid-panel="bottom-left-body"]'),
      "bottom-body": this.$target.find('[data-ax6grid-panel="bottom-body"]'),
      "bottom-body-scroll": this.$target.find('[data-ax6grid-panel-scroll="bottom-body"]'),
      "bottom-right-body": this.$target.find('[data-ax6grid-panel="bottom-right-body"]')
    },
    "livePanelKeys": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)
    "scroller": {
      "vertical": this.$target.find('[data-ax6grid-scroller="vertical"]'),
      "vertical-bar": this.$target.find('[data-ax6grid-scroller="vertical-bar"]'),
      "horizontal": this.$target.find('[data-ax6grid-scroller="horizontal"]'),
      "horizontal-bar": this.$target.find('[data-ax6grid-scroller="horizontal-bar"]'),
      "corner": this.$target.find('[data-ax6grid-scroller="corner"]')
    },
    "page": {
      "navigation": this.$target.find('[data-ax6grid-page="navigation"]'),
      "status": this.$target.find('[data-ax6grid-page="status"]')
    },
    "form": {
      "clipboard": this.$target.find('[data-ax6grid-form="clipboard"]')
    },
    "resizer": {
      "vertical": this.$target.find('[data-ax6grid-resizer="vertical"]'),
      "horizontal": this.$target.find('[data-ax6grid-resizer="horizontal"]')
    }
  };

  this.$["container"]["root"].css({ height: this.config.height || this.config._height });

  return this;
};
const initColumns = function (_columns) {
  if (!__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isArray(_columns)) _columns = [];
  this.columns = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].deepCopy(_columns);
  this.headerTable = __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid_AX6UIGrid_util__["a" /* default */].makeHeaderTable.call(this, this.columns);
  this.xvar.frozenColumnIndex = this.config.frozenColumnIndex || 0;

  this.bodyRowTable = __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid_AX6UIGrid_util__["a" /* default */].makeBodyRowTable.call(this, this.columns);
  this.bodyRowMap = __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid_AX6UIGrid_util__["a" /* default */].makeBodyRowMap.call(this, this.bodyRowTable);
  // 바디에 표현될 한줄의 높이를 계산합니다.
  this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;

  let colGroupMap = {};
  for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {
    let row = this.headerTable.rows[r];
    for (let c = 0, cl = row.cols.length; c < cl; c++) {
      colGroupMap[row.cols[c].colIndex] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, row.cols[c]);
    }
  }

  this.colGroup = [];
  for (var k in colGroupMap) {
    this.colGroup.push(colGroupMap[k]);
  }

  return this;
};
const onResetColumns = function () {
  initColumns.call(this, this.config.columns);
  resetColGroupWidth.call(this);
  if (this.config.footSum) {
    initFootSum.call(this, this.config.footSum);
    this.needToPaintSum = true;
  }
  if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);
  alignGrid.call(this, true);
  __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].repaint.call(this, true);
  __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, true);
  __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
};
const resetColGroupWidth = function () {
  /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]
  let CT_WIDTH = this.$["container"]["root"].width() - (() => {
    let width = 0;
    if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;
    if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;
    width += this.config.scroller.size;
    return width;
  })(),
      totalWidth = 0,
      computedWidth,
      autoWidthColgroupIndexs = [],
      colGroup = this.colGroup,
      i,
      l;

  for (i = 0, l = colGroup.length; i < l; i++) {
    if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isNumber(colGroup[i].width)) {
      totalWidth += colGroup[i]._width = colGroup[i].width;
    } else if (colGroup[i].width === "*") {
      autoWidthColgroupIndexs.push(i);
    } else if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].right(colGroup[i].width, 1) === "%") {
      totalWidth += colGroup[i]._width = CT_WIDTH * __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].left(colGroup[i].width, "%") / 100;
    }
  }
  if (autoWidthColgroupIndexs.length > 0) {
    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;
    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {
      colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;
    }
  }
};
const initFootSum = function (_footSum) {
  if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isArray(_footSum)) {
    this.footSumTable = __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid_AX6UIGrid_util__["a" /* default */].makeFootSumTable.call(this, this.footSumColumns = _footSum);
  } else {
    this.footSumColumns = [];
    this.footSumTable = {};
  }
};
const initBodyGroup = function (_grouping) {
  let grouping = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, _grouping);
  if ("by" in grouping && "columns" in grouping) {
    this.bodyGrouping = {
      by: grouping.by,
      columns: grouping.columns
    };
    this.bodyGroupingTable = __WEBPACK_IMPORTED_MODULE_11__AX6UIGrid_AX6UIGrid_util__["a" /* default */].makeBodyGroupingTable.call(this, this.bodyGrouping.columns);
    this.sortInfo = function () {
      let sortInfo = {};
      for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {
        sortInfo[this.bodyGrouping.by[k]] = {
          orderBy: "asc",
          seq: k,
          fixed: true
        };
        for (let c = 0, cl = this.colGroup.length; c < cl; c++) {
          if (this.colGroup[c].key === this.bodyGrouping.by[k]) {
            this.colGroup[c].sort = "asc";
            this.colGroup[c].sortFixed = true;
          }
        }
      }
      return sortInfo;
    }.call(this);
  } else {
    this.config.body.grouping = false;
  }
};
const alignGrid = function (_isFirst) {
  let list = this.proxyList ? this.proxyList : this.list;
  // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지
  if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {
    return false;
  }

  if (!this.config.height) {
    this.$["container"]["root"].css({ height: this.config._height = this.$target.height() });
  }

  let CT_WIDTH = this.$["container"]["root"].width(),
      CT_HEIGHT = this.$["container"]["root"].height(),
      CT_INNER_WIDTH = CT_WIDTH,
      CT_INNER_HEIGHT = CT_HEIGHT,
      asidePanelWidth = this.config.asidePanelWidth = (() => {
    let width = 0;
    if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;
    if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;
    return width;
  })(),
      frozenPanelWidth = this.config.frozenPanelWidth = ((colGroup, endIndex) => {
    let width = 0;
    for (let i = 0, l = endIndex; i < l; i++) {
      width += colGroup[i]._width;
    }
    return width;
  })(this.colGroup, this.config.frozenColumnIndex),
      verticalScrollerWidth,
      horizontalScrollerHeight,
      bodyHeight;

  // todo : 우측 함계컬럼 너비 계산
  let rightPanelWidth = 0,
      frozenRowHeight = this.config.frozenRowIndex * this.xvar.bodyTrHeight,
      footSumHeight = this.footSumColumns.length * this.xvar.bodyTrHeight,
      headerHeight = this.config.header.display ? this.headerTable.rows.length * this.config.header.columnHeight : 0,
      pageHeight = this.config.page.display ? this.config.page.height : 0;

  {
    verticalScrollerWidth = CT_HEIGHT - headerHeight - pageHeight - footSumHeight < list.length * this.xvar.bodyTrHeight ? this.config.scroller.size : 0;
    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.
    horizontalScrollerHeight = (() => {
      let totalColGroupWidth = 0;
      // aside 빼고 너비
      // 수직 스크롤이 있으면 또 빼고 비교
      let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;
      for (let i = 0, l = this.colGroup.length; i < l; i++) {
        totalColGroupWidth += this.colGroup[i]._width;
      }
      return totalColGroupWidth > bodyWidth ? this.config.scroller.size : 0;
    })();

    if (horizontalScrollerHeight > 0) {
      verticalScrollerWidth = CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight < list.length * this.xvar.bodyTrHeight ? this.config.scroller.size : 0;
    }
  }

  // 수평 너비 결정
  CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;
  // 수직 스크롤러의 높이 결정.
  CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;

  bodyHeight = CT_INNER_HEIGHT - headerHeight;

  const panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {
    let css = {
      display: "block"
    },
        isHide = false;

    switch (hPosition) {
      case "aside":
        if (asidePanelWidth === 0) {
          isHide = true;
        } else {
          css["left"] = 0;
          css["width"] = asidePanelWidth;
        }
        break;
      case "left":
        if (this.config.frozenColumnIndex === 0) {
          isHide = true;
        } else {
          css["left"] = asidePanelWidth;
          css["width"] = frozenPanelWidth;
        }
        break;
      case "right":
        if (!this.config.rightSum) {
          isHide = true;
        } else {}
        break;
      default:
        if (containerType !== "page") {
          if (this.config.frozenColumnIndex === 0) {
            css["left"] = asidePanelWidth;
          } else {
            css["left"] = frozenPanelWidth + asidePanelWidth;
          }
          css["width"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;
        }
        break;
    }

    if (isHide) {
      panel.css({ display: "none" });
      // 프로세스 중지
      return this;
    }

    if (containerType === "body") {
      switch (vPosition) {
        case "top":
          if (this.config.frozenRowIndex == 0) {
            isHide = true;
          } else {
            css["top"] = 0;
            css["height"] = frozenRowHeight;
          }
          break;
        case "bottom":
          if (!this.config.footSum) {
            isHide = true;
          } else {
            css["top"] = bodyHeight - footSumHeight;
            css["height"] = footSumHeight; // footSum height
          }
          break;
        default:
          css["top"] = frozenRowHeight;
          css["height"] = bodyHeight - frozenRowHeight - footSumHeight;

          break;
      }
    } else if (containerType === "header") {
      css["height"] = headerHeight;
    } else if (containerType === "page") {
      if (pageHeight == 0) {
        isHide = true;
      } else {
        css["height"] = pageHeight;
      }
    }

    if (isHide) {
      panel.css({ display: "none" });
      // 프로세스 중지
      return this;
    }

    panel.css(css);
    return this;
  };
  const scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {
    let css = {
      display: "block"
    },
        isHide = false;

    switch (containerType) {
      case "vertical":
        if (scrollerWidth > 0) {
          css["width"] = scrollerWidth;
          css["height"] = CT_INNER_HEIGHT;
          css["bottom"] = scrollerHeight + pageHeight;
        } else {
          isHide = true;
        }
        break;
      case "horizontal":
        if (scrollerHeight > 0) {
          css["width"] = CT_INNER_WIDTH;
          css["height"] = scrollerHeight;
          css["right"] = scrollerWidth;
          css["bottom"] = pageHeight;
        } else {
          isHide = true;
        }
        break;
      case "corner":
        if (scrollerWidth > 0 && scrollerHeight > 0) {
          css["width"] = scrollerWidth;
          css["height"] = scrollerHeight;
          css["bottom"] = pageHeight;
        } else {
          isHide = true;
        }
        break;
    }

    if (isHide) {
      panel.css({ display: "none" });
      // 프로세스 중지
      return this;
    }

    panel.css(css);
  };

  this.$["container"]["header"].css({ height: headerHeight });
  this.$["container"]["body"].css({ height: bodyHeight });

  // 각 패널들의 크기 표시여부를 결정합니다
  panelDisplayProcess.call(this, this.$["panel"]["aside-header"], "", "aside", "header");
  panelDisplayProcess.call(this, this.$["panel"]["left-header"], "", "left", "header");
  panelDisplayProcess.call(this, this.$["panel"]["header"], "", "", "header");
  panelDisplayProcess.call(this, this.$["panel"]["right-header"], "", "right", "header");

  panelDisplayProcess.call(this, this.$["panel"]["top-aside-body"], "top", "aside", "body");
  panelDisplayProcess.call(this, this.$["panel"]["top-left-body"], "top", "left", "body");
  panelDisplayProcess.call(this, this.$["panel"]["top-body"], "top", "", "body");
  panelDisplayProcess.call(this, this.$["panel"]["top-right-body"], "top", "right", "body");

  panelDisplayProcess.call(this, this.$["panel"]["aside-body"], "", "aside", "body");
  panelDisplayProcess.call(this, this.$["panel"]["left-body"], "", "left", "body");
  panelDisplayProcess.call(this, this.$["panel"]["body"], "", "", "body");
  panelDisplayProcess.call(this, this.$["panel"]["right-body"], "", "right", "body");

  panelDisplayProcess.call(this, this.$["panel"]["bottom-aside-body"], "bottom", "aside", "body");
  panelDisplayProcess.call(this, this.$["panel"]["bottom-left-body"], "bottom", "left", "body");
  panelDisplayProcess.call(this, this.$["panel"]["bottom-body"], "bottom", "", "body");
  panelDisplayProcess.call(this, this.$["panel"]["bottom-right-body"], "bottom", "right", "body");

  scrollerDisplayProcess.call(this, this.$["scroller"]["vertical"], verticalScrollerWidth, horizontalScrollerHeight, "vertical");
  scrollerDisplayProcess.call(this, this.$["scroller"]["horizontal"], verticalScrollerWidth, horizontalScrollerHeight, "horizontal");
  scrollerDisplayProcess.call(this, this.$["scroller"]["corner"], verticalScrollerWidth, horizontalScrollerHeight, "corner");

  panelDisplayProcess.call(this, this.$["container"]["page"], "", "", "page");

  // 각 패널의 사이즈 결정
  /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.
  this.xvar.bodyHeight = this.$.panel["body"].height();
  this.xvar.bodyWidth = this.$.panel["body"].width();
  // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth

  return true;
};
const sortColumns = function (_sortInfo) {
  __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].repaint.call(this);

  if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.remoteSort)) {
    let that = { sortInfo: [] };
    for (let k in _sortInfo) {
      that.sortInfo.push({
        key: k,
        orderBy: _sortInfo[k].orderBy,
        seq: _sortInfo[k].seq
      });
    }
    that.sortInfo.sort(function (a, b) {
      return a.seq > b.seq;
    });
    this.config.remoteSort.call(that, that);
  } else {
    if (this.config.body.grouping) {
      this.list = __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].initData.call(this, __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].sort.call(this, _sortInfo, __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].clearGroupingData.call(this, this.list)));
    } else {
      this.list = __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].sort.call(this, _sortInfo, __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].clearGroupingData.call(this, this.list), { resetLineNumber: true });
    }
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, true);
    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
  }
};

/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIGrid extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {

  /**
   * @static
   * @param _formatter
   */
  static setFormatter(_formatter) {
    return formatter = Object.assign(formatter, _formatter);
  }

  /**
   * @static
   * @return {Object}
   */
  static getFormatter() {
    return formatter || {};
  }

  /**
   * @static
   * @param _collector
   * @return {collector}
   */
  static setCollector(_collector) {
    return collector = Object.assign(collector, _collector);
  }

  /**
   * @static
   * @return {collector}
   */
  static getCollector() {
    return collector || {};
  }

  /**
   * @static
   * @param _tmpl
   * @return {tmpl}
   */
  static setTmpl(_tmpl) {
    return tmpl = Object.assign(tmpl, _tmpl);
  }

  /**
   * @static
   * @return {tmpl}
   */
  static getTmpl() {
    return tmpl || {};
  }

  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param {Element} config.target
     * @param {Number} [config.frozenColumnIndex=0]
     * @param {Number} [config.frozenRowIndex=0]
     * @param {Boolean} [config.showLineNumber=false]
     * @param {Boolean} [config.showRowSelector=false]
     * @param {Boolean} [config.multipleSelect=true]
     * @param {Number} [config.columnMinWidth=100]
     * @param {Number} [config.lineNumberColumnWidth=30]
     * @param {Number} [config.rowSelectorColumnWidth=25]
     * @param {Boolean} [config.sortable=false]
     * @param {Boolean} [config.multiSort=false]
     * @param {Function} [config.remoteSort=false]
     * @param {Boolean} [config.virtualScrollY=true] - 세로축 가상스크롤 처리여부
     * @param {Boolean} [config.virtualScrollX=true] - 가로축 가상스크롤 처리여부
     * @param {Object} [config.header]
     * @param {String} [config.header.align]
     * @param {Number} [config.header.columnHeight=25]
     * @param {Number} [config.header.columnPadding=3]
     * @param {Number} [config.header.columnBorderWidth=1]
     * @param {Object} [config.body]
     * @param {Function} [config.body.onClick]
     * @param {Function} [config.body.onDBLClick]
     * @param {Function} [config.body.onDataChanged]
     * @param {Function} [config.body.onContextMenu]
     * @param {String|Array} [config.body.mergeCells=false] -
     * @param {String} [config.body.align]
     * @param {Number} [config.body.columnHeight=25]
     * @param {Number} [config.body.columnPadding=3]
     * @param {Number} [config.body.columnBorderWidth=1]
     * @param {Object} [config.body.grouping]
     * @param {Array} [config.body.grouping.by] - list grouping keys
     * @param {Array} [config.body.grouping.columns] - list grouping columns
     * @param {(String|Function)} [config.body.trStyleClass]
     * @param {Object} [config.page]
     * @param {Number} [config.page.height=25]
     * @param {Boolean} [config.page.display=true] - grid page display
     * @param {Boolean} [config.page.statusDisplay=true] - grid status display
     * @param {Number} [config.page.navigationItemCount=5]
     * @param {Object} [config.scroller]
     * @param {Number} [config.scroller.size=15]
     * @param {Number} [config.scroller.barMinSize=15]
     * @param {Number} [config.scroller.trackPadding=4]
     * @param {Object} [config.columnKeys]
     * @param {String} [config.columnKeys.selected="_SELECTED"]
     * @param {Object[]} config.columns
     * @param {String} config.columns[].key
     * @param {String} config.columns[].label
     * @param {Number} config.columns[].width
     * @param {(String|Function)} config.columns[].styleClass
     * @param {(String|Function)} config.columns[].headerStyleClass
     * @param {Boolean} config.columns[].enableFilter
     * @param {Boolean} config.columns[].sortable
     * @param {String} config.columns[].align
     * @param {(String|Function)} config.columns[].formatter
     * @param {Object} config.columns[].editor
     * @param {String} config.columns[].editor.type - text,number,money,date
     * @param {Object} config.columns[].editor.config
     * @param {Array} config.columns[].editor.updateWith
     * @param {Function} config.columns[].editor.disabled - disable editor
     * @param {Boolean} [config.columns[].multiLine=false]
     * @param {Object} [config.tree]
     * @param {Boolean} [config.tree.use=false] - Whether tree-type data is used
     * @param {Number} [config.tree.hashDigit=8]
     * @param {Number} [config.tree.indentWidth=10]
     * @param {Number} [config.tree.arrowWidth=15]
     * @param {Number} [config.tree.iconWidth=18]
     * @param {Object} [config.tree.icons]
     * @param {String} [config.tree.icons.openedArrow='▾']
     * @param {String} [config.tree.icons.collapsedArrow='▸']
     * @param {String} [config.tree.icons.groupIcon='⊚']
     * @param {String} [config.tree.icons.collapsedGroupIcon='⊚']
     * @param {String} [config.tree.icons.itemIcon='⊙']
     * @param {Object} [config.tree.columnKeys]
     * @param {String} [config.tree.columnKeys.parentKey="pid"]
     * @param {String} [config.tree.columnKeys.selfKey="id"]
     * @param {String} [config.tree.columnKeys.collapse="collapse"]
     * @param {String} [config.tree.columnKeys.hidden="hidden"]
     * @param {String} [config.tree.columnKeys.parentHash="__hp__"]
     * @param {String} [config.tree.columnKeys.selfHash="__hs__"]
     * @param {String} [config.tree.columnKeys.children="__children__"]
     * @param {String} [config.tree.columnKeys.depth="__depth__"]
     */
    this.config = {
      theme: 'default',
      animateTime: 250,
      debounceTime: 250,
      appendDebouncer: null,
      appendDebounceTimes: 0,
      appendProgressIcon: '...',
      appendProgress: false,

      // 틀고정 속성
      frozenColumnIndex: 0,
      frozenRowIndex: 0,
      showLineNumber: false,
      showRowSelector: false,
      multipleSelect: true,
      virtualScrollY: true,
      virtualScrollX: true,

      // 스크롤될 때 body 페인팅 딜레이를 주어 성능이 좋은 않은 브라우저에서 반응을 빠르게 할 때 사용하는 옵션들
      virtualScrollYCountMargin: 0,
      virtualScrollAccelerated: true,
      virtualScrollAcceleratedDelayTime: 10,

      height: 0,
      columnMinWidth: 100,
      lineNumberColumnWidth: 30,
      rowSelectorColumnWidth: 26,
      sortable: undefined,
      remoteSort: false,

      header: {
        display: true,
        align: false,
        columnHeight: 26,
        columnPadding: 3,
        columnBorderWidth: 1
      },
      body: {
        align: false,
        columnHeight: 26,
        columnPadding: 3,
        columnBorderWidth: 1,
        grouping: false,
        mergeCells: false
      },
      rightSum: false,
      footSum: false,
      page: {
        height: 25,
        display: true,
        statusDisplay: true,
        navigationItemCount: 5
      },
      scroller: {
        size: 15,
        barMinSize: 15,
        trackPadding: 4
      },
      columnKeys: {
        selected: '__selected__',
        modified: '__modified__',
        deleted: '__deleted__',
        disableSelection: '__disable_selection__'
      },
      tree: {
        use: false,
        hashDigit: 8,
        indentWidth: 10,
        arrowWidth: 15,
        iconWidth: 18,
        icons: {
          openedArrow: '▾',
          collapsedArrow: '▸',
          groupIcon: '⊚',
          collapsedGroupIcon: '⊚',
          itemIcon: '⊙'
        },
        columnKeys: {
          parentKey: "pid",
          selfKey: "id",
          collapse: "collapse",
          hidden: "hidden",
          parentHash: "__hp__",
          selfHash: "__hs__",
          children: "__children__",
          depth: "__depth__"
        }
      }
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * @member {Object}
     */
    this.xvar = {
      bodyTrHeight: 0, // 한줄의 높이
      scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)
      scrollContentHeight: 0, // 스크롤 된 내용물의 높이
      scrollTimer: null
    };

    // 그리드 데이터셋
    /**
     * @member {Array}
     */
    this.columns = []; // config.columns에서 복제된 오브젝트
    /**
     * @member {Array}
     */
    this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트
    /**
     * @member {Array}
     */
    this.footSumColumns = [];
    /**
     * @member {Object}
     */
    this.bodyGrouping = {};
    /**
     * @member {Array}
     */
    this.list = []; // 그리드의 데이터
    /**
     * @member {Array}
     */
    this.proxyList = null; // 그리드 데이터의 대리자
    /**
     * @member {Object}
     */
    this.page = null; // 그리드의 페이지 정보

    this.selectedDataIndexs = [];
    this.deletedList = [];

    /**
     * @member {Object}
     */
    this.sortInfo = {}; // 그리드의 헤더 정렬 정보
    this.focused = false;
    /**
     * @member {Object}
     */
    this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보
    /**
     * @member {Object}
     */
    this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보
    this.isInlineEditing = false;
    /**
     * @member {Object}
     */
    this.inlineEditing = {};
    /**
     * @member {Object}
     */
    this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵
    /**
     * @member {Object}
     */
    this.contextMenu = null; // contentMenu 의 인스턴스

    // header
    /**
     * @member {Object}
     */
    this.headerTable = {};
    /**
     * @member {Object}
     */
    this.leftHeaderData = {};
    /**
     * @member {Object}
     */
    this.headerData = {};
    /**
     * @member {Object}
     */
    this.rightHeaderData = {};

    // body
    /**
     * @member {Object}
     */
    this.bodyRowTable = {};
    /**
     * @member {Object}
     */
    this.leftBodyRowData = {};
    /**
     * @member {Object}
     */
    this.bodyRowData = {};
    /**
     * @member {Object}
     */
    this.rightBodyRowData = {};
    /**
     * @member {Object}
     */
    this.bodyRowMap = {};

    /**
     * @member {Object}
     */
    this.bodyGroupingTable = {};
    /**
     * @member {Object}
     */
    this.leftBodyGroupingData = {};
    /**
     * @member {Object}
     */
    this.bodyGroupingData = {};
    /**
     * @member {Object}
     */
    this.rightBodyGroupingData = {};
    /**
     * @member {Object}
     */
    this.bodyGroupingMap = {};

    // footSum
    /**
     * @member {Object}
     */
    this.footSumTable = {}; // footSum의 출력레이아웃
    /**
     * @member {Object}
     */
    this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽
    /**
     * @member {Object}
     */
    this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽
    /**
     * @member {Boolean}
     */
    this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부

    /**
     * 사용자 정의 formatter. AX6UIGrid.setFormatter 를 이용하여 확장
     * @member
     */
    this.customFormatter = AX6UIGrid.getFormatter();

    /**
     * 사용자 정의 collector. AX6UIGrid.setCollector 를 이용하여 확장
     * @member
     */
    this.customCollector = AX6UIGrid.getCollector();

    this.__tmpl = Object.assign(__WEBPACK_IMPORTED_MODULE_10__AX6UIGrid_AX6UIGrid_tmpl__["a" /* default */], AX6UIGrid.getTmpl());

    if (typeof config !== "undefined") this.init();

    return this;
  }

  /**
   * @method
   * @param config
   */
  init() {
    // 그리드의 이벤트 정의 구간
    this.onStateChanged = this.config.onStateChanged;
    this.onLoad = this.config.onLoad;

    // init 호출 여부
    this.initOnce();

    if (typeof this.config.target !== "undefined") {

      this.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.target);

      // target attribute data
      (function (data) {
        if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isObject(data) && !data.error) {
          this.config = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, data);
        }
      }).call(this, __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].parseJson(this.$target.attr("data-ax6ui-grid-config"), true));

      if (!this.config.height) {
        this.config._height = this.$target.height();
      }

      if (!this.id) this.id = this.$target.data("ax6ui-grid-id");
      if (!this.id) {
        this.id = 'ax6ui-grid-' + this.instanceId;
        this.$target.data("ax6ui-grid-id", this.id);
      }

      __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].init.call(this);

      if (this.config.tree.use) {
        // 트리라면
        this.sortInfo = {};
        this.sortInfo[this.config.tree.columnKeys.selfHash] = { orderBy: "asc", seq: 0, fixed: true };
      }

      ///========
      // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.
      initGrid.call(this);

      // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.
      initColumns.call(this, this.config.columns);
      resetColGroupWidth.call(this);

      // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리
      if (this.config.footSum) initFootSum.call(this, this.config.footSum);

      // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리
      if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);

      // 그리드의 각 요소의 크기를 맞춤니다.
      alignGrid.call(this, true);

      // columns의 데이터로 header데이터를 만들고
      __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].init.call(this);
      // header를 출력합니다.
      __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].repaint.call(this);

      // columns의 데이터로 body데이터를 만들고
      __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].init.call(this);
      // body를 출력합니다.
      __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this);

      // scroller
      __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].init.call(this);
      __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);

      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6grid-" + this.instanceId).off("keydown.ax6grid-" + this.instanceId).on("resize.ax6grid-" + this.instanceId, __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].throttle(function (e) {
        alignGrid.call(this);
        __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this); // window resize시 repaint 함수 호출
      }, 30).bind(this)).on("keydown.ax6grid-" + this.instanceId, e => {
        if (this.focused) {
          if (this.isInlineEditing) {
            if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.ESC) {
              this.keyDown("ESC", e.originalEvent);
            } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.RETURN) {
              this.keyDown("RETURN", e.originalEvent);
            } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.TAB) {
              this.keyDown("TAB", e.originalEvent);
              __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);
            } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.UP) {
              this.keyDown("RETURN", { shiftKey: true });
            } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.DOWN) {
              this.keyDown("RETURN", {});
            }
          } else {
            if (e.metaKey || e.ctrlKey) {
              if (e.which == 67) {
                // c
                self.copySelect();
              }
            } else {
              if (ctrlKeys[e.which]) {
                this.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출
                __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);
              } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.ESC) {
                if (this.focused) {
                  __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].blur.call(self);
                }
              } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.RETURN || e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.SPACE) {
                this.keyDown("RETURN", e.originalEvent);
              } else if (e.which == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.TAB) {
                //self.keyDown("RETURN", e.originalEvent);
                __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);
              } else if (Object.keys(this.focusedColumn).length) {
                this.keyDown("INLINE_EDIT", e.originalEvent);
              }
            }
          }
        }
      });

      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off("click.ax6grid-" + this.instanceId).on("click.ax6grid-" + this.instanceId, e => {
        let isPickerClick = false,
            target = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].findParentNode(e.target, function (_target) {
          if (isPickerClick = _target.getAttribute("data-ax6grid-inline-edit-picker")) {
            return true;
          }
          return _target.getAttribute("data-ax6grid-container") === "root";
        });

        if (target && target.getAttribute("data-ax6grid-instance") === this.id) {
          this.focused = true;
        } else {
          this.focused = false;
          __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].blur.call(this);
        }
      });

      // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.
      setTimeout(() => {
        if (this.onLoad) {
          this.onLoad.call({
            self: this
          });
        }
      });
    }
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * 그리드의 각 패널들의 크기를 변경된 설정에 맞추어 다시 그림
   * @method
   * @return {AX6UIGrid}
   */
  align() {
    if (alignGrid.call(this)) {
      __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this);
      __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    }
    return this;
  }

  /**
   * 그리드에 키보드 액션을 전달
   * @method
   * @param _act
   * @param _data
   * @return {AX6UIGrid}
   */
  keyDown(_act, _data) {
    const processor = {
      "KEY_UP": function () {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, "UP");
      },
      "KEY_DOWN": function () {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, "DOWN");
      },
      "KEY_LEFT": function () {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, "LEFT");
      },
      "KEY_RIGHT": function () {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, "RIGHT");
      },
      "KEY_HOME": function () {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, "HOME");
      },
      "KEY_END": function () {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, "END");
      },
      "INLINE_EDIT": function (_e) {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.active.call(this, this.focusedColumn, _e);
        if (!/[0-9a-zA-Z]/.test(_e.key)) {
          __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(_e);
        }
      },
      "ESC": function (_e) {
        __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.keydown.call(this, "ESC");
      },
      "RETURN": function (_e) {
        var activeEditLength = 0;
        for (var columnKey in this.inlineEditing) {
          activeEditLength++;

          if (!__WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.keydown.call(this, "RETURN", columnKey)) {
            return false;
            __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(_e);
          }
          // next focus
          if (activeEditLength == 1) {
            if (__WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, _e.shiftKey ? "UP" : "DOWN")) {
              __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.keydown.call(this, "RETURN");
            }
          }
        }
        if (activeEditLength == 0) {
          __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.keydown.call(this, "RETURN");
          __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(_e);
        } else {}
      },
      "TAB": function (_e) {

        var activeEditLength = 0;
        for (var columnKey in this.inlineEditing) {
          activeEditLength++;

          __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.keydown.call(this, "RETURN", columnKey, { moveFocus: true });
          // next focus
          if (activeEditLength == 1) {
            if (__WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, _e.shiftKey ? "LEFT" : "RIGHT")) {
              __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].inlineEdit.keydown.call(this, "RETURN", undefined, { moveFocus: true });
            }
          }
        }
      }
    };
    if (_act in processor) processor[_act].call(this, _data);
    return this;
  }

  /**
   * 선택된 셀을 클립보드에 복사합니다
   * @method
   * @return {*}
   */
  copySelect() {
    let copysuccess,
        $clipBoard = this.$["form"]["clipboard"],
        copyTextArray = [],
        copyText = "",
        _rowIndex,
        _colIndex,
        _dindex,
        _di = 0;

    for (let c in this.selectedColumn) {
      let _column = this.selectedColumn[c];

      if (_column) {
        if (typeof _dindex === "undefined") {
          _dindex = _column.dindex;
          _rowIndex = _column.rowIndex;
          _colIndex = _column.rowIndex;
        }

        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {
          _di++;
        }

        if (!copyTextArray[_di]) {
          copyTextArray[_di] = [];
        }
        let originalColumn = this.bodyRowMap[_column.rowIndex + "_" + _column.colIndex];
        if (originalColumn) {
          if (this.list[_column.dindex].__isGrouping) {
            copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);
          } else {
            copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);
          }
        } else {
          copyTextArray[_di].push("");
        }

        _dindex = _column.dindex;
        _rowIndex = _column.rowIndex;
      }
    }

    copyTextArray.forEach(function (r) {
      copyText += r.join('\t') + "\n";
    });

    $clipBoard.get(0).innerText = copyText;
    $clipBoard.select();

    try {
      copysuccess = document.execCommand("copy");
    } catch (e) {
      copysuccess = false;
    }
    return copysuccess;
  }

  /**
   * @method
   * @param _data
   * @return {AX6UIGrid}
   * @example
   * ```js
   * import {AX6UIGrid as Grid} from "ax6ui";
   *
   * let grid = new Grid({target: el});
   * grid.setData([
   *  {name: "Thomas"}
   * ]);
   *
   * grid.setData({
     *  list: [],
     *  page: {
     *      currentPage: 0,
     *      pageSize: 50,
     *      totalElements: 500,
     *      totalPages: 100
     *  }
     * });
   * ```
   */
  setData(_data) {
    let isFirstPaint = typeof this.xvar.paintStartRowIndex === "undefined";

    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].set.call(this, _data);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this);
    if (!isFirstPaint) __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].scrollTo.call(this, { top: 0 });

    alignGrid.call(this);
    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    __WEBPACK_IMPORTED_MODULE_9__AX6UIGrid_AX6UIGrid_page__["a" /* default */].navigationUpdate.call(this);

    isFirstPaint = null;
    return this;
  }

  /**
   * @method
   * @param _type
   * @return {*}
   * @example
   * ```js
   * import {AX6UIGrid as Grid} from "ax6ui";
   * let grid = new Grid({target: el});
   * grid.setData([]);
   *
   * grid.getList(); // return all
   * grid.getList("selected");
   * grid.getList("modified");
   * grid.getList("deleted");
   * ```
   */
  getList(_type) {
    return __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].getList.call(this, _type);
  }

  /**
   * @method
   * @param _height
   * @return {AX6UIGrid}
   * @example
   * ```js
   * grid.setHeight(height);
   * ```
   */
  setHeight(_height) {
    if (_height == "100%") {
      _height = this.$target.offsetParent().innerHeight();
    }
    this.$target.css({ height: _height });
    this.$["container"]["root"].css({ height: _height });
    alignGrid.call(this);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, "reset");
    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    return this;
  }

  /**
   * @method
   * @param _row
   * @param {Number|String} [_dindex="last"]
   * @param _options
   * @param {Boolean} [_options.sort]
   * @param {Number|String} [_options.focus] - HOME|END|[dindex]
   * @return {AX6UIGrid}
   * @example
   * ```js
   * grid.addRow($.extend({}, {...}), "first");
   * grid.addRow($.extend({}, {...}), "last", {focus: "END"});
   * grid.addRow($.extend({}, {...}), "last", {focus: "HOME"});
   * grid.addRow($.extend({}, {...}), "last", {focus: 10});
   * ```
   */
  addRow(_row, _dindex, _options) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].add.call(this, _row, _dindex, _options);
    alignGrid.call(this);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, "reset");
    if (_options && _options.focus) {
      __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, _options.focus);
    }
    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    return this;
  }

  /**
   * @method
   * @param _list
   * @return {AX6UIGrid}
   * @example
   * ```js
   * grid.appendToList([{},{},{}]);
   * grid.appendToList([{},{},{}]);
   * ```
   */
  appendToList(_list) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].append.call(this, _list, function () {
      alignGrid.call(this);
      __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this);
      __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    }.bind(this));
    return this;
  }

  /**
   * @method
   * @param {Number|String} [_dindex=last]
   * @return {AX6UIGrid}
   * @example
   * ```js
   * grid.removeRow();
   * grid.removeRow("first");
   * grid.removeRow("last");
   * grid.removeRow(1);
   * grid.removeRow("selected");
   * ```
   */
  removeRow(_dindex) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].remove.call(this, _dindex);
    alignGrid.call(this);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, "reset");
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, this.config.body.grouping ? "START" : "END");
    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    return this;
  }

  /**
   * @method
   * @param _row
   * @param _dindex
   * @return {AX6UIGrid}
   * @example
   * ```js
   * grid.updateRow({price: 100, amount: 100, cost: 10000}, 1);
   * ```
   */
  updateRow(_row, _dindex) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].update.call(this, _row, _dindex);
    // todo : mergeCells 옵션에 따라 예외처리
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaintRow.call(this, _dindex);
    return this;
  }

  /**
   * @method
   * @param {Number} _dindex
   * @param {Object} _updateData
   * @param {Object} [_options]
   * @param {Function} [_options.filter]
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * onDataChanged: function () {
     *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});
     * }
   *
   * onDataChanged: function () {
     *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){
     *          return this.item.type == "A";
     *      });
     * }
     * ```
     */
  updateChildRows(_dindex, _updateData, _options) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].updateChild.call(this, _dindex, _updateData, _options);
    this.xvar.paintStartRowIndex = undefined;
    this.xvar.paintStartColumnIndex = undefined;
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this);
    return this;
  }

  /**
   * @method
   * @param {Number|String} _dindex
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * grid.deleteRow("first");
   * grid.deleteRow("last");
   * grid.deleteRow(1);
   * grid.deleteRow("selected");
   * ```
   */
  deleteRow(_dindex) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].deleteRow.call(this, _dindex);
    alignGrid.call(this);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, "reset");

    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);
    return this;
  }

  /**
   * @method
   * @param _dindex
   * @param _key
   * @param _value
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * grid.setValue(0, "price", 100);
   * ```
   */
  setValue(_dindex, _key, _value) {
    let doindex;

    if (__WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].setValue.call(this, _dindex, doindex, _key, _value)) {
      let repaintCell = function (_panelName, _rows, __dindex, __doindex, __key, __value) {
        for (let r = 0, rl = _rows.length; r < rl; r++) {
          for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {
            if (_rows[r].cols[c].key == __key) {
              if (this.xvar.frozenRowIndex > __dindex) {
                __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaintCell.call(this, "top-" + _panelName, __dindex, __doindex, r, c, __value);
              } else {
                __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaintCell.call(this, _panelName + "-scroll", __dindex, __doindex, r, c, __value);
              }
            }
          }
        }
      };

      repaintCell.call(this, "left-body", this.leftBodyRowData.rows, _dindex, doindex, _key, _value);
      repaintCell.call(this, "body", this.bodyRowData.rows, _dindex, doindex, _key, _value);
    }

    return this;
  }

  /**
   * @method
   * @param {Object} _column
   * @param {Number|String} [_cindex=last]
   * @returns {AX6UIGrid}
   */
  addColumn(_column, _cindex) {
    const processor = {
      "first": function (_column) {
        this.config.columns = [].concat(_column).concat(this.config.columns);
      },
      "last": function (_column) {
        this.config.columns = this.config.columns.concat([].concat(_column));
      }
    };

    if (typeof _column === "undefined") throw '_column must not be null';
    if (typeof _cindex === "undefined") _cindex = "last";
    if (_cindex in processor) {
      processor[_cindex].call(this, _column);
    } else {
      if (!__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isNumber(_cindex)) {
        throw 'invalid argument _cindex';
      }
      if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isArray(_column)) {
        for (let _i = 0, _l = _column.length; _i < _l; _i++) {
          this.config.columns.splice(_cindex + _i, 0, _column[_i]);
        }
      } else {
        this.config.columns.splice(_cindex, 0, _column);
      }
    }
    onResetColumns.call(this); // 컬럼이 변경되었을 때.
    return this;
  }

  /**
   * @method
   * @param {Number|String} [_cindex=last]
   * @returns {AX6UIGrid}
   */
  removeColumn(_cindex) {
    const processor = {
      "first": function (_cindex) {
        this.config.columns.splice(_cindex, 1);
      },
      "last": function () {
        this.config.columns.splice(this.config.columns.length - 1, 1);
      }
    };
    if (typeof _cindex === "undefined") _cindex = "last";
    if (_cindex in processor) {
      processor[_cindex].call(this, _cindex);
    } else {
      if (!__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isNumber(_cindex)) {
        throw 'invalid argument _cindex';
      }
      //
      this.config.columns.splice(_cindex, 1);
    }
    onResetColumns.call(this); // 컬럼이 변경되었을 때.
    return this;
  }

  /**
   * @method
   * @param {Object} _column
   * @param {Number} _cindex
   * @returns {AX6UIGrid}
   */
  updateColumn(_column, _cindex) {
    if (!__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isNumber(_cindex)) {
      throw 'invalid argument _cindex';
    }
    //
    this.config.columns.splice(_cindex, 1, _column);
    onResetColumns.call(this); // 컬럼이 변경되었을 때.
    return this;
  }

  /**
   * @method
   * @param {Number} _width
   * @param {Number} _cindex
   * @returns {AX6UIGrid}
   */
  setColumnWidth(_width, _cindex) {
    this.colGroup[this.xvar.columnResizerIndex]._width = _width;
    this.needToPaintSum = true;

    // 컬럼너비 변경사항 적용.
    __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].repaint.call(this);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].repaint.call(this, true);
    __WEBPACK_IMPORTED_MODULE_8__AX6UIGrid_AX6UIGrid_scroller__["a" /* default */].resize.call(this);

    alignGrid.call(this);
    return this;
  }

  /**
   * @method
   * @returns {Object} sortInfo
   */
  getColumnSortInfo() {
    let that = { sortInfo: [] };
    for (let k in this.sortInfo) {
      that.sortInfo.push({
        key: k,
        orderBy: this.sortInfo[k].orderBy,
        seq: this.sortInfo[k].seq
      });
    }
    that.sortInfo.sort(function (a, b) {
      return a.seq > b.seq;
    });
    return that.sortInfo;
  }

  /**
   * @method
   * @param {Object} _sortInfo
   * @param {Object} _sortInfo.key
   * @param {Number} _sortInfo.key.seq - seq of sortOrder
   * @param {String} _sortInfo.key.orderBy - "desc"|"asc"
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * grid.setColumnSort({a:{seq:0, orderBy:"desc"}, b:{seq:1, orderBy:"asc"}});
   * ```
   */
  setColumnSort(_sortInfo) {
    if (typeof _sortInfo !== "undefined") {
      this.sortInfo = _sortInfo;
      __WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].applySortStatus.call(this, _sortInfo);
    }

    sortColumns.call(this, _sortInfo || this.sortInfo);
    return this;
  }

  /**
   * @method
   * @param {Number|Object} _selectObject
   * @param {Number} _selectObject.index - index of row
   * @param {Number} _selectObject.rowIndex - rowIndex of columns
   * @param {Number} _selectObject.conIndex - colIndex of columns
   * @param {Object} _options
   * @param {Boolean} _options.selectedClear
   * @param {Boolean} _options.selected
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * grid.select(0);
   * grid.select(0, {selected: true});
   * grid.select(0, {selected: false});
   * grid.select(0, {selectedClear: true});
   * ```
   */
  select(_selectObject, _options) {
    if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isNumber(_selectObject)) {
      let dindex = _selectObject;

      if (!this.config.multipleSelect) {
        this.clearSelect();
      } else {
        if (_options && _options.selectedClear) {
          this.clearSelect();
        }
      }

      __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].select.call(this, dindex, undefined, _options && _options.selected);
      __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].updateRowState.call(this, ["selected"], dindex, undefined);
    }
    return this;
  }

  /**
   * @method
   * @param _dindex
   * @return {AX6UIGrid}
   */
  clickBody(_dindex) {
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].click.call(this, _dindex);
    return this;
  }

  /**
   * @method
   * @param _dindex
   * @return {AX6UIGrid}
   */
  DBLClickBody(_dindex) {
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].dblClick.call(this, _dindex);
    return this;
  }

  /**
   * @method
   * @return {AX6UIGrid}
   */
  clearSelect() {
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].updateRowState.call(this, ["selectedClear"]);
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].clearSelect.call(this);
    return this;
  }

  /**
   * @method
   * @param {Object} _options
   * @param {Boolean} _options.selected
   * @param {Function} _options.filter
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * grid.selectAll();
   * grid.selectAll({selected: true});
   * grid.selectAll({selected: false});
   * grid.selectAll({filter: function(){
     *      return this["b"] == "A01";
     * });
     * grid.selectAll({selected: true, filter: function(){
     *      return this["b"] == "A01";
     * });
     * ```
     */
  selectAll(_options) {
    __WEBPACK_IMPORTED_MODULE_5__AX6UIGrid_AX6UIGrid_data__["a" /* default */].selectAll.call(this, _options && _options.selected, _options);
    __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].updateRowStateAll.call(this, ["selected"]);
    return this;
  }

  /**
   * @method
   * @param {String} _fileName
   * @returns {AX6UIGrid|String}
   * @example
   * ```js
   * grid.exportExcel("grid-to-excel.xls");
   * console.log(grid.exportExcel());
   * ```
   */
  exportExcel(_fileName) {
    let table = [];
    table.push('<table border="1">');
    table.push(__WEBPACK_IMPORTED_MODULE_6__AX6UIGrid_AX6UIGrid_header__["a" /* default */].getExcelString.call(this));
    table.push(__WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].getExcelString.call(this));
    table.push('</table>');

    if (typeof _fileName === "undefined") {
      return table.join('');
    } else {
      EXCEL.export.call(this, [table.join('')], _fileName);
    }

    return this;
  }

  /**
   * @method
   * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END
   * @returns {AX6UIGrid}
   * @example
   * ```js
   * grid.focus("UP");
   * grid.focus("DOWN");
   * grid.focus("HOME");
   * grid.focus("END");
   * ```
   */
  focus(_pos) {

    if (__WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, _pos)) {
      let focusedColumn;
      for (let c in this.focusedColumn) {
        focusedColumn = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.focusedColumn[c], true);
        break;
      }
      if (focusedColumn) {
        this.select(focusedColumn.dindex, { selectedClear: true });
      }
    } else {
      if (typeof this.selectedDataIndexs[0] === "undefined") {
        this.select(0);
      } else {
        let selectedIndex = this.selectedDataIndexs[0];
        const processor = {
          "UP": function () {
            if (selectedIndex > 0) {
              this.select(selectedIndex - 1, { selectedClear: true });
              __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, selectedIndex - 1);
            }
          },
          "DOWN": function () {
            if (selectedIndex < this.list.length - 1) {
              this.select(selectedIndex + 1, { selectedClear: true });
              __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, selectedIndex + 1);
            }
          },
          "HOME": function () {
            this.select(0, { selectedClear: true });
            __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, 0);
          },
          "END": function () {
            this.select(this.list.length - 1, { selectedClear: true });
            __WEBPACK_IMPORTED_MODULE_7__AX6UIGrid_AX6UIGrid_body__["a" /* default */].moveFocus.call(this, this.list.length - 1);
          }
        };

        if (_pos in processor) {
          processor[_pos].call(this);
        }
      }
    }
    return this;
  }

  /**
   * @method
   * @return {null}
   */
  destroy() {
    this.$target.empty();
    this.list = [];

    return null;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIGrid);

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__ = __webpack_require__(6);



const edit_text = {
  useReturnToSave: true,
  editMode: "popup",
  getHtml: function (_root, _columnKey, _editor, _value) {
    if (typeof _editor.attributes !== "undefined") {
      var attributesText = "";
      for (var k in _editor.attributes) {
        attributesText += ` ${k}='${_editor.attributes[k]}'`;
      }
    }
    return `<input type="text" data-ax6grid-editor="text" value="${_value}" ${attributesText}>`;
  },
  init: function (_root, _columnKey, _editor, _$parent, _value) {
    var $el;
    _$parent.append($el = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.getHtml(_root, _columnKey, _editor, _value)));
    this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);
    $el.on("blur", function () {
      __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(_root, "RETURN", _columnKey);
    });
    return $el;
  },
  bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {
    _$el.focus().select();
  }
};

const edit_money = {
  useReturnToSave: true,
  editMode: "popup",
  getHtml: function (_root, _columnKey, _editor, _value) {
    let attributesText = "";
    if (typeof _editor.attributes !== "undefined") {
      for (let k in _editor.attributes) {
        attributesText += ` ${k}='${_editor.attributes[k]}'`;
      }
    }
    return '<input type="text" data-ax6grid-editor="money" value="' + _value + '" ' + attributesText + '" />';
  },
  init: function (_root, _columnKey, _editor, _$parent, _value) {
    let $el;
    _$parent.append($el = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.getHtml(_root, _columnKey, _editor, _value)));
    this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);
    $el.on("blur", function () {
      __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(_root, "RETURN", _columnKey);
    });
    return $el;
  },
  bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {
    _$el.data("binded-ax5ui", "ax5formater");
    _$el.ax5formatter($.extend(true, {
      pattern: "money"
    }, _editor.config));
    _$el.focus().select();
  }
};

const edit_number = {
  useReturnToSave: true,
  editMode: "popup",
  getHtml: function (_root, _columnKey, _editor, _value) {
    let attributesText = "";
    if (typeof _editor.attributes !== "undefined") {
      for (let k in _editor.attributes) {
        attributesText += ` ${k}='${_editor.attributes[k]}'`;
      }
    }
    return '<input type="text" data-ax6grid-editor="number" value="' + _value + '" ' + attributesText + '" />';
  },
  init: function (_root, _columnKey, _editor, _$parent, _value) {
    var $el;
    _$parent.append($el = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.getHtml(_root, _columnKey, _editor, _value)));
    this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);
    $el.on("blur", function () {
      __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(_root, "RETURN", _columnKey);
    });
    return $el;
  },
  bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {
    _$el.data("binded-ax5ui", "ax5formater");
    _$el.ax5formatter($.extend(true, {
      pattern: "number"
    }, _editor.config));
    _$el.focus().select();
  }
};

const edit_date = {
  useReturnToSave: true,
  editMode: "popup",
  getHtml: function (_root, _columnKey, _editor, _value) {
    return '<input type="text" data-ax6grid-editor="calendar" value="' + _value + '" >';
  },
  init: function (_root, _columnKey, _editor, _$parent, _value) {
    var $el;
    _$parent.append($el = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.getHtml(_root, _columnKey, _editor, _value)));
    this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);
    return $el;
  },
  bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {
    var self = _root;
    _$el.data("binded-ax5ui", "ax5picker");

    _$el.ax5picker($.extend(true, {
      direction: "auto",
      content: {
        type: 'date',
        formatter: {
          pattern: 'date'
        }
      },
      onStateChanged: function () {
        if (this.state == "open") {
          this.self.activePicker.attr("data-ax6grid-inline-edit-picker", "date");
        } else if (this.state == "close") {
          __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(self, "RETURN", _columnKey);
        }
      }
    }, _editor.config));

    _$el.focus().select();
  }
};

const edit_select = {
  useReturnToSave: false,
  editMode: "popup",
  getHtml: function (_root, _columnKey, _editor, _value) {
    var po = [];
    po.push('<div data-ax5select="ax5grid-editor" data-ax5select-config="{}">');
    po.push('</div>');

    return po.join('');
  },
  init: function (_root, _columnKey, _editor, _$parent, _value) {
    var $el;
    _$parent.append($el = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.getHtml(_root, _columnKey, _editor, _value)));
    this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);
    return $el;
  },
  bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {
    var eConfig = {
      columnKeys: {
        optionValue: "value",
        optionText: "text",
        optionSelected: "selected"
      }
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, eConfig, _editor.config);

    eConfig.options.forEach(function (n) {
      if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;
    });

    var self = _root;
    _$el.data("binded-ax5ui", "ax5select");
    _$el.ax5select($.extend(true, {
      direction: "auto",
      columnKeys: eConfig.columnKeys,
      options: eConfig.options,
      onStateChanged: function () {
        if (this.state == "open") {
          this.self.activeSelectOptionGroup.attr("data-ax6grid-inline-edit-picker", "select");
        } else if (this.state == "changeValue") {
          __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(self, "RETURN", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);
        } else if (this.state == "close") {
          __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(self, "ESC", _columnKey);
        }
      }
    }, _editor.config));
    _$el.ax5select("open");
    _$el.ax5select("setValue", _value);
    _$el.find("a").focus();
  }
};

const edit_checkbox = {
  editMode: "inline",
  getHtml: function (_root, _editor, _value) {

    var lineHeight = _root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth;
    var checked;
    if (_editor.config && _editor.config.trueValue) {
      checked = _value == _editor.config.trueValue ? "true" : "false";
    } else {
      checked = _value == false || _value == "false" || _value < "1" ? "false" : "true";
    }

    var eConfig = {
      marginTop: 2,
      height: lineHeight - 4
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, eConfig, _editor.config);
    eConfig.marginTop = (lineHeight - eConfig.height) / 2;

    return '<div data-ax6grid-editor="checkbox" data-ax6grid-checked="' + checked + '" style="height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;"></div>';
  }
};

const edit_textarea = {
  useReturnToSave: false,
  editMode: "popup",
  _getHtml: function (_root, _columnKey, _editor, _value) {
    // init 에서 사용하게 될 HTML 태그를 만들어 줍니다.
    return `<div data-ax6grid-editor="textarea"></div>`;
  },
  _bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {
    // 위치와 크기를 구합니다.
    let offset = _$el.offset();
    let box = {
      width: _$el.width()
    };
    let editorHeight = 150;
    let buttonHeight = 30;

    // 새로운 엘리먼트 생성
    let $newDiv = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(`<div data-ax6grid-popup="textarea" style="z-index: 9999;">
    <textarea style="width:100%;height:${editorHeight - buttonHeight}px;" class="form-control">${_value}</textarea>
    <div style="height:${buttonHeight}px;padding:5px;text-align: right;">
        <button class="btn btn-default">OK</button>
    </div>
</div>`);
    let $newTextarea = $newDiv.find("textarea");
    // 엘리먼트에 CSS 적용
    $newDiv.css({
      position: "absolute",
      left: offset.left,
      top: offset.top,
      width: box.width,
      height: editorHeight
    });
    $newDiv.find("textarea");

    // 새로운 엘리먼트를 document.body에 append
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append($newDiv);
    $newTextarea.focus().select();

    $newTextarea.on("blur", function (e) {
      __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(_root, "RETURN", _columnKey, this.value);
      $newDiv.remove();
      ax5.util.stopEvent(e.originalEvent);
    });
    $newTextarea.on("keydown", function (e) {
      if (e.which == ax5.info.eventKeys.ESC) {
        __WEBPACK_IMPORTED_MODULE_1__AX6UIGrid_body__["a" /* default */].inlineEdit.deActive.call(_root, "ESC", _columnKey);
        $newDiv.remove();
        ax5.util.stopEvent(e.originalEvent);
      }
    });

    /// 값 변경
    /// BODY.inlineEdit.deActive.call(_root, "RETURN", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);
    /// 에디팅 취소
    /// BODY.inlineEdit.deActive.call(_root, "ESC", _columnKey);
  },

  init: function (_root, _columnKey, _editor, _$parent, _value) {
    // 인라인 에디팅 활성화 시작
    /**
     * _root : gridInstance
     * _columnKey : di + "_" + col.colIndex + "_" + col.rowIndex
     * _editor : col.editor
     * _$parent : 셀
     * _value : 값
     */
    let $el;
    _$parent.append($el = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this._getHtml(_root, _columnKey, _editor, _value)));
    // 셀에 HTML 컨텐츠 추가

    this._bindUI(_root, _columnKey, $el, _editor, _$parent, _value);
    // 이벤트 바인딩

    return $el;
  }
};

/* harmony default export */ __webpack_exports__["a"] = ({
  "text": edit_text,
  "money": edit_money,
  "number": edit_number,
  "date": edit_date,
  "select": edit_select,
  "checkbox": edit_checkbox,
  "textarea": edit_textarea
});

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AX6Util__ = __webpack_require__(0);


let sum = function () {
  let value = 0,
      i = this.list.length;
  while (i--) {
    if (!("__groupingList" in this.list[i])) {
      value += __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.list[i][this.key]);
    }
  }
  return value;
};

let avg = function () {
  let value = 0,
      i = this.list.length,
      listLength = 0;
  while (i--) {
    if (!("__groupingList" in this.list[i])) {
      value += __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(this.list[i][this.key]);
      listLength++;
    }
  }
  return __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].number(value / (listLength || 1), { "round": 2 });
};

/**
 * @module AX6UIGrid_collector
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  /**
   *
   */
  sum: sum,
  /**
   *
   */
  avg: avg
});

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AX6Util__ = __webpack_require__(0);


const money = function () {
  if (typeof this.value !== "undefined") {
    let val = ('' + this.value).replace(/[^0-9^\.^\-]/g, ""),
        regExpPattern = new RegExp('([0-9])([0-9][0-9][0-9][,.])'),
        arrNumber = val.split('.'),
        returnValue;

    arrNumber[0] += '.';

    do {
      arrNumber[0] = arrNumber[0].replace(regExpPattern, '$1,$2');
    } while (regExpPattern.test(arrNumber[0]));

    return arrNumber.length > 1 ? arrNumber[0] + __WEBPACK_IMPORTED_MODULE_0__AX6Util__["a" /* default */].left(arrNumber[1], 2) : arrNumber[0].split('.')[0];
  } else {
    return "";
  }
};

/* harmony default export */ __webpack_exports__["a"] = ({
  money: money
});

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const main = function () {
    return `<div data-ax6grid-container="root" data-ax6grid-instance="{{instanceId}}">
            <div data-ax6grid-container="hidden">
                <textarea data-ax6grid-form="clipboard"></textarea>
            </div>
            <div data-ax6grid-container="header">
                <div data-ax6grid-panel="aside-header"></div>
                <div data-ax6grid-panel="left-header"></div>
                <div data-ax6grid-panel="header">
                    <div data-ax6grid-panel-scroll="header"></div>
                </div>
                <div data-ax6grid-panel="right-header"></div>
            </div>
            <div data-ax6grid-container="body">
                <div data-ax6grid-panel="top-aside-body"></div>
                <div data-ax6grid-panel="top-left-body"></div>
                <div data-ax6grid-panel="top-body">
                    <div data-ax6grid-panel-scroll="top-body"></div>
                </div>
                <div data-ax6grid-panel="top-right-body"></div>
                <div data-ax6grid-panel="aside-body">
                    <div data-ax6grid-panel-scroll="aside-body"></div>
                </div>
                <div data-ax6grid-panel="left-body">
                    <div data-ax6grid-panel-scroll="left-body"></div>
                </div>
                <div data-ax6grid-panel="body">
                    <div data-ax6grid-panel-scroll="body"></div>
                </div>
                <div data-ax6grid-panel="right-body">
                  <div data-ax6grid-panel-scroll="right-body"></div>
                </div>
                <div data-ax6grid-panel="bottom-aside-body"></div>
                <div data-ax6grid-panel="bottom-left-body"></div>
                <div data-ax6grid-panel="bottom-body">
                    <div data-ax6grid-panel-scroll="bottom-body"></div>
                </div>
                <div data-ax6grid-panel="bottom-right-body"></div>
            </div>
            <div data-ax6grid-container="page">
                <div data-ax6grid-page="holder">
                    <div data-ax6grid-page="navigation"></div>
                    <div data-ax6grid-page="status"></div>
                </div>
            </div>
            <div data-ax6grid-container="scroller">
                <div data-ax6grid-scroller="vertical">
                    <div data-ax6grid-scroller="vertical-bar"></div>    
                </div>
                <div data-ax6grid-scroller="horizontal">
                    <div data-ax6grid-scroller="horizontal-bar"></div>
                </div>
                <div data-ax6grid-scroller="corner"></div>
            </div>
            <div data-ax6grid-resizer="vertical"></div>
            <div data-ax6grid-resizer="horizontal"></div>
        </div>`;
};

const page_navigation = function () {
    return `<div data-ax6grid-page-navigation="holder">
            {{#hasPage}}
            <div data-ax6grid-page-navigation="cell">    
                {{#firstIcon}}<button type="button" data-ax6grid-page-move="first">{{{firstIcon}}}</button>{{/firstIcon}}
                <button type="button" data-ax6grid-page-move="prev">{{{prevIcon}}}</button>
            </div>
            <div data-ax6grid-page-navigation="cell-paging">
                {{#@paging}}
                <button type="button" data-ax6grid-page-move="{{pageNo}}" data-ax6grid-page-selected="{{selected}}">{{pageNo}}</button>
                {{/@paging}}
            </div>
            <div data-ax6grid-page-navigation="cell">
                <button type="button" data-ax6grid-page-move="next">{{{nextIcon}}}</button>
                {{#lastIcon}}<button type="button" data-ax6grid-page-move="last">{{{lastIcon}}}</button>{{/lastIcon}}
            </div>
            {{/hasPage}}
        </div>`;
};

const page_status = function () {
    return `<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{dataRowCount}} {{#totalElements}}&nbsp; Total {{.}}{{/totalElements}}</span>`;
};

/* harmony default export */ __webpack_exports__["a"] = ({
    "main": main,
    "page_navigation": page_navigation,
    "page_status": page_status
});

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let tmpl = {
  menu(columnKeys) {
    return `
        <div data-ax6ui-menu="" class="{{theme}}" {{#width}}style="width:{{width}}px;"{{/width}}>
            <div class="ax-menu-body">
                {{#${columnKeys.items}}}
                    {{^@isMenu}}
                        {{#divide}}
                        <div class="ax-menu-item-divide" data-menu-item-index="{{@i}}"></div>
                        {{/divide}}
                        {{#html}}
                        <div class="ax-menu-item-html" data-menu-item-index="{{@i}}">{{{@html}}}</div>
                        {{/html}}
                    {{/@isMenu}}
                    {{#@isMenu}}
                    <div class="ax-menu-item" data-menu-item-depth="{{@depth}}" data-menu-item-index="{{@i}}" data-menu-item-path="{{@path}}.{{@i}}">
                        <span class="ax-menu-item-cell ax-menu-item-checkbox">
                            {{#check}}
                            <span class="item-checkbox-wrap useCheckBox" {{#checked}}data-item-checked="true"{{/checked}}></span>
                            {{/check}}
                            {{^check}}
                            <span class="item-checkbox-wrap"></span>
                            {{/check}}
                        </span>
                        {{#icon}}
                        <span class="ax-menu-item-cell ax-menu-item-icon" style="width:{{cfg.iconWidth}}px;">{{{.}}}</span>
                        {{/icon}}
                        <span class="ax-menu-item-cell ax-menu-item-label">{{{${columnKeys.label}}}}</span>
                        {{#accelerator}}
                        <span class="ax-menu-item-cell ax-menu-item-accelerator" style="width:{{cfg.acceleratorWidth}}px;"><span class="item-wrap">{{.}}</span></span>
                        {{/accelerator}}
                        {{#@hasChild}}
                        <span class="ax-menu-item-cell ax-menu-item-handle">{{{cfg.icons.arrow}}}</span>
                        {{/@hasChild}}
                    </div>
                    {{/@isMenu}}

                {{/${columnKeys.items}}}
            </div>
            <div class="ax-menu-arrow"></div>
        </div>
        `;
  },
  menubar(columnKeys) {
    return `
        <div data-ax6ui-menubar="" class="{{theme}}">
            <div class="ax-menu-body">
                {{#${columnKeys.items}}}
                    {{^@isMenu}}
                        {{#divide}}
                        <div class="ax-menu-item-divide" data-menu-item-index="{{@i}}"></div>
                        {{/divide}}
                        {{#html}}
                        <div class="ax-menu-item-html" data-menu-item-index="{{@i}}">{{{@html}}}</div>
                        {{/html}}
                    {{/@isMenu}}
                    {{#@isMenu}}
                    <div class="ax-menu-item" data-menu-item-index="{{@i}}">
                        {{#icon}}
                        <span class="ax-menu-item-cell ax-menu-item-icon" style="width:{{cfg.iconWidth}}px;">{{{.}}}</span>
                        {{/icon}}
                        <span class="ax-menu-item-cell ax-menu-item-label">{{{${columnKeys.label}}}}</span>
                    </div>
                    {{/@isMenu}}
                {{/${columnKeys.items}}}
            </div>
        </div>
        `;
  }
};

const appEventAttach = function (active, opt) {
  if (active) {
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off("click.ax5menu-" + this.instanceId).on("click.ax5menu-" + this.instanceId, clickItem.bind(this, opt));

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("keydown.ax5menu-" + this.instanceId).on("keydown.ax5menu-" + this.instanceId, function (e) {
      if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.ESC) {
        self.close();
      }
    }).off("resize.ax5menu-" + this.instanceId).on("resize.ax5menu-" + this.instanceId, function (e) {
      self.close();
    });
  } else {
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off("click.ax5menu-" + this.instanceId);
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("keydown.ax5menu-" + this.instanceId);
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax5menu-" + this.instanceId);
  }
};
const onStateChanged = function (opts, that) {
  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  this.state = that.state;
  opts = null;
  that = null;
  return true;
};
const onLoad = function (that) {
  if (this.onLoad) {
    this.onLoad.call(that, that);
  }

  that = null;
  return true;
};
const popup = function (opt, items, depth, path) {
  let self = this,
      cfg = this.config;
  let data = opt,
      $activeMenu,
      removed;

  data.theme = opt.theme || cfg.theme;
  data.cfg = {
    icons: __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, cfg.icons),
    iconWidth: opt.iconWidth || cfg.iconWidth,
    acceleratorWidth: opt.acceleratorWidth || cfg.acceleratorWidth
  };

  items.forEach(n => {
    if (n.html || n.divide) {
      n['@isMenu'] = false;
      if (n.html) {
        n['@html'] = n.html.call({
          item: n,
          config: cfg,
          opt: opt
        });
      }
    } else {
      n['@isMenu'] = true;
    }
  });

  data[cfg.columnKeys.items] = items;
  data['@depth'] = depth;
  data['@path'] = path || "root";
  data['@hasChild'] = function () {
    return this[cfg.columnKeys.items] && this[cfg.columnKeys.items].length > 0;
  };
  $activeMenu = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.menu.call(this, cfg.columnKeys), data));
  __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append($activeMenu);

  // remove queue
  removed = this.queue.splice(depth);
  removed.forEach(n => {
    n.$target.remove();
  });

  this.queue.push({
    '$target': $activeMenu,
    'data': __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, data)
  });

  $activeMenu.on('mouseover', '[data-menu-item-index]', function () {
    let depth = this.getAttribute("data-menu-item-depth"),
        index = this.getAttribute("data-menu-item-index"),
        path = this.getAttribute("data-menu-item-path"),
        $this,
        offset,
        scrollTop,
        childOpt,
        _items,
        _activeMenu;

    if (depth != null && typeof depth != "undefined") {
      _items = self.queue[depth].data[cfg.columnKeys.items][index][cfg.columnKeys.items];
      _activeMenu = self.queue[depth].$target;
      _activeMenu.find('[data-menu-item-index]').removeClass("hover");
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this).addClass("hover");

      if (_activeMenu.attr("data-selected-menu-item-index") != index) {
        _activeMenu.attr("data-selected-menu-item-index", index);

        if (_items && _items.length > 0) {

          $this = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this);
          offset = $this.offset();
          scrollTop = cfg.position == "fixed" ? __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop() : 0;
          childOpt = {
            '@parent': {
              left: offset.left,
              top: offset.top,
              width: $this.outerWidth(),
              height: $this.outerHeight()
            },
            left: offset.left + $this.outerWidth() - cfg.menuBodyPadding,
            top: offset.top - cfg.menuBodyPadding - 1 - scrollTop
          };

          childOpt = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, opt, childOpt);
          popup.call(self, childOpt, _items, Number(depth) + 1, path);
        } else {
          self.queue.splice(Number(depth) + 1).forEach(function (n) {
            n.$target.remove();
          });
        }
      }
    }

    depth = null;
    index = null;
    path = null;
    $this = null;
    offset = null;
    scrollTop = null;
    childOpt = null;
    _items = null;
    _activeMenu = null;
  });

  // mouse out
  $activeMenu.on('mouseout', '[data-menu-item-index]', function () {
    let depth = this.getAttribute("data-menu-item-depth"),
        index = this.getAttribute("data-menu-item-index"),
        path = this.getAttribute("data-menu-item-path"),
        _items;

    if (path) {
      _items = self.queue[depth].data[cfg.columnKeys.items][index][cfg.columnKeys.items];
    }
    if (_items && _items.length > 0) {} else {
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this).removeClass("hover");
    }
  });

  // is Root
  if (depth == 0) {
    if (data.direction) $activeMenu.addClass("direction-" + data.direction);
    onStateChanged.call(this, null, {
      self: this,
      items: items,
      parent: function (path) {
        if (!path) return false;
        try {
          return Function("", "return this.config.items[" + path.substring(5).replace(/\./g, '].items[') + "];").call(self);
        } catch (e) {}
      }(data['@path']),
      state: "popup"
    });
  }

  align.call(this, $activeMenu, data);
  onLoad.call(this, {
    self: this,
    items: items,
    element: $activeMenu.get(0)
  });

  data = null;
  $activeMenu = null;
  removed = null;
  opt = null;
  items = null;
  depth = null;
  path = null;

  return this;
};
const clickItem = function (opt, e) {
  let self = this,
      cfg = this.config;
  let target, item;

  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-menu-item-index")) {
      return true;
    }
  });
  if (target) {
    if (typeof opt === "undefined") opt = {};
    item = function (path) {
      if (!path) return false;
      try {
        return Function("", "return this[" + path.substring(5).replace(/\./g, '].' + cfg.columnKeys.items + '[') + "];").call(opt.items || cfg.items);
      } catch (e) {
        console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax5menu", "501", "menuItemClick"));
      } finally {
        item = null;
      }
    }(target.getAttribute("data-menu-item-path"));

    if (!item) return this;

    if (item.check) {
      (function (items) {
        let setValue = {
          'checkbox': function (value) {
            this.checked = !value;
          },
          'radio': function (value) {
            var name = this.name;
            items.forEach(function (n) {
              if (n.check && n.check.type === 'radio' && n.check.name == name) {
                n.check.checked = false;
              }
            });
            this.checked = !value;
          }
        };
        if (setValue[this.type]) setValue[this.type].call(this, this.checked);
        setValue = null;
      }).call(item.check, cfg.items);

      if (!cfg.itemClickAndClose) {
        self.queue.forEach(n => {
          n.$target.find('[data-menu-item-index]').each(function () {
            let item = n.data[cfg.columnKeys.items][this.getAttribute("data-menu-item-index")];
            if (item.check) {
              __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this).find(".item-checkbox-wrap").attr("data-item-checked", item.check.checked);
            }
            item = null;
          });
        });
      }
    }

    if (self.onClick) {
      if (self.onClick.call(item, item, opt.param)) {
        self.close();
      }
    }
    if ((!item[cfg.columnKeys.items] || item[cfg.columnKeys.items].length == 0) && cfg.itemClickAndClose) self.close();
  } else {
    self.close();
  }

  target = null;
  item = null;
  return this;
};
const align = function ($activeMenu, data) {
  let self = this,
      cfg = this.config;
  let $window = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window),
      $document = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document),
      wh = cfg.position == "fixed" ? $window.height() : $document.height(),
      ww = $window.width(),
      h = $activeMenu.outerHeight(),
      w = $activeMenu.outerWidth(),
      l = data.left,
      t = data.top,
      position = cfg.position || "fixed";

  if (l + w > ww) {
    if (data['@parent']) {
      l = data['@parent'].left - w + cfg.menuBodyPadding;
    } else {
      l = ww - w;
    }
  }

  if (t + h > wh) {
    t = wh - h;
  }

  $activeMenu.css({ left: l, top: t, position: position });

  $activeMenu = null;
  data = null;
  $window = null;
  $document = null;
  wh = null;
  ww = null;
  h = null;
  w = null;
  l = null;
  t = null;
  position = null;
  return this;
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIMenu extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme]
     * @param [config.iconWidth=22]
     * @param [config.acceleratorWidth=100]
     * @param [config.menuBodyPadding=5]
     * @param [config.offset]
     * @param [config.offset.left=0]
     * @param [config.offset.top=0]
     * @param [config.position="fixed"]
     * @param [config.animateTime=250]
     * @param [config.items]
     * @param [config.itemClickAndClose=true]
     * @param [config.columnKeys]
     * @param [config.columnKeys.label='label']
     * @param [config.columnKeys.items='items']
     * @param [config.onStateChanged]
     * @param [config.onClick]
     * @param [config.onLoad]
     *
     */
    this.config = {
      theme: "default",
      iconWidth: 22,
      acceleratorWidth: 100,
      menuBodyPadding: 5,
      offset: { left: 0, top: 0 },
      position: "fixed",
      animateTime: 250,
      items: [],
      itemClickAndClose: true,
      columnKeys: {
        label: 'label',
        items: 'items'
      }
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * @member
     */
    this.openTimer = null;
    /**
     * @member
     */
    this.closeTimer = null;
    /**
     * @member {Array}
     */
    this.queue = [];
    /**
     * @member {Object}
     */
    this.menuBar = {};
    /**
     * @member
     */
    this.state = undefined;

    if (typeof config !== "undefined") this.init();
  }

  /**
   * @method
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;
    this.onClick = this.config.onClick;
    delete this.config.onClick;
    this.onLoad = this.config.onLoad;
    delete this.config.onLoad;

    onStateChanged.call(this, null, {
      self: this,
      state: "init"
    });
    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @param {Event|Object} e - Event or Object
   * @param {Object} [opt]
   * @param {String} [opt.theme]
   * @param {Function} [opt.filter]
   * @returns {AX6UIMenu}
   */
  popup(e, opt) {
    let self = this,
        cfg = this.config;
    const getOption = {
      'event': function (e, opt) {
        e = {
          left: e.clientX,
          top: cfg.position == "fixed" ? e.clientY : e.pageY,
          width: cfg.width,
          theme: cfg.theme
        };

        e.left -= 5;
        e.top -= 5;

        if (cfg.offset) {
          if (cfg.offset.left) e.left += cfg.offset.left;
          if (cfg.offset.top) e.top += cfg.offset.top;
        }
        opt = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, e, opt);

        try {
          return opt;
        } finally {
          e = null;
          //opt = null;
        }
      },
      'object': function (e, opt) {
        e = {
          left: e.left,
          top: e.top,
          width: e.width || cfg.width,
          theme: e.theme || cfg.theme
        };

        if (cfg.offset) {
          if (cfg.offset.left) e.left += cfg.offset.left;
          if (cfg.offset.top) e.top += cfg.offset.top;
        }

        opt = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, e, opt);

        try {
          return opt;
        } finally {
          e = null;
          //opt = null;
        }
      }
    },
          updateTheme = function (theme) {
      if (theme) cfg.theme = theme;
    };

    if (!e) return this;
    opt = getOption[typeof e.clientX == "undefined" ? "object" : "event"].call(this, e, opt);
    updateTheme(opt.theme);

    let items = [].concat(cfg.items),
        filteringItem;
    opt.items = items;

    if (opt.filter) {
      filteringItem = function (_items) {
        let arr = [];
        _items.forEach(n => {
          if (n.items && n.items.length > 0) {
            n.items = filteringItem(n.items);
          }
          if (opt.filter.call(n)) {
            arr.push(n);
          }
        });
        return arr;
      };
      opt.items = items = filteringItem(items);
    }

    if (items.length) {
      appEventAttach.call(this, false);
      popup.call(this, opt, items, 0); // 0 is seq of queue

      if (this.popupEventAttachTimer) clearTimeout(this.popupEventAttachTimer);
      this.popupEventAttachTimer = setTimeout(function () {
        appEventAttach.call(this, true, opt); // 이벤트 연결
      }.bind(this), 500);
    }

    e = null;
    return this;
  }

  /**
   * @method
   * @param {Element|jQueryObject} el
   * @returns {AX6UIMenu}
   */
  attach(el, opt) {
    let self = this,
        cfg = this.config;
    const getOption = {
      'object': function (e, opt) {
        e = {
          left: e.left,
          top: e.top,
          width: e.width || cfg.width,
          theme: e.theme || cfg.theme,
          direction: e.direction || cfg.direction
        };
        opt = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, opt, e);

        try {
          return opt;
        } finally {
          e = null;
          opt = null;
        }
      }
    };

    const popUpChildMenu = function (target, opt, eType) {
      let $target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(target),
          offset = $target.offset(),
          height = $target.outerHeight(),
          index = Number(target.getAttribute("data-menu-item-index")),
          scrollTop = cfg.position == "fixed" ? __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop() : 0;

      if (cfg.items && cfg.items[index][cfg.columnKeys.items] && cfg.items[index][cfg.columnKeys.items].length) {

        if (self.menuBar.openedIndex == index) {
          if (eType == "click") self.close();
          return false;
        }

        self.menuBar.target.find('[data-menu-item-index]').removeClass("hover");
        self.menuBar.opened = true;
        self.menuBar.openedIndex = index;

        $target.attr("data-menu-item-opened", "true");
        $target.addClass("hover");

        if (cfg.offset) {
          if (cfg.offset.left) offset.left += cfg.offset.left;
          if (cfg.offset.top) offset.top += cfg.offset.top;
        }

        opt = getOption["object"].call(this, { left: offset.left, top: offset.top + height - scrollTop }, opt);

        popup.call(self, opt, cfg.items[index][cfg.columnKeys.items], 0, 'root.' + target.getAttribute("data-menu-item-index")); // 0 is seq of queue
        appEventAttach.call(self, true, {}); // 이벤트 연결
      }

      target = null;
      opt = null;
      $target = null;
      offset = null;
      height = null;
      index = null;
      scrollTop = null;
    };
    const clickParentMenu = function (target, opt, eType) {
      let $target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(target),
          offset = $target.offset(),
          height = $target.outerHeight(),
          index = Number(target.getAttribute("data-menu-item-index")),
          scrollTop = cfg.position == "fixed" ? __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop() : 0;
      if (cfg.items && (!cfg.items[index][cfg.columnKeys.items] || cfg.items[index][cfg.columnKeys.items].length == 0)) {
        if (self.onClick) {
          self.onClick.call(cfg.items[index], cfg.items[index]);
        }
      }
    };

    let data = {},
        items = cfg.items,
        $activeMenu;

    if (typeof opt === "undefined") opt = {};

    data.theme = opt.theme || cfg.theme;
    data.cfg = {
      icons: __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, cfg.icons),
      iconWidth: opt.iconWidth || cfg.iconWidth,
      acceleratorWidth: opt.acceleratorWidth || cfg.acceleratorWidth
    };

    items.forEach(n => {
      if (n.html || n.divide) {
        n['@isMenu'] = false;
        if (n.html) {
          n['@html'] = n.html.call({
            item: n,
            config: cfg,
            opt: opt
          });
        }
      } else {
        n['@isMenu'] = true;
      }
    });

    data[cfg.columnKeys.items] = items;

    $activeMenu = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.menubar.call(this, cfg.columnKeys), data));

    self.menuBar = {
      target: __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(el),
      opened: false
    };
    self.menuBar.target.html($activeMenu);

    // click, mouseover
    self.menuBar.target.on("click", function (e) {
      if (!e) return this;
      let target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
        if (target.getAttribute("data-menu-item-index")) {
          return true;
        }
      });
      if (target) {
        clickParentMenu(target, opt, "click");
        popUpChildMenu(target, opt, "click");
      }

      target = null;
    });
    self.menuBar.target.on("mouseover", function (e) {
      if (!self.menuBar.opened) return false;
      let target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
        if (target.getAttribute("data-menu-item-index")) {
          return true;
        }
      });
      if (target) popUpChildMenu(target, opt, "mouseover");

      target = null;
    });

    el = null;
    opt = null;
    data = null;
    items = null;
    $activeMenu = null;

    return this;
  }

  /**
   * @method
   * @returns {AX6UIMenu}
   */
  close() {
    let self = this,
        cfg = this.config;
    if (self.menuBar && self.menuBar.target) {
      self.menuBar.target.find('[data-menu-item-index]').removeClass("hover");
      self.menuBar.opened = false;
      self.menuBar.openedIndex = null;
    }

    appEventAttach.call(this, false); // 이벤트 제거

    this.queue.forEach(n => {
      n.$target.remove();
    });
    this.queue = [];

    onStateChanged.call(this, null, {
      self: this,
      state: "close"
    });

    return this;
  }

  /**
   * @method
   * @returns {Object} statusCheckItem
   */
  getCheckValue() {

    let checkItems = {};
    const collectItem = function (items) {
      let i = items.length;
      while (i--) {
        if (items[i].check && items[i].check.checked) {
          if (!checkItems[items[i].check.name]) checkItems[items[i].check.name] = items[i].check.value;else {
            if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(checkItems[items[i].check.name])) checkItems[items[i].check.name] = [checkItems[items[i].check.name]];
            checkItems[items[i].check.name].push(items[i].check.value);
          }
        }
        if (items[i].items && items[i].items.length > 0) collectItem(items[i].items);
      }
    };

    collectItem(this.config.items);

    try {
      return checkItems;
    } finally {
      checkItems = null;
    }
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIMenu);

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6Util_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Mustache__ = __webpack_require__(4);




/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let tmpl = {
  display(columnKeys) {
    return `
<div id="{{toastId}}" data-ax6ui-toast="" class="{{theme}}">
    {{#icon}}
    <div class="ax-toast-icon">{{{.}}}</div>
    {{/icon}}
    <div class="ax-toast-body">{{{msg}}}</div>
    {{#btns}}
    <div class="ax-toast-buttons">
        <div class="ax-button-wrap">
            {{#@each}}
            <button type="button" data-ax-toast-btn="{{@key}}" class="btn btn-{{@value.theme}}">{{{@value.label}}}</button>
            {{/@each}}
        </div>
    </div>
    {{/btns}}
    {{^btns}}
        <a class="ax-toast-close" data-ax-toast-btn="ok">{{{closeIcon}}}</a>
    {{/btns}}
    <div style="clear:both;"></div>
</div>`;
  }
};

const onStateChanged = function (opts, that) {
  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  opts = null;
  that = null;
  return true;
};
const getContent = function (toastId, opts) {
  let data = {
    toastId: toastId,
    theme: opts.theme,
    icon: opts.icon,
    msg: (opts.msg || "").replace(/\n/g, "<br/>"),
    btns: opts.btns,
    closeIcon: opts.closeIcon
  };

  try {
    return __WEBPACK_IMPORTED_MODULE_3__AX6Mustache__["a" /* default */].render(tmpl.display.call(this), data);
  } finally {
    toastId = null;
    data = null;
  }
};
const open = function (opts, callback) {
  if (this.toastSeqClear) clearTimeout(this.toastSeqClear);

  let $toastBox,
      box = {
    width: opts.width
  };

  opts.id = 'ax6ui-toast-' + this.instanceId + '-' + ++this.toastSeq;

  if (__WEBPACK_IMPORTED_MODULE_0_jqmin___default()('#' + opts.id).get(0)) return this;

  $toastBox = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(getContent(opts.id, opts));
  $toastBox.css({ width: this.$toastContainer.width() });

  if (__WEBPACK_IMPORTED_MODULE_1__AX6Util_js__["a" /* default */].left(this.config.containerPosition, '-') == 'bottom') {
    this.$toastContainer.append($toastBox);
  } else {
    this.$toastContainer.prepend($toastBox);
  }

  opts.$toastBox = $toastBox;
  this.queue.push(opts);

  onStateChanged.call(this, opts, {
    self: this,
    state: "open",
    toastId: opts.id
  });

  if (opts.toastType === "push") {
    // 자동 제거 타이머 시작
    setTimeout(() => {
      this.close(opts, callback);
    }, this.config.displayTime);

    $toastBox.on(this.config.clickEventName, '[data-ax-toast-btn]', e => {
      btnOnClick.call(this, e || window.event, opts, $toastBox, callback);
    });
  } else if (opts.toastType === "confirm") {
    $toastBox.on(this.config.clickEventName, '[data-ax-toast-btn]', e => {
      btnOnClick.call(this, e || window.event, opts, $toastBox, callback);
    });
  }

  box = null;
};
const btnOnClick = function (e, opts, $toastBox, callback, target, k) {
  target = __WEBPACK_IMPORTED_MODULE_1__AX6Util_js__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-ax-toast-btn")) {
      return true;
    }
  });

  if (target) {
    k = target.getAttribute("data-ax-toast-btn");

    let that = {
      key: k, value: opts.btns ? opts.btns[k] : k,
      toastId: opts.id,
      btn_target: target
    };

    if (opts.btns && opts.btns[k].onClick) {
      opts.btns[k].onClick.call(that, that);
    } else if (opts.toastType === "push") {
      if (callback) callback.call(that, that);
      this.close(opts, callback);
    } else if (opts.toastType === "confirm") {
      if (callback) callback.call(that, that);
      this.close(opts);
    }
  }

  e = null;
  opts = null;
  $toastBox = null;
  callback = null;
  target = null;
  k = null;
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIToast extends __WEBPACK_IMPORTED_MODULE_2__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme='default']
     * @param [config.width=300]
     * @param [config.icon='']
     * @param [config.closeIcon='']
     * @param [config.msg='']
     * @param [config.lang]
     * @param [config.lang.ok='ok']
     * @param [config.lang.cancel='cancel']
     * @param [config.displayTime=3000]
     * @param [config.animateTime=250]
     * @param [config.containerPosition='bottom-left']
     */
    this.config = {
      clickEventName: "click",
      theme: 'default',
      width: 300,
      icon: '',
      closeIcon: '',
      msg: '',
      lang: {
        "ok": "ok", "cancel": "cancel"
      },
      displayTime: 3000,
      animateTime: 250,
      containerPosition: "bottom-left",
      zIndex: 9999
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    this.$toastContainer = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()('<div data-ax6ui-toast-container="' + this.instanceId + '" data-toast-container-position=""></div>');
    this.queue = [];
    this.toastSeq = 0;
    this.toastSeqClear = null;

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$toastContainer);

    this.init();
  }

  /**
   * @method
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;

    this.$toastContainer.css({ "z-index": this.config.zIndex, width: this.config.width, "max-width": "100%" }).attr("data-toast-container-position", this.config.containerPosition);

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @param opts
   * @param callback
   * @return {AX6UIToast}
   * @example
   * ```js
   * import {AX6UIToast as Toast} from "ax6ui";
   *
   * let toast = new Toast({
     *  containerPosition: "bottom-right"
     * });
   *
   * toast.push("toast messages");
   * ```
   */
  push(opts, callback) {
    if (__WEBPACK_IMPORTED_MODULE_1__AX6Util_js__["a" /* default */].isString(opts)) {
      opts = {
        title: this.config.title,
        msg: opts
      };
    }

    opts.toastType = "push";
    opts = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, opts);
    open.call(this, opts, callback);

    opts = null;
    callback = null;
    return this;
  }

  /**
   * @method
   * @param opts
   * @param callback
   * @returns {AX6UIToast}
   * @example
   * ```js
   * import {AX6UIToast as Toast} from "ax6ui";
   *
   * let toast = new Toast({
     *  containerPosition: "bottom-right"
     * });
   *
   * toast.confirm({
     *  title: "예/아니오",
     *  msg: "당신은 개발자 입니까?",
     *  btns: {
     *      Y: {label: "예"},
     *      N: {label: "아니오"}
     *  }
     * }, function(res){
     *  console.log(res);
     * });
   * ```
   */
  confirm(opts, callback) {
    if (__WEBPACK_IMPORTED_MODULE_1__AX6Util_js__["a" /* default */].isString(opts)) {
      opts = {
        title: this.config.title,
        msg: opts
      };
    }

    opts.toastType = "confirm";
    opts = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, opts);
    if (typeof opts.btns === "undefined") {
      opts.btns = {
        ok: { label: opts.lang["ok"], theme: opts.theme }
      };
    }
    open.call(this, opts, callback);

    opts = null;
    callback = null;
    return this;
  }

  /**
   * close the toast
   * @method
   * @returns {AX6UIToast}
   * @example
   * ```
   * toast.close();
   * ```
   */
  close(opts, callback) {
    let $toastBox = opts.$toastBox;
    $toastBox.addClass(opts.toastType == "push" ? "removed" : "destroy");
    this.queue = __WEBPACK_IMPORTED_MODULE_1__AX6Util_js__["a" /* default */].filter(this.queue, function () {
      return opts.id != this.id;
    });

    setTimeout(function () {
      var that = {
        toastId: opts.id
      };

      $toastBox.remove();
      if (callback) callback.call(that, that);

      that = {
        self: this,
        state: "close",
        toastId: opts.id
      };
      onStateChanged.call(this, opts, that);

      // 3초후에도 아무 일이 없다면 완전히 제거
      if (this.queue.length === 0) {
        if (this.toastSeqClear) clearTimeout(this.toastSeqClear);
        this.toastSeqClear = setTimeout(function () {
          /// console.log("try clear seq");
          if (this.queue.length === 0) this.toastSeq = 0;
        }.bind(this), 3000);
      }

      that = null;
      opts = null;
      callback = null;
      $toastBox = null;
    }.bind(this), opts.animateTime);

    return this;
  }

}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIToast);

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let tmpl = {
  modal() {
    return ` 
<div data-ax6ui-modal="{{modalId}}" data-modal-els="root" class="{{theme}} {{fullscreen}}" style="{{styles}}">
    {{#header}}
    <div class="ax-modal-header" data-modal-els="header">
        {{{title}}}
        {{#btns}}
            <div class="ax-modal-header-addon">
            {{#@each}}
            <button tabindex="-1" data-modal-header-btn="{{@key}}" class="{{@value.theme}}">{{{@value.label}}}</button>
            {{/@each}}
            </div>
        {{/btns}}
    </div>
    {{/header}}
    <div class="ax-modal-body" data-modal-els="body">
    {{#iframe}}
        <div data-modal-els="iframe-wrap" style="-webkit-overflow-scrolling: touch; overflow: auto;position: relative;">
            <table data-modal-els="iframe-loading" style="width:100%;height:100%;"><tr><td style="text-align: center;vertical-align: middle">{{{iframeLoadingMsg}}}</td></tr></table>
            <iframe name="{{modalId}}-frame" src="" width="100%" height="100%" frameborder="0" data-modal-els="iframe" style="position: absolute;left:0;top:0;"></iframe>
        </div>
        <form name="{{modalId}}-form" data-modal-els="iframe-form">
        <input type="hidden" name="modalId" value="{{modalId}}" />
        {{#param}}
        {{#@each}}
        <input type="hidden" name="{{@key}}" value="{{@value}}" />
        {{/@each}}
        {{/param}}
        </form>
    {{/iframe}}
    {{^iframe}}
        <div data-modal-els="body-frame" style="position: absolute;left:0;top:0;width:100%;height:100%;"></div>
    {{/iframe}}
    </div>
    {{^disableResize}}
    <div data-ax6ui-modal-resizer="top"></div>
    <div data-ax6ui-modal-resizer="right"></div>
    <div data-ax6ui-modal-resizer="bottom"></div>
    <div data-ax6ui-modal-resizer="left"></div>
    <div data-ax6ui-modal-resizer="top-left"></div>
    <div data-ax6ui-modal-resizer="top-right"></div>
    <div data-ax6ui-modal-resizer="bottom-left"></div>
    <div data-ax6ui-modal-resizer="bottom-right"></div>
    {{/disableResize}}
</div>`;
  }
};
let ENM = {
  "mousedown": __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportTouch ? "touchstart" : "mousedown",
  "mousemove": __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportTouch ? "touchmove" : "mousemove",
  "mouseup": __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportTouch ? "touchend" : "mouseup"
};

const getMousePosition = function (e) {
  let mouseObj = e;
  if ('changedTouches' in e && e.changedTouches) {
    mouseObj = e.changedTouches[0];
  }
  return {
    clientX: mouseObj.clientX,
    clientY: mouseObj.clientY
  };
};
const onStateChanged = function (opts, that) {
  const eventProcessor = {
    "resize": function (that) {
      if (opts && opts.onResize) {
        opts.onResize.call(that, that);
      } else if (this.onResize) {
        this.onResize.call(that, that);
      }
    },
    "move": function () {}
  };
  if (that.state in eventProcessor) {
    eventProcessor[that.state].call(this, that);
  }

  if (opts && opts.onStateChanged) {
    opts.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }
  return true;
};
const getContent = function (modalId, opts) {
  let data = {
    modalId: modalId,
    theme: opts.theme,
    header: opts.header,
    fullScreen: opts.fullScreen ? "fullscreen" : "",
    styles: "",
    iframe: opts.iframe,
    iframeLoadingMsg: opts.iframeLoadingMsg,
    disableResize: opts.disableResize
  };

  if (opts.zIndex) {
    data.styles += "z-index:" + opts.zIndex + ";";
  }
  if (opts.absolute) {
    data.styles += "position:absolute;";
  }

  if (data.iframe && typeof data.iframe.param === "string") {
    data.iframe.param = ax5.util.param(data.iframe.param);
  }

  return __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.modal.call(this), data);
};
const open = function (opts, callback) {
  let that;

  this.modalConfig = opts;
  this.$activeModal = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(getContent.call(this, opts.id, opts));

  if (typeof callback === "undefined") {
    callback = opts.callback;
  }

  // 파트수집
  this.$ = {
    "root": this.$activeModal,
    "header": this.$activeModal.find('[data-modal-els="header"]'),
    "body": this.$activeModal.find('[data-modal-els="body"]')
  };

  if (opts.iframe) {
    this.$["iframe-wrap"] = this.$activeModal.find('[data-modal-els="iframe-wrap"]');
    this.$["iframe"] = this.$activeModal.find('[data-modal-els="iframe"]');
    this.$["iframe-form"] = this.$activeModal.find('[data-modal-els="iframe-form"]');
    this.$["iframe-loading"] = this.$activeModal.find('[data-modal-els="iframe-loading"]');
  } else {
    this.$["body-frame"] = this.$activeModal.find('[data-modal-els="body-frame"]');
  }

  __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$activeModal);
  //- position 정렬
  this.align();

  that = {
    self: this,
    id: opts.id,
    theme: opts.theme,
    width: opts.width,
    height: opts.height,
    state: "open",
    $: this.$
  };

  if (opts.iframe) {
    this.$["iframe-wrap"].css({ height: opts.height });
    this.$["iframe"].css({ height: opts.height });

    // iframe content load
    this.$["iframe-form"].attr({ "method": opts.iframe.method });
    this.$["iframe-form"].attr({ "target": opts.id + "-frame" });
    this.$["iframe-form"].attr({ "action": opts.iframe.url });
    this.$["iframe"].on("load", function () {
      that.state = "load";
      if (opts.iframeLoadingMsg) {
        this.$["iframe-loading"].hide();
      }
      onStateChanged.call(this, opts, that);
    }.bind(this));
    if (!opts.iframeLoadingMsg) {
      this.$["iframe"].show();
    }
    this.$["iframe-form"].submit();
  }

  if (callback) callback.call(that, that);

  onStateChanged.call(this, opts, that);

  // bind key event
  if (opts.closeToEsc) {
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("keydown.ax-modal", e => {
      onkeyup.call(this, e || window.event);
    });
  }

  __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("resize.ax-modal", e => {
    this.align(null, e || window.event);
  });

  this.$.header.off(ENM["mousedown"]).off("dragstart").on(ENM["mousedown"], e => {
    /// 이벤트 필터링 추가 : 버튼엘리먼트로 부터 발생된 이벤트이면 moveModal 시작하지 않도록 필터링
    let isButton = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].findParentNode(e.currentTarget, function (_target) {
      if (_target.getAttribute("data-modal-header-btn")) {
        return true;
      }
    });

    if (!opts.isFullScreen && !isButton && opts.disableDrag != true) {
      this.mousePosition = getMousePosition(e);
      moveModal.on.call(this);
    }
    if (isButton) {
      btnOnClick.call(this, e || window.event, opts);
    }
  }).on("dragstart", e => {
    __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e.originalEvent);
    return false;
  });

  this.$activeModal.off(ENM["mousedown"]).off("dragstart").on(ENM["mousedown"], "[data-ax6ui-modal-resizer]", e => {
    if (opts.disableDrag || opts.isFullScreen) return false;
    this.mousePosition = getMousePosition(e);
    resizeModal.on.call(this, e.currentTarget.getAttribute("data-ax6ui-modal-resizer"));
  }).on("dragstart", e => {
    __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e.originalEvent);
    return false;
  });
};
const btnOnClick = function (e, opts, callback, target, k) {
  let that;
  if (e.srcElement) e.target = e.srcElement;

  target = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-modal-header-btn")) {
      return true;
    }
  });

  if (target) {
    k = target.getAttribute("data-modal-header-btn");

    that = {
      self: this,
      key: k, value: opts.header.btns[k],
      dialogId: opts.id,
      btnTarget: target
    };

    if (opts.header.btns[k].onClick) {
      opts.header.btns[k].onClick.call(that, that);
    }
  }

  that = null;
  opts = null;
  callback = null;
  target = null;
  k = null;
};
const onkeyup = function (e) {
  if (e.keyCode == __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].eventKeys.ESC) {
    this.close();
  }
};
const alignProcessor = {
  "top-left": function () {
    this.align({ left: "left", top: "top" });
  },
  "top-right": function () {
    this.align({ left: "right", top: "top" });
  },
  "bottom-left": function () {
    this.align({ left: "left", top: "bottom" });
  },
  "bottom-right": function () {
    this.align({ left: "right", top: "bottom" });
  },
  "center-middle": function () {
    this.align({ left: "center", top: "middle" });
  }
};
const moveModal = {
  "on": function () {
    let modalZIndex = this.$activeModal.css("z-index"),
        modalOffset = this.$activeModal.position(),
        modalBox = {
      width: this.$activeModal.outerWidth(), height: this.$activeModal.outerHeight()
    },
        windowBox = {
      width: __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width(),
      height: __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).height(),
      scrollLeft: this.modalConfig.absolute ? 0 : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollLeft(),
      scrollTop: this.modalConfig.absolute ? 0 : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop()
    },
        getResizerPosition = function (e) {
      this.__dx = e.clientX - this.mousePosition.clientX;
      this.__dy = e.clientY - this.mousePosition.clientY;

      if (minX > modalOffset.left + this.__dx) {
        this.__dx = -modalOffset.left;
      } else if (maxX < modalOffset.left + this.__dx) {
        this.__dx = maxX - modalOffset.left;
      }

      if (minY > modalOffset.top + this.__dy) {
        this.__dy = -modalOffset.top;
      } else if (maxY < modalOffset.top + this.__dy) {
        this.__dy = maxY - modalOffset.top;
      }

      return {
        left: modalOffset.left + this.__dx + windowBox.scrollLeft,
        top: modalOffset.top + this.__dy + windowBox.scrollTop
      };
    };

    let minX = 0,
        maxX = windowBox.width - modalBox.width,
        minY = 0,
        maxY = windowBox.height - modalBox.height;

    this.__dx = 0; // 변화량 X
    this.__dy = 0; // 변화량 Y

    // this.$resizerBg : body 가 window보다 작을 때 문제 해결을 위한 DIV
    this.$resizerBg.css({ zIndex: modalZIndex });
    this.$resizer.css({
      left: modalOffset.left + windowBox.scrollLeft,
      top: modalOffset.top + windowBox.scrollTop,
      width: modalBox.width,
      height: modalBox.height,
      zIndex: modalZIndex + 1
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$resizerBg).append(this.$resizer);

    this.$activeModal.addClass("draged");

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).on(ENM["mousemove"] + ".ax6modal-move-" + this.instanceId, __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].throttle(function (e) {
      this.$resizer.css(getResizerPosition.call(this, e));
    }, 30).bind(this)).on(ENM["mouseup"] + ".ax6modal-move-" + this.instanceId, e => {
      moveModal.off.call(this);
    }).on("mouseleave.ax6modal-move-" + this.instanceId, e => {
      moveModal.off.call(this);
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
  },
  "off": function () {
    const setModalPosition = function () {
      let box = this.$resizer.offset();
      if (!this.modalConfig.absolute) {
        box.left -= __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollLeft();
        box.top -= __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop();
      }
      this.$activeModal.css(box);
      this.modalConfig.left = box.left;
      this.modalConfig.top = box.top;

      box = null;
    };

    this.$activeModal.removeClass("draged");
    setModalPosition.call(this);

    this.$resizer.remove();
    this.$resizer = null;
    this.$resizerBg.remove();
    this.$resizerBg = null;

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off(ENM["mousemove"] + ".ax6modal-move-" + this.instanceId).off(ENM["mouseup"] + ".ax6modal-move-" + this.instanceId).off("mouseleave.ax6modal-move-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');

    onStateChanged.call(this, this.modalConfig, {
      self: this,
      state: "move"
    });
  }
};
const resizeModal = {
  "on": function (resizerType) {
    let modalZIndex = this.$activeModal.css("z-index"),
        modalOffset = this.$activeModal.position(),
        modalBox = {
      width: this.$activeModal.outerWidth(), height: this.$activeModal.outerHeight()
    },
        windowBox = {
      width: __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width(),
      height: __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).height(),
      scrollLeft: this.modalConfig.absolute ? 0 : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollLeft(),
      scrollTop: this.modalConfig.absolute ? 0 : __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop()
    },
        resizerProcessor = {
      "top": function (e) {

        if (minHeight > modalBox.height - this.__dy) {
          this.__dy = modalBox.height - minHeight;
        }

        if (e.shiftKey) {

          if (minHeight > modalBox.height - this.__dy * 2) {
            this.__dy = (modalBox.height - minHeight) / 2;
          }

          return {
            left: modalOffset.left,
            top: modalOffset.top + this.__dy,
            width: modalBox.width,
            height: modalBox.height - this.__dy * 2
          };
        } else if (e.altKey) {

          if (minHeight > modalBox.height - this.__dy * 2) {
            this.__dy = (modalBox.height - minHeight) / 2;
          }

          return {
            left: modalOffset.left + this.__dy,
            top: modalOffset.top + this.__dy,
            width: modalBox.width - this.__dy * 2,
            height: modalBox.height - this.__dy * 2
          };
        } else {
          return {
            left: modalOffset.left,
            top: modalOffset.top + this.__dy,
            width: modalBox.width,
            height: modalBox.height - this.__dy
          };
        }
      },
      "bottom": function (e) {

        if (minHeight > modalBox.height + this.__dy) {
          this.__dy = -modalBox.height + minHeight;
        }

        if (e.shiftKey) {

          if (minHeight > modalBox.height + this.__dy * 2) {
            this.__dy = (-modalBox.height + minHeight) / 2;
          }

          return {
            left: modalOffset.left,
            top: modalOffset.top - this.__dy,
            width: modalBox.width,
            height: modalBox.height + this.__dy * 2
          };
        } else if (e.altKey) {

          if (minHeight > modalBox.height + this.__dy * 2) {
            this.__dy = (-modalBox.height + minHeight) / 2;
          }

          return {
            left: modalOffset.left - this.__dy,
            top: modalOffset.top - this.__dy,
            width: modalBox.width + this.__dy * 2,
            height: modalBox.height + this.__dy * 2
          };
        } else {
          return {
            left: modalOffset.left,
            top: modalOffset.top,
            width: modalBox.width,
            height: modalBox.height + this.__dy
          };
        }
      },
      "left": function (e) {

        if (minWidth > modalBox.width - this.__dx) {
          this.__dx = modalBox.width - minWidth;
        }

        if (e.shiftKey) {

          if (minWidth > modalBox.width - this.__dx * 2) {
            this.__dx = (modalBox.width - minWidth) / 2;
          }

          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top,
            width: modalBox.width - this.__dx * 2,
            height: modalBox.height
          };
        } else if (e.altKey) {

          if (minWidth > modalBox.width - this.__dx * 2) {
            this.__dx = (modalBox.width - minWidth) / 2;
          }

          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top + this.__dx,
            width: modalBox.width - this.__dx * 2,
            height: modalBox.height - this.__dx * 2
          };
        } else {
          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top,
            width: modalBox.width - this.__dx,
            height: modalBox.height
          };
        }
      },
      "right": function (e) {

        if (minWidth > modalBox.width + this.__dx) {
          this.__dx = -modalBox.width + minWidth;
        }

        if (e.shiftKey) {

          if (minWidth > modalBox.width + this.__dx * 2) {
            this.__dx = (-modalBox.width + minWidth) / 2;
          }

          return {
            left: modalOffset.left - this.__dx,
            top: modalOffset.top,
            width: modalBox.width + this.__dx * 2,
            height: modalBox.height
          };
        } else if (e.altKey) {

          if (minWidth > modalBox.width + this.__dx * 2) {
            this.__dx = (-modalBox.width + minWidth) / 2;
          }

          return {
            left: modalOffset.left - this.__dx,
            top: modalOffset.top - this.__dx,
            width: modalBox.width + this.__dx * 2,
            height: modalBox.height + this.__dx * 2
          };
        } else {
          return {
            left: modalOffset.left,
            top: modalOffset.top,
            width: modalBox.width + this.__dx,
            height: modalBox.height
          };
        }
      },
      "top-left": function (e) {

        if (minWidth > modalBox.width - this.__dx) {
          this.__dx = modalBox.width - minWidth;
        }

        if (minHeight > modalBox.height - this.__dy) {
          this.__dy = modalBox.height - minHeight;
        }

        if (e.shiftKey || e.altKey) {

          if (minHeight > modalBox.height - this.__dy * 2) {
            this.__dy = (modalBox.height - minHeight) / 2;
          }
          if (minWidth > modalBox.width - this.__dx * 2) {
            this.__dx = (modalBox.width - minWidth) / 2;
          }

          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top + this.__dy,
            width: modalBox.width - this.__dx * 2,
            height: modalBox.height - this.__dy * 2
          };
        } else {

          if (minHeight > modalBox.height - this.__dy * 2) {
            this.__dy = (modalBox.height - minHeight) / 2;
          }
          if (minWidth > modalBox.width - this.__dx * 2) {
            this.__dx = (modalBox.width - minWidth) / 2;
          }

          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top + this.__dy,
            width: modalBox.width - this.__dx,
            height: modalBox.height - this.__dy
          };
        }
      },
      "top-right": function (e) {

        if (minWidth > modalBox.width + this.__dx) {
          this.__dx = -modalBox.width + minWidth;
        }

        if (minHeight > modalBox.height - this.__dy) {
          this.__dy = modalBox.height - minHeight;
        }

        if (e.shiftKey || e.altKey) {

          if (minHeight > modalBox.height - this.__dy * 2) {
            this.__dy = (modalBox.height - minHeight) / 2;
          }
          if (minWidth > modalBox.width + this.__dx * 2) {
            this.__dx = (-modalBox.width + minWidth) / 2;
          }

          return {
            left: modalOffset.left - this.__dx,
            top: modalOffset.top + this.__dy,
            width: modalBox.width + this.__dx * 2,
            height: modalBox.height - this.__dy * 2
          };
        } else {
          return {
            left: modalOffset.left,
            top: modalOffset.top + this.__dy,
            width: modalBox.width + this.__dx,
            height: modalBox.height - this.__dy
          };
        }
      },
      "bottom-left": function (e) {

        if (minWidth > modalBox.width - this.__dx) {
          this.__dx = modalBox.width - minWidth;
        }

        if (minHeight > modalBox.height + this.__dy) {
          this.__dy = -modalBox.height + minHeight;
        }

        if (e.shiftKey || e.altKey) {
          if (minWidth > modalBox.width - this.__dx * 2) {
            this.__dx = (modalBox.width - minWidth) / 2;
          }
          if (minHeight > modalBox.height + this.__dy * 2) {
            this.__dy = (-modalBox.height + minHeight) / 2;
          }
          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top - this.__dy,
            width: modalBox.width - this.__dx * 2,
            height: modalBox.height + this.__dy * 2
          };
        } else {
          return {
            left: modalOffset.left + this.__dx,
            top: modalOffset.top,
            width: modalBox.width - this.__dx,
            height: modalBox.height + this.__dy
          };
        }
      },
      "bottom-right": function (e) {

        if (minWidth > modalBox.width + this.__dx) {
          this.__dx = -modalBox.width + minWidth;
        }

        if (minHeight > modalBox.height + this.__dy) {
          this.__dy = -modalBox.height + minHeight;
        }

        if (e.shiftKey || e.altKey) {
          if (minWidth > modalBox.width + this.__dx * 2) {
            this.__dx = (-modalBox.width + minWidth) / 2;
          }
          if (minHeight > modalBox.height + this.__dy * 2) {
            this.__dy = (-modalBox.height + minHeight) / 2;
          }
          return {
            left: modalOffset.left - this.__dx,
            top: modalOffset.top - this.__dy,
            width: modalBox.width + this.__dx * 2,
            height: modalBox.height + this.__dy * 2
          };
        } else {
          return {
            left: modalOffset.left,
            top: modalOffset.top,
            width: modalBox.width + this.__dx,
            height: modalBox.height + this.__dy
          };
        }
      }
    },
        getResizerPosition = function (e) {
      this.__dx = e.clientX - this.mousePosition.clientX;
      this.__dy = e.clientY - this.mousePosition.clientY;

      return resizerProcessor[resizerType](e);
    };

    if (!this.modalConfig.absolute) {
      modalOffset.left += windowBox.scrollLeft;
      modalOffset.top += windowBox.scrollTop;
    }

    let minWidth = 100,
        minHeight = 100;

    let cursorType = {
      "top": "row-resize",
      "bottom": "row-resize",
      "left": "col-resize",
      "right": "col-resize",
      "top-left": "nwse-resize",
      "top-right": "nesw-resize",
      "bottom-left": "nesw-resize",
      "bottom-right": "nwse-resize"
    };

    this.__dx = 0; // 변화량 X
    this.__dy = 0; // 변화량 Y

    // this.$resizerBg : body 가 window보다 작을 때 문제 해결을 위한 DIV
    this.$resizerBg.css({
      zIndex: modalZIndex,
      cursor: cursorType[resizerType]
    });
    this.$resizer.css({
      left: modalOffset.left,
      top: modalOffset.top,
      width: modalBox.width,
      height: modalBox.height,
      zIndex: modalZIndex + 1,
      cursor: cursorType[resizerType]
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$resizerBg).append(this.$resizer);

    this.$activeModal.addClass("draged");

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).on(ENM["mousemove"] + ".ax6modal-resize-" + this.instanceId, __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].throttle(function (e) {
      this.$resizer.css(getResizerPosition.call(e));
    }, 30).bind(this)).on(ENM["mouseup"] + ".ax6modal-resize-" + this.instanceId, e => {
      resizeModal.off.call(this);
    }).on("mouseleave.ax6modal-resize-" + this.instanceId, e => {
      resizeModal.off.call(this);
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).attr('unselectable', 'on').css('user-select', 'none').bind('selectstart', false);
  },
  "off": function () {
    let setModalPosition = function () {
      let box = this.$resizer.offset();
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(box, {
        width: this.$resizer.width(),
        height: this.$resizer.height()
      });
      if (!this.modalConfig.absolute) {
        box.left -= __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollLeft();
        box.top -= __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document).scrollTop();
      }
      this.$activeModal.css(box);

      this.modalConfig.left = box.left;
      this.modalConfig.top = box.top;
      this.modalConfig.width = box.width;
      this.modalConfig.height = box.height;
      this.$["body"].css({ height: box.height - this.modalConfig.headerHeight });
      if (this.modalConfig.iframe) {
        this.$["iframe-wrap"].css({ height: box.height - this.modalConfig.headerHeight });
        this.$["iframe"].css({ height: box.height - this.modalConfig.headerHeight });
      }

      box = null;
    };

    this.$activeModal.removeClass("draged");
    setModalPosition.call(this);

    this.$resizer.remove();
    this.$resizerBg.remove();

    onStateChanged.call(this, this.modalConfig, {
      self: this,
      state: "resize"
    });

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).off(ENM["mousemove"] + ".ax6modal-resize-" + this.instanceId).off(ENM["mouseup"] + ".ax6modal-resize-" + this.instanceId).off("mouseleave.ax6modal-resize-" + this.instanceId);

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');
  }
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIModal extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.id='ax6ui-modal-' + this.instanceId]
     * @param [config.position]
     * @param [config.position.left='cener']
     * @param [config.position.top='middle']
     * @param [config.position.margin=10]
     * @param [config.minimizePosition='bottom-right']
     * @param [config.clickEventName]
     * @param [config.theme]
     * @param [config.width=300]
     * @param [config.height=400]
     * @param [config.closeToEsc]
     * @param [config.disableDrag]
     * @param [config.disableResize]
     * @param [config.animateTime=250]
     * @param [config.iframe=false]
     */
    this.config = {
      id: 'ax6ui-modal-' + this.instanceId,
      position: {
        left: "center",
        top: "middle",
        margin: 10
      },
      minimizePosition: "bottom-right",
      clickEventName: 'ontouchstart' in document.documentElement ? "touchstart" : "click",
      theme: 'default',
      width: 300,
      height: 400,
      closeToEsc: true,
      disableDrag: false,
      disableResize: false,
      animateTime: 250,
      iframe: false
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * 열려있는 상태에서 다시 open이 되면 queue에 보관 하였다가 close후 open
     * @member {Array}
     */
    this.queue = [];
    /**
     * @member {jQueryElement}
     */
    this.$activeModal = null;
    this.$ = {};

    this.$resizerBg = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()('<div data-ax6ui-modal-resizer-background="" ondragstart="return false;"></div>');
    this.$resizer = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()('<div data-ax6ui-modal-resizer="" ondragstart="return false;"></div>');

    if (typeof config !== "undefined") this.init();
  }

  /**
   * @method
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * open the modal
   * @method
   * @returns {AX6UIModal}
   * @example
   * ```
   * modal.open();
   * modal.open({
             *  width: 500,
             *  height: 500
             * });
   * moaal.open({}, function(){
             *  console.log(this);
             * });
   * ```
   */
  open(opts, callback) {
    if (typeof opts === "undefined") {
      opts = {};
    }

    opts = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, opts);

    if (this.$activeModal) {
      opts.callback = callback;
      this.queue.push(opts);
    } else {
      open.call(this, opts, callback);
    }

    return this;
  }

  /**
   * close the modal
   * @method
   * @param _option
   * @returns {AX6UIModal}
   * @example
   * ```
   * modal.close();
   * modal.close({callback: function(){
     *  // on close event
     * });
     * // close 함수에 callback을 전달하면 정확한 close 타이밍을 캐치할 수 있습니다
     * ```
     */
  close(_option) {
    let opts, that;

    if (this.$activeModal) {
      opts = this.modalConfig;

      this.$activeModal.addClass("destroy");
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("keydown.ax-modal").off("resize.ax-modal");

      setTimeout(function () {
        // 프레임 제거
        if (opts.iframe) {
          let $iframe = this.$["iframe"]; // iframe jQuery Object
          if ($iframe) {
            let iframeObject = $iframe.get(0),
                idoc = iframeObject.contentDocument ? iframeObject.contentDocument : iframeObject.contentWindow.document;

            try {
              $(idoc.body).children().each(function () {
                $(this).remove();
              });
            } catch (e) {}
            idoc.innerHTML = "";
            $iframe.attr('src', 'about:blank').remove();

            // force garbarge collection for IE only
            window.CollectGarbage && window.CollectGarbage();
          }
        }

        if (this.$activeModal) {
          this.$activeModal.remove();
          this.$activeModal = null;
        }

        that = {
          self: this,
          id: opts.id,
          theme: opts.theme,
          width: opts.width,
          height: opts.height,
          state: "close",
          $: this.$
        };

        if (_option && __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(_option.callback)) {
          _option.callback.call(that, that);
        } else if (opts.callback && (!_option || !_option.doNotCallback)) {
          opts.callback.call(that, that);
        }

        if (opts && opts.onStateChanged) {
          opts.onStateChanged.call(that, that);
        } else if (this.onStateChanged) {
          this.onStateChanged.call(that, that);
        }

        // 열려야 할 큐가 남아 있다면 큐아이템으로 다시 open
        if (this.queue && this.queue.length) {
          open.call(this, this.queue.shift());
        }

        opts = null;
        that = null;
      }.bind(this), this.config.animateTime);
    }

    this.minimized = false; // hoksi

    return this;
  }

  /**
   * @method
   * @returns {AX6UIModal}
   */
  minimize(minimizePosition) {
    if (this.minimized !== true) {

      let opts = this.modalConfig;
      if (typeof minimizePosition === "undefined") minimizePosition = cfg.minimizePosition;

      this.minimized = true;
      this.$.body.css({ display: "none" });
      this.modalConfig.originalHeight = opts.height;
      this.modalConfig.height = 0;
      alignProcessor[minimizePosition].call(this);

      onStateChanged.call(this, opts, {
        self: this,
        state: "minimize"
      });
    }

    return this;
  }

  /**
   * @method ax5modal.restore
   * @returns {AX6UIModal}
   */
  restore() {
    let opts = this.modalConfig;
    if (this.minimized) {
      this.minimized = false;
      this.$.body.css({ display: "block" });
      this.modalConfig.height = this.modalConfig.originalHeight;
      this.modalConfig.originalHeight = undefined;

      this.align({ left: "center", top: "middle" });
      onStateChanged.call(this, opts, {
        self: this,
        state: "restore"
      });
    }
    return this;
  }

  /**
   * setCSS
   * @method ax5modal.css
   * @param {Object} css -
   * @returns {AX6UIModal}
   */
  css(css) {
    if (this.$activeModal && !this.fullScreen) {
      this.$activeModal.css(css);
      if (typeof css.width !== "undefined") {
        this.modalConfig.width = css.width;
      }
      if (typeof css.height !== "undefined") {
        this.modalConfig.height = css.height;
      }

      this.align();
    }
    return this;
  }

  /**
   * @method
   * @param _config
   * @returns {AX6UIModal}
   */
  setModalConfig(_config) {
    this.modalConfig = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.modalConfig, _config);
    this.align();
    return this;
  }

  /**
   * @method ax5modal.align
   * @param position
   * @param e
   * @returns {ax5modal}
   * @example
   * ```js
   * modal.align({left:"center", top:"middle"});
   * modal.align({left:"left", top:"top", margin: 20});
   * ```
   */
  align(position, e) {
    if (!this.$activeModal) return this;

    let opts = this.modalConfig,
        box = {
      width: opts.width,
      height: opts.height
    };

    const fullScreen = opts.isFullScreen = function (_fullScreen) {
      if (typeof _fullScreen === "undefined") {
        return false;
      } else if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(_fullScreen)) {
        return _fullScreen();
      }
    }(opts.fullScreen);

    if (fullScreen) {
      if (opts.header) this.$.header.show();
      if (opts.header) {
        opts.headerHeight = this.$.header.outerHeight();
        box.height += opts.headerHeight;
      } else {
        opts.headerHeight = 0;
      }
      box.width = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width();
      box.height = opts.height;
      box.left = 0;
      box.top = 0;
    } else {
      if (opts.header) this.$.header.show();
      if (position) {
        __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, opts.position, position);
      }

      if (opts.header) {
        opts.headerHeight = this.$.header.outerHeight();
        box.height += opts.headerHeight;
      } else {
        opts.headerHeight = 0;
      }

      //- position 정렬
      if (opts.position.left == "left") {
        box.left = opts.position.margin || 0;
      } else if (opts.position.left == "right") {
        // window.innerWidth;
        box.left = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width() - box.width - (opts.position.margin || 0);
      } else if (opts.position.left == "center") {
        box.left = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width() / 2 - box.width / 2;
      } else {
        box.left = opts.position.left || 0;
      }

      if (opts.position.top == "top") {
        box.top = opts.position.margin || 0;
      } else if (opts.position.top == "bottom") {
        box.top = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).height() - box.height - (opts.position.margin || 0);
      } else if (opts.position.top == "middle") {
        box.top = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).height() / 2 - box.height / 2;
      } else {
        box.top = opts.position.top || 0;
      }
      if (box.left < 0) box.left = 0;
      if (box.top < 0) box.top = 0;
    }

    this.$activeModal.css(box);
    this.$["body"].css({ height: box.height - (opts.headerHeight || 0) });

    if (opts.iframe) {
      this.$["iframe-wrap"].css({ height: box.height - opts.headerHeight });
      this.$["iframe"].css({ height: box.height - opts.headerHeight });
    } else {}
    return this;
  }

}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIModal);

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);





/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let tmpl = {
  uploadProgress(columnKeys) {
    return ``;
  },
  inputFile(columnKeys) {
    return `<input type="file" data-ax6ui-uploader-input="{{instanceId}}" name="{{name}}" {{#multiple}}multiple{{/multiple}} accept="{{accept}}" />`;
  },
  inputFileForm(columnKeys) {
    return `<form data-ax6ui-uploader-form="{{instanceId}}" name="ax5uploader-{{instanceId}}-form" method="post" enctype="multipart/form-data"></form>`;
  },
  progressBox(columnKeys) {
    return `
<div data-ax6ui-uploader-progressbox="{{instanceId}}" class="{{theme}}">
    <div class="ax-progressbox-body">
        <div class="ax-pregressbox-content">
            <div class="progress">
              <div class="progress-bar progress-bar-striped active" role="progressbar" style="width: 0">
                <span class="sr-only" role="progressbarval">0% Complete</span>
              </div>
            </div>
        </div>
        {{#btns}}
            <div class="ax-progressbox-buttons">
            {{#btns}}
                {{#@each}}
                <button data-pregressbox-btn="{{@key}}" class="btn btn-default {{@value.theme}}">{{@value.label}}</button>
                {{/@each}}
            {{/btns}}
            </div>
        {{/btns}}
    </div>
    <div class="ax-progressbox-arrow"></div>
</div>
`;
  },
  upoadedBox(columnKeys) {
    return `
{{#uploadedFiles}}<div data-ax6ui-uploader-uploaded-item="{{@i}}">
    <div class="uploaded-item-preview">
        {{#${columnKeys.thumbnail}}}<img src="${columnKeys.apiServerUrl}{{${columnKeys.thumbnail}}}">{{/${columnKeys.thumbnail}}}
    </div>
    <div class="uploaded-item-holder">
        <div class="uploaded-item-cell" data-uploaded-item-cell="download">{{{icon.download}}}</div>
        <div class="uploaded-item-cell" data-uploaded-item-cell="filename">{{${columnKeys.name}}}</div>
        <div class="uploaded-item-cell" data-uploaded-item-cell="filesize">({{#@fn_get_byte}}{{${columnKeys.size}}}{{/@fn_get_byte}})</div>
        <div class="uploaded-item-cell" data-uploaded-item-cell="delete">{{{icon.delete}}}</div>
    </div>
</div>{{/uploadedFiles}}
{{^uploadedFiles}}
<div data-ax6ui-uploader-emptyList-msg="true">
  {{#supportFileApi}}{{{lang.supportedHTML5_emptyListMsg}}}{{/supportFileApi}}
  {{^supportFileApi}}{{{lang.emptyListMsg}}}{{/supportFileApi}}
</div>
{{/uploadedFiles}}
`;
  }
};

const onStateChanged = function (that) {
  if (this.config.onStateChanged) {
    this.config.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  that = null;
  return true;
};
const onSelectFile = function (_evt) {
  let files;

  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
    // file API 지원 안되는 브라우저.
    // input file에 multiple 지원 안됨 그러므로 단일 파일 처리만 하면 됨.
    files = { path: _evt.target.value };
  } else if ('dataTransfer' in _evt) {
    files = _evt.dataTransfer.files;
  } else if ('target' in _evt) {
    files = _evt.target.files;
  } else if (_evt) {
    files = _evt;
  }

  if (!files) return false;

  /// selectedFiles에 현재 파일 정보 담아두기
  if (length in files) {
    if (files.length == 1) {
      this.selectedFiles = [files[0]];
    } else {
      this.selectedFiles = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].toArray(files);
    }
  } else {
    this.selectedFiles = [files];
  }

  if (this.config.progressBox) {
    openProgressBox.call(this);
  }
  if (!this.config.manualUpload) {
    this.send();
  }

  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
    alignLayout.call(this, false);
  }
};
const bindEvent = function () {

  this.$fileSelector.off("click.ax5uploader").on("click.ax5uploader", e => {
    this.$inputFile.trigger("click");
  });

  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
    this.$fileSelector.off("mouseover.ax5uploader").on("mouseover.ax5uploader", e => {
      alignLayout.call(this, true);
    });

    this.$inputFile.off("mouseover.ax5uploader").on("mouseover.ax5uploader", e => {
      this.$fileSelector.addClass("active");
    });

    this.$inputFile.off("mouseout.ax5uploader").on("mouseout.ax5uploader", e => {
      this.$fileSelector.removeClass("active");
      alignLayout.call(this, false);
    });
  }

  {
    if (!this.$uploadedBox || !this.$uploadedBox.get(0)) return false;

    this.$uploadedBox.on("click", "[data-uploaded-item-cell]", e => {
      let $this = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(e.currentTarget),
          cellType = $this.attr("data-uploaded-item-cell"),
          uploadedItemIndex = Number($this.parents('[data-ax6ui-uploader-uploaded-item]').attr('data-ax6ui-uploader-uploaded-item')),
          that = {};

      if (this.config.uploadedBox && this.config.uploadedBox.onclick) {
        that = {
          self: this,
          cellType: cellType,
          uploadedFiles: this.uploadedFiles,
          fileIndex: uploadedItemIndex
        };
        this.config.uploadedBox.onclick.call(that, that);
      }

      $this = null;
      cellType = null;
      uploadedItemIndex = null;
      that = null;
    });

    this.$uploadedBox.on("dragstart", function (e) {
      __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);
      return false;
    });
  }

  {
    // dropZone 설정 방식 변경
    if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) return false;
    if (!this.$dropZone || !this.$dropZone.get(0)) return false;

    let timer;

    this.$dropZone.parent().on("click", "[data-ax6ui-uploader-dropzone]", e => {
      let $target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(e.currentTarget);
      if ($target.parents('[data-ax6ui-uploader-uploaded-item]').length == 0 && !$target.attr('data-ax6ui-uploader-uploaded-item')) {
        //console.log(e.currentTarget == e.target, $.contains(e.target, e.currentTarget), e.target.getAttribute('data-ax6ui-uploader-emptylist-msg'));
        if (e.currentTarget == e.target || $.contains(e.target, e.currentTarget) || e.target.getAttribute('data-ax6ui-uploader-emptylist-msg')) {
          if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.dropZone.onclick)) {
            this.config.dropZone.onclick.call({
              self: this
            });
          } else {
            this.$inputFile.trigger("click");
          }
        }
      }
      $target = null;
    });

    this.$dropZone.get(0).addEventListener('dragover', e => {
      __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);

      if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.dropZone.ondragover)) {
        this.config.dropZone.ondragover.call({
          self: this
        });
      } else {
        this.$dropZone.addClass("dragover");
      }
    }, false);

    this.$dropZone.get(0).addEventListener('dragleave', e => {
      __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);

      if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.dropZone.ondragover)) {
        this.config.dropZone.ondragout.call({
          self: this
        });
      } else {
        this.$dropZone.removeClass("dragover");
      }
    }, false);

    this.$dropZone.get(0).addEventListener('drop', e => {
      __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].stopEvent(e);

      if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.dropZone.ondrop)) {
        this.config.dropZone.ondrop.call({
          self: this
        });
      } else {
        this.$dropZone.removeClass("dragover");
      }

      onSelectFile.call(this, e || window.event);
    }, false);
  }
};
const alignLayout = function (_TF) {
  // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)
  if (_TF) {
    if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
      // ie9에서 inputFile을 직접 클릭하지 않으면 submit 오류발생함. submit access denied
      // 그래서 버튼위에 inputFile을 올려두어야 함. (position값을 이용하면 편하지만..)
      // 그런데 form을 안에두면 또 다른 이중폼 문제 발생소지 ㅜㅜ 불가피하게 버튼의 offset 값을 이용.
      let box = this.$fileSelector.offset();
      box.width = this.$fileSelector.outerWidth();
      box.height = this.$fileSelector.outerHeight();
      this.$inputFile.css(box);
    }
  } else {
    this.$inputFile.css({
      left: -1000, top: -1000
    });
  }
};
const alignProgressBox = function (append) {
  const _alignProgressBox = function () {
    let $window = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window),
        $body = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body);
    let pos = {},
        positionMargin = 6,
        dim = {},
        pickerDim = {},
        pickerDirection;

    // this.config.viewport.selector

    pos = this.$progressBox.parent().get(0) == this.$target.get(0) ? this.$fileSelector.position() : this.$fileSelector.offset();
    dim = {
      width: this.$fileSelector.outerWidth(),
      height: this.$fileSelector.outerHeight()
    };
    pickerDim = {
      winWidth: Math.max($window.width(), $body.width()),
      winHeight: Math.max($window.height(), $body.height()),
      width: this.$progressBox.outerWidth(),
      height: this.$progressBox.outerHeight()
    };

    // picker css(width, left, top) & direction 결정
    if (!this.config.progressBoxDirection || this.config.progressBoxDirection === "" || this.config.progressBoxDirection === "auto") {
      // set direction
      pickerDirection = "top";
      if (pos.top - pickerDim.height - positionMargin < 0) {
        pickerDirection = "top";
      } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {
        pickerDirection = "bottom";
      }
    } else {
      pickerDirection = this.config.progressBoxDirection;
    }

    if (append) {
      this.$progressBox.addClass("direction-" + pickerDirection);
    }

    let positionCSS = function () {
      let css = { left: 0, top: 0 };
      switch (pickerDirection) {
        case "top":
          css.left = pos.left + dim.width / 2 - pickerDim.width / 2;
          css.top = pos.top + dim.height + positionMargin;
          break;
        case "bottom":
          css.left = pos.left + dim.width / 2 - pickerDim.width / 2;
          css.top = pos.top - pickerDim.height - positionMargin;
          break;
        case "left":
          css.left = pos.left + dim.width + positionMargin;
          css.top = pos.top - pickerDim.height / 2 + dim.height / 2;
          break;
        case "right":
          css.left = pos.left - pickerDim.width - positionMargin;
          css.top = pos.top - pickerDim.height / 2 + dim.height / 2;
          break;
      }
      return css;
    }();

    {
      if (pickerDirection == "top" || pickerDirection == "bottom") {
        if (positionCSS.left < 0) {
          positionCSS.left = positionMargin;
          this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });
        } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {
          positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;
          this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });
        }
      }
    }

    this.$progressBox.css(positionCSS);
  };

  this.$progressBox.css({ top: -999 });

  if (append) {
    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.
    (function () {
      if (this.config.viewport) {
        return __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.viewport.selector);
      } else {
        return this.$target;
      }
    }).call(this).append(this.$progressBox);

    // progressBox 버튼에 이벤트 연결.
    this.$progressBox.off("click.ax5uploader").on("click.ax5uploader", "button", e => {
      let act = e.currentTarget.getAttribute("data-pregressbox-btn");
      let processor = {
        "upload": function () {
          this.send();
        },
        "abort": function () {
          this.abort();
        }
      };
      if (processor[act]) processor[act].call(this);
    });
  }

  setTimeout(() => {
    _alignProgressBox.call(this);
  });
};
const openProgressBox = function () {
  this.$progressBox.removeClass("destroy");
  this.$progressUpload.removeAttr("disabled");
  this.$progressAbort.removeAttr("disabled");

  // apend & align progress box
  alignProgressBox.call(this, "append");

  // state change
  onStateChanged.call(this, {
    self: this,
    state: "open"
  });
};
const closeProgressBox = function () {
  this.$progressBox.addClass("destroy");
  setTimeout(() => {
    this.$progressBox.remove();
  }, this.config.animateTime);
};
const startUpload = function () {
  const processor = {
    "html5"() {
      const self = this;
      let uploadFile = this.selectedFiles.shift();
      if (!uploadFile) {
        // 업로드 종료
        uploadComplete.call(this);
        return this;
      }

      if (uploadFile[0]) uploadFile = uploadFile[0];

      let formData = new FormData();
      //서버로 전송해야 할 추가 파라미터 정보 설정

      this.$target.find("input").each(function () {
        formData.append(this.name, this.value);
      });
      // 파일 아이템 추가
      formData.append(this.config.form.fileName, uploadFile);

      this.xhr = new XMLHttpRequest();
      this.xhr.open("post", this.config.form.action, true);
      this.xhr.onload = function (e) {
        let res = e.target.response;
        try {
          if (typeof res == "string") res = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].parseJson(res);
        } catch (e) {
          return false;
        }
        if (self.config.debug) console.log(res);

        if (res.error) {
          if (self.config.debug) console.log(res.error);
          if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(self.config.onuploaderror)) {
            self.config.onuploaderror.call({
              self: self,
              error: res.error
            }, res);
          }
          self.send();
          return false;
        }

        uploaded.call(self, res);
        self.send();
      };
      this.xhr.upload.onprogress = function (e) {
        updateProgressBar.call(self, e);
        if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(self.config.onprogress)) {
          self.config.onprogress.call({
            loaded: e.loaded,
            total: e.total
          }, e);
        }
      };
      this.xhr.send(formData); // multipart/form-data
    },
    "form"() {

      /// i'm busy
      this.__uploading = true;

      // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드
      let $iframe = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()('<iframe src="javascript:false;" name="ax5uploader-' + this.instanceId + '-iframe" style="display:none;"></iframe>');
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append($iframe);

      // onload 이벤트 핸들러
      // action에서 파일을 받아 처리한 결과값을 텍스트로 출력한다고 가정하고 iframe의 내부 데이터를 결과값으로 callback 호출
      $iframe.on('load', e => {
        let doc = e.currentTarget.contentWindow ? e.currentTarget.contentWindow.document : e.currentTarget.contentDocument ? e.currentTarget.contentDocument : e.currentTarget.document,
            root = doc.documentElement ? doc.documentElement : doc.body,
            result = root.textContent ? root.textContent : root.innerText,
            res;

        try {
          res = JSON.parse(result);
        } catch (e) {
          res = {
            error: "Syntax error",
            body: result
          };
        }

        if (this.config.debug) console.log(res);
        if (res.error) {
          console.log(res);
        } else {
          uploaded.call(this, res);
          $iframe.remove();

          setTimeout(() => {
            uploadComplete.call(this);
          }, 300);
        }
      });

      this.$inputFileForm.attr("target", 'ax5uploader-' + this.instanceId + '-iframe').attr("action", this.config.form.action).submit();

      this.selectedFilesTotal = 1;
      updateProgressBar.call(this, {
        loaded: 1,
        total: 1
      });
    }
  };

  if (this.__uploading === false) {
    // 전체 파일 사이즈 구하기
    let filesTotal = 0;
    this.selectedFiles.forEach(function (n) {
      filesTotal += n.size;
    });
    this.selectedFilesTotal = filesTotal;
    this.__loaded = 0;

    this.__uploading = true; // 업로드 시작 상태 처리
    this.$progressUpload.attr("disabled", "disabled");
    this.$progressAbort.removeAttr("disabled");
  }

  processor[__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi ? "html5" : "form"].call(this);
};
const updateProgressBar = function (e) {
  let percent = __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].number((this.__loaded + e.loaded) / this.selectedFilesTotal * 100, { round: 2 });
  this.$progressBar.css({ width: percent + '%' });
  this.$progressBarVal.html(percent + '% Complete');
  if (e.loaded >= e.total) {
    this.__loaded += e.total;
  }
  if (e.lengthComputable) {
    if (e.loaded >= e.total) {}
  }
  percent = null;
};
const uploaded = function (res) {
  if (this.config.debug) console.log(res);
  this.uploadedFiles.push(res);
  repaintUploadedBox.call(this); // 업로드된 파일 출력

  if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.onuploaded)) {
    this.config.onuploaded.call({
      self: this
    }, res);
  }
};
const uploadComplete = function () {
  this.__uploading = false; // 업로드 완료 상태처리
  this.$progressUpload.removeAttr("disabled");
  this.$progressAbort.attr("disabled", "disabled");

  if (this.config.progressBox) {
    closeProgressBox.call(this);
  }
  if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.onuploadComplete)) {
    this.config.onuploadComplete.call({
      self: this
    });
  }
  // update uploadedFiles display

  /// reset inputFile
  attachFileTag.call(this);
};
const cancelUpload = function () {

  const processor = {
    "html5": function () {
      if (this.xhr) {
        this.xhr.abort();
      }
    },
    "form": function () {}
  };

  this.__uploading = false; // 업로드 완료 상태처리
  this.$progressUpload.removeAttr("disabled");
  this.$progressAbort.attr("disabled", "disabled");

  processor[__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi ? "html5" : "form"].call(this);

  if (this.config.progressBox) {
    closeProgressBox.call(this);
  }

  //this.$inputFile.val("");
  /// reset inputFile
  attachFileTag.call(this);

  if (this.config.debug) console.log("cancelUpload");
  // update uploadedFiles display
};
const repaintUploadedBox = function () {
  // uploadedBox 가 없다면 아무일도 하지 않음.
  // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.
  if (this.$uploadedBox === null) return this;

  this.$uploadedBox.html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.upoadedBox.call(this, this.config.uploadedBox.columnKeys), {
    "@fn_get_byte"() {
      return function (text, render) {
        return __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].number(render(text), { round: 2, byte: true });
      };
    },
    uploadedFiles: this.uploadedFiles,
    icon: this.config.uploadedBox.icon,
    lang: this.config.uploadedBox.lang,
    supportFileApi: !!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi
  }));
  this.$uploadedBox.find("img").on("error", function () {
    //this.src = "";
    $(this).parent().addClass("no-image");
  });
};
const attachFileTag = function () {
  if (this.$inputFile && this.$inputFile.get(0)) {
    this.$inputFile.remove();
  }
  if (this.$inputFileForm && this.$inputFileForm.get(0)) {
    this.$inputFileForm.remove();
  }

  this.$inputFile = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.inputFile.call(this), {
    instanceId: this.instanceId,
    multiple: this.config.multiple,
    accept: this.config.accept,
    name: this.config.form.fileName
  }));

  if (__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$inputFile);
  } else {
    this.$fileSelector.attr("tabindex", -1);
    this.$inputFileForm = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.inputFileForm.call(this), {
      instanceId: this.instanceId
    }));

    this.$inputFileForm.append(this.$inputFile);
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.$inputFileForm);
  }

  this.$inputFile.off("change.ax5uploader").on("change.ax5uploader", e => {
    onSelectFile.call(this, e);
  });
};
/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIUploader extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param {Element} config.target
     * @param [config.theme='default']
     * @param [config.lang]
     * @param [config.lang.upload='Upload']
     * @param [config.lang.abort='Abort']
     * @param [config.animateTime=100]
     * @param [config.accept="*\/*"]
     * @param [config.multiple=false]
     * @param [config.manualUpload=false]
     * @param [config.progressBox=true]
     * @param [config.progressBoxDirection='left'] - top, bottom, left, right, auto
     * @param [config.form]
     * @param [config.form.action='']
     * @param [config.form.fileName='file']
     * @param [config.dropZone]
     * @param {Element} [config.dropZone.target]
     * @param [config.uploadedBox]
     * @param {Element} [config.uploadedBox.target]
     * @param [config.uploadedBox.icon]
     * @param [config.uploadedBox.icon.download='U+2913']
     * @param [config.uploadedBox.icon.delete='U+232b']
     * @param [config.uploadedBox.columnKeys.name='name']
     * @param [config.uploadedBox.columnKeys.type='type']
     * @param [config.uploadedBox.columnKeys.size='size']
     * @param [config.uploadedBox.columnKeys.uploadedName='uploadedName']
     * @param [config.uploadedBox.columnKeys.uploadedPath='uploadedPath']
     * @param [config.uploadedBox.columnKeys.downloadPath='downloadPath']
     * @param [config.uploadedBox.columnKeys.previewPath='previewPath']
     * @param [config.uploadedBox.columnKeys.thumbnail='thumbnail']
     * @param [config.uploadedBox.lang]
     * @param [config.uploadedBox.lang.supportedHTML5_emptyListMsg='Drop files here or click to upload.']
     * @param [config.uploadedBox.lang.emptyListMsg='Empty of List.']
     * @param {Function} [config.uploadedBox.onchange]
     * @param {Function} [config.uploadedBox.onclick]
     * @param {Function} [config.onprogress]
     * @param {Function} [config.onuploaderror]
     * @param {Function} [config.onuploaded]
     * @param {Function} [config.onuploadComplete]
     */
    this.config = {
      theme: 'default', // theme of uploader
      lang: { // 업로더 버튼 랭귀지 설정
        "upload": "Upload",
        "abort": "Abort"
      },
      animateTime: 100,
      accept: "*/*", // 업로드 선택 파일 타입 설정
      multiple: false, // 다중 파일 업로드
      manualUpload: false, // 업로딩 시작 수동처리 여부
      progressBox: true, // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.
      progressBoxDirection: "left",
      form: {
        action: "",
        fileName: "file"
      },
      dropZone: {
        target: null
      },
      uploadedBox: {
        target: null,
        icon: {
          download: "U+2913",
          delete: "U+232b"
        },
        columnKeys: {
          name: "name",
          type: "type",
          size: "size",
          uploadedName: "uploadedName",
          uploadedPath: "uploadedPath",
          downloadPath: "downloadPath",
          previewPath: "previewPath",
          thumbnail: "thumbnail"
        },
        lang: {
          supportedHTML5_emptyListMsg: 'Drop files here or click to upload.',
          emptyListMsg: 'Empty of List.'
        },
        onchange: null,
        onclick: null
      },
      validateSelectedFiles: null,
      onprogress: null,
      onuploaderror: null,
      onuploaded: null,
      onuploadComplete: null
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * 버튼속성
     * @member {JSON}
     */
    this.defaultBtns = {
      "upload": { label: this.config.lang["upload"], theme: "upload" },
      "abort": { label: this.config.lang["abort"], theme: "abort" }
    };

    /**
     * 업로드된 파일
     * @member {Array}
     */
    this.uploadedFiles = [];

    /**
     * 업로더 타겟
     * @member {jQuery}
     */
    this.$target = null;

    /**
     * input file 태그
     * @member {jQuery}
     */
    this.$inputFile = null;
    /**
     * input form
     * @member {jQuery}
     */
    this.$inputFileForm = null;

    /**
     * 파일 선택 버튼
     * @member {jQuery}
     */
    this.$fileSelector = null;

    /**
     * 파일 드랍존
     * @member {jQuery}
     */
    this.$dropZone = null;

    /**
     * 파일 목록 표시박스
     * @member {jQuery}
     */
    this.$uploadedBox = null;

    /**
     * 업로드 진행 상태바
     * @member {Boolean}
     */
    this.__uploading = false;

    /**
     * 선택된 파일들
     * @member {Array}
     */
    this.selectedFiles = [];

    /**
     * 선택된 파일의 전체 크기
     * @member {Number}
     */
    this.selectedFilesTotal = 0;

    /**
     * 전송된 파일 크기
     * @member {Number}
     */
    this.__loaded = 0;

    if (typeof config !== "undefined") this.init();
  }

  /**
   * @method
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;

    if (this.config.target) {
      this.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.target);

      // 파일 드랍존은 옵션 사항.
      if (this.config.dropZone && this.config.dropZone.target && __WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
        this.$dropZone = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.dropZone.target);
        this.$dropZone.attr("data-ax6ui-uploader-dropzone", this.instanceId);
      }

      // uploadedBox 옵션 사항
      if (this.config.uploadedBox && this.config.uploadedBox.target) {
        this.$uploadedBox = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.uploadedBox.target);
      }

      // target attribute data
      (function (data) {
        if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isObject(data) && !data.error) {
          this.config = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, data);
        }
      }).call(this, __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].parseJson(this.$target.attr("data-ax6ui-uploader-config"), true));

      // detect element
      /// fileSelector 수집
      this.$fileSelector = this.$target.find('[data-ax6ui-uploader-button="selector"]');
      if (this.$fileSelector.length === 0) {
        console.log(__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].getError("ax6ui-uploader", "402", "can not find file selector"));
        return this;
      }

      // input file 추가
      attachFileTag.call(this);

      // btns 확인
      this.config.btns = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend({}, this.defaultBtns, this.config.btns);

      this.$progressBox = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.progressBox.call(this), {
        instanceId: this.instanceId,
        btns: this.config.btns
      }));
      this.$progressBar = this.$progressBox.find('[role="progressbar"]');
      this.$progressBarVal = this.$progressBox.find('[role="progressbarval"]');
      this.$progressBoxArrow = this.$progressBox.find(".ax-progressbox-arrow");
      this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn="upload"]');
      this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn="abort"]');

      // file API가 지원되지 않는 브라우저는 중지 기능 제공 못함.
      if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
        this.$progressAbort.css({ display: "none" });
      }

      // 파일버튼 등에 이벤트 연결.
      bindEvent.call(this);
      repaintUploadedBox.call(this);
    }

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  /**
   * @method
   * @returns {AX6UIUploader}
   */
  send() {
    // 업로드 시작
    if (this.selectedFiles.length && __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isFunction(this.config.validateSelectedFiles)) {
      let that = {
        self: this,
        uploadedFiles: this.uploadedFiles,
        selectedFiles: this.selectedFiles
      };
      if (!this.config.validateSelectedFiles.call(that, that)) {
        cancelUpload.call(this);
        return false;
        // 전송처리 안함.
      }
    }

    startUpload.call(this);
    return this;
  }

  /**
   * @method
   * @returns {AX6UIUploader}
   */
  abort() {
    if (!__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
      alert("This browser not supported abort method");
      return this;
    }
    cancelUpload.call(this);
    return this;
  }

  /**
   * @method
   * @param {Array} _files - JSON formatting can all be overridden in columnKeys.
   * @returns {AX6UIUploader}
   * @example
   * ```js
   * $.ajax({
   *     url: "api/fileListLoad.php",
   *     success: function (res) {
   *         // res JSON format
   *         // [{
   *         // "name": "barcode-scan-ani.gif",
   *         // "saveName": "barcode-scan-ani.gif",
   *         // "type": "file",
   *         // "fileSize": "3891664",
   *         // "uploadedPath": "/ax5ui-uploader/test/api/files",
   *         // "thumbUrl": ""
   *         // }]
   *         upload.setUploadedFiles(res);
   *     }
   * });
   * ```
   */
  setUploadedFiles(_files) {
    if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isArray(_files)) {
      this.uploadedFiles = _files;
    }
    if (__WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].isString(_files)) {
      try {
        this.uploadedFiles = JSON.parse(_files);
      } catch (e) {}
    }

    repaintUploadedBox.call(this);
    return this;
  }

  /**
   * clear uploadedFiles
   * @method
   * @returns {AX6UIUploader}
   */
  clear() {
    this.setUploadedFiles([]);
    return this;
  }

  /**
   * Removes the object corresponding to the index passed to the argument from uploadedFiles.
   * @method
   * @param {Number} _index
   * @returns {AX6UIUploader}
   * @example
   * ```js
   * // The actual file is not deleted
   * upload.removeFile(fileIndex);
   * ```
   */
  removeFile(_index) {
    if (!isNaN(Number(_index))) {
      this.uploadedFiles.splice(_index, 1);
    }
    repaintUploadedBox.call(this);
    return this;
  }

  /**
   * Empty uploadedFiles
   * @method
   * @returns {AX6UIUploader}
   * @example
   * ```js
   *
   * ```
   */
  removeFileAll() {
    this.uploadedFiles = [];
    repaintUploadedBox.call(this);
    return this;
  }

  /**
   * @method
   * @returns {Boolean}
   */
  selectFile() {
    if (__WEBPACK_IMPORTED_MODULE_3__AX6Info__["a" /* default */].supportFileApi) {
      this.$inputFile.trigger("click");
      return true;
    }
    return false;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIUploader);

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Info__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AX6Util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__ = __webpack_require__(4);






/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

let ctrlKeys = {
  "18": "KEY_ALT",
  //"8": "KEY_BACKSPACE",
  "17": "KEY_CONTROL",
  "46": "KEY_DELETE",
  "40": "KEY_DOWN",
  "35": "KEY_END",
  "187": "KEY_EQUAL",
  //"27": "KEY_ESC",
  "36": "KEY_HOME",
  "45": "KEY_INSERT",
  "37": "KEY_LEFT",
  "189": "KEY_MINUS",
  "34": "KEY_PAGEDOWN",
  "33": "KEY_PAGEUP",
  // "190": "KEY_PERIOD",
  //"13": "KEY_RETURN",
  "39": "KEY_RIGHT",
  "16": "KEY_SHIFT",
  // "32": "KEY_SPACE",
  "9": "KEY_TAB",
  "38": "KEY_UP",
  "91": "KEY_WINDOW"
  //"107" : "NUMPAD_ADD",
  //"194" : "NUMPAD_COMMA",
  //"110" : "NUMPAD_DECIMAL",
  //"111" : "NUMPAD_DIVIDE",
  //"12" : "NUMPAD_EQUAL",
  //"106" : "NUMPAD_MULTIPLY",
  //"109" : "NUMPAD_SUBTRACT"
};
let tmpl = {
  "optionGroup"(columnKeys) {
    return `
<div class="ax6ui-autocomplete-option-group {{theme}} {{size}}" data-ax6ui-autocomplete-option-group="{{id}}">
    <div class="ax-autocomplete-body">
        <div class="ax-autocomplete-option-group-content" data-els="content"></div>
    </div>
    <div class="ax-autocomplete-arrow"></div> 
</div>
`;
  },
  "autocompleteDisplay"(columnKeys) {
    return ` 
<input tabindex="-1" type="text" data-input-dummy="" style="display: none;" />
<div class="ax6ui-autocomplete-display {{theme}}" data-ax6ui-autocomplete-display="{{id}}" data-ax6ui-autocomplete-instance="{{instanceId}}" style="height: {{height}}px;">
    <div class="ax6ui-autocomplete-display-table" data-els="display-table">
        <div data-ax6ui-autocomplete-display="label-holder"> 
          <a {{^tabIndex}}{{/tabIndex}}{{#tabIndex}}tabindex="{{tabIndex}}" {{/tabIndex}} data-ax6ui-autocomplete-display="label" spellcheck="false" style="padding: 0 {{paddingLeft}}px;">
              <input type="text" data-ax6ui-autocomplete-display="input" style="border:0 none;height: {{optionItemHeight}}px;line-height: {{optionItemHeight}}px;" />
          </a>
        </div>
        <div data-ax6ui-autocomplete-display="addon"> 
            {{#multiple}}{{#reset}}
            <span class="addon-icon-reset" data-selected-clear="true">{{{.}}}</span>
            {{/reset}}{{/multiple}}
        </div>
    </div>
</div>
`;
  },
  "formSelect"(columnKeys) {
    return `
<select tabindex="-1" class="form-control {{formSize}}" name="{{name}}" multiple="multiple"></select>
`;
  },
  "formSelectOptions"(columnKeys) {
    return `
{{#selected}}
<option value="{{${columnKeys.optionValue}}}" selected="true">{{${columnKeys.optionText}}}</option>
{{/selected}}
`;
  },
  "options"(columnKeys) {
    return `
{{#waitOptions}}
    <div class="ax-autocomplete-option-item">
            <div class="ax-autocomplete-option-item-holder">
                <span class="ax-autocomplete-option-item-cell ax-autocomplete-option-item-label">
                    {{{lang.loading}}}
                </span>
            </div>
        </div>
{{/waitOptions}}
{{^waitOptions}}
    {{#options}}
        {{^hide}}
        <div class="ax-autocomplete-option-item" data-option-focus-index="{{@findex}}" data-option-index="{{@index}}" data-option-value="{{${columnKeys.optionValue}}}" {{#${columnKeys.optionSelected}}}data-option-selected="true"{{/${columnKeys.optionSelected}}}>
            <div class="ax-autocomplete-option-item-holder">
                <span class="ax-autocomplete-option-item-cell ax-autocomplete-option-item-label">{{${columnKeys.optionText}}}</span>
            </div>
        </div>
        {{/hide}}
    {{/options}}
    {{^options}}
        <div class="ax-autocomplete-option-item">
            <div class="ax-autocomplete-option-item-holder">
                <span class="ax-autocomplete-option-item-cell ax-autocomplete-option-item-label">
                    {{{lang.noOptions}}}
                </span>
            </div>
        </div>
    {{/options}}
{{/waitOptions}}
`;
  },
  "label"(columnKeys) {
    return `{{#selected}}
<div tabindex="-1" data-ax6ui-autocomplete-selected-label="{{@i}}" data-ax6ui-autocomplete-selected-text="{{text}}" style="height: {{optionItemHeight}}px;">  
  <div class="label-cell">{{${columnKeys.optionText}}}</div>
  <div class="label-cell" data-ax6ui-autocomplete-remove="true" data-ax6ui-autocomplete-remove-index="{{@i}}">{{{removeIcon}}}</div>
</div>{{/selected}}`;
  }
};

const onStateChanged = function (item, that) {
  if (item && item.onStateChanged) {
    item.onStateChanged.call(that, that);
  } else if (this.onStateChanged) {
    this.onStateChanged.call(that, that);
  }

  if (that.state == "changeValue") {
    if (item && item.onChange) {
      item.onChange.call(that, that);
    } else if (this.onChange) {
      this.onChange.call(that, that);
    }
  }

  item = null;
  that = null;
  return true;
};
const alignAutocompleteDisplay = function () {
  let i = this.queue.length,
      w;

  while (i--) {
    let item = this.queue[i];
    if (item.$display) {
      w = Math.max(item.$select.outerWidth(), __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(item.minWidth));
      item.$display.css({
        "min-width": w
      });
      if (item.reset) {
        item.$display.find(".addon-icon-reset").css({
          "line-height": this.queue[i].$display.height() + "px"
        });
      }

      // 높이조절 처리
      if (item.multiple) {
        var displayTableHeightAdjust = function () {
          return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(item.$display.css("border-top-width")) + __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].number(item.$display.css("border-bottom-width"));
        }.call(this);
        item.$target.height('');
        item.$display.height('');

        var displayTableHeight = item.$displayTable.outerHeight();
        if (Math.abs(displayTableHeight - item.$target.height()) > displayTableHeightAdjust) {
          item.$target.css({ height: displayTableHeight + displayTableHeightAdjust + 4 });
          item.$display.css({ height: displayTableHeight + displayTableHeightAdjust + 4 });
        }
      }
    }
  }

  i = null;
  w = null;
  return this;
};
const alignAutocompleteOptionGroup = function (append) {
  if (append && !this.activeautocompleteOptionGroup) return this;

  let item = this.queue[this.activeautocompleteQueueIndex],
      pos = {},
      positionMargin = 0,
      dim = {},
      pickerDim = {},
      pickerDirection;

  if (!item) return this;
  if (append) __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).append(this.activeautocompleteOptionGroup);

  pos = item.$target.offset();
  dim = {
    width: item.$target.outerWidth(),
    height: item.$target.outerHeight()
  };
  pickerDim = {
    winWidth: Math.max(__WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).width(), __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).width()),
    winHeight: Math.max(__WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).height(), __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(document.body).height()),
    width: this.activeautocompleteOptionGroup.outerWidth(),
    height: this.activeautocompleteOptionGroup.outerHeight()
  };

  // picker css(width, left, top) & direction 결정
  if (!item.direction || item.direction === "" || item.direction === "auto") {
    // set direction
    pickerDirection = "top";

    if (pos.top - pickerDim.height - positionMargin < 0) {
      pickerDirection = "top";
    } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {
      pickerDirection = "bottom";
    }
  } else {
    pickerDirection = item.direction;
  }

  if (append) {
    this.activeautocompleteOptionGroup.addClass("direction-" + pickerDirection);
  }
  this.activeautocompleteOptionGroup.css(function () {
    if (pickerDirection == "top") {
      if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {

        var newTop = pos.top + pickerDim.height;
        if (newTop + pickerDim.height + positionMargin > pickerDim.winHeight) {
          newTop = 0;
        }
        if (newTop < 0) {
          newTop = 0;
        }

        return {
          left: pos.left,
          top: newTop,
          width: dim.width
        };
      }
      return {
        left: pos.left,
        top: pos.top + dim.height + 1,
        width: dim.width
      };
    } else if (pickerDirection == "bottom") {
      return {
        left: pos.left,
        top: pos.top - pickerDim.height - 1,
        width: dim.width
      };
    }
  }.call(this));
};
const onBodyClick = function (e, target) {
  if (!this.activeautocompleteOptionGroup) return this;

  let item = this.queue[this.activeautocompleteQueueIndex],
      clickEl = "display";

  target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
    if (target.getAttribute("data-option-value")) {
      clickEl = "optionItem";
      return true;
    } else if (item.$target.get(0) == target) {
      clickEl = "display";
      return true;
    }
  });

  if (!target) {
    this.close();
    return this;
  } else if (clickEl === "optionItem") {
    setSelected.call(this, item.id, {
      optionIndex: {
        index: target.getAttribute("data-option-index")
      }
    }, undefined, "optionItemClick");
    alignAutocompleteDisplay.call(this);
    alignAutocompleteOptionGroup.call(this);
    if (!item.multiple) {
      this.close();
    }
  } else {}

  return this;
};
const getLabel = function (queIdx) {
  let item = this.queue[queIdx];

  // 템플릿에 전달 해야할 데이터 선언
  let data = {};
  data.id = item.id;
  data.theme = item.theme;
  data.multiple = item.multiple;
  data.lang = item.lang;
  data.options = item.options;
  data.selected = item.selected;
  data.hasSelected = data.selected && data.selected.length > 0;
  data.removeIcon = item.removeIcon;
  data.height = item.height;
  data.optionItemHeight = item.optionItemHeight;

  return __WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.label.call(this, item.columnKeys), data);
};
const syncLabel = function (queIdx) {
  let item = this.queue[queIdx];

  if (!item.multiple && item.selected && item.selected.length > 0) {
    item.selected = [].concat(item.selected[item.selected.length - 1]);
  }

  item.selected.forEach(function (n, nindex) {
    n["@index"] = nindex;
  });

  item.$select.html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.formSelectOptions.call(this, item.columnKeys), {
    selected: item.selected
  }));
};
const printLabel = function (queIdx) {
  let item = this.queue[queIdx];

  item.$displayLabel.find('[data-ax6ui-autocomplete-selected-label]').remove();
  item.$displayLabelInput.before(getLabel.call(this, queIdx));
};
const focusLabel = function (queIdx) {
  if (this.queue[queIdx].disabled) return this;

  this.queue[queIdx].$displayLabel.trigger("focus");
  this.queue[queIdx].$displayLabelInput.focus();
};
const clearLabel = function (queIdx) {
  this.queue[queIdx].$displayLabelInput.val('');
};
const blurLabel = function (queIdx) {
  this.queue[queIdx].$displayLabel.trigger("blur");
};
const onSearch = function (queIdx, searchWord) {
  if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.
  let regExp = /[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]/gi;
  searchWord = searchWord.replace(regExp, "");

  this.queue[queIdx].waitOptions = true;
  this.queue[queIdx].onSearch.call({
    self: this,
    item: this.queue[queIdx],
    searchWord: searchWord
  }, function (O) {

    let data = {};
    let item = this.queue[this.activeautocompleteQueueIndex];
    if (!item) return false;

    /// 현재 selected 검증후 처리
    (function (item, O) {
      let optionsMap = {};
      O.options.forEach(function (_O, _OIndex) {
        _O["@index"] = _OIndex;
        _O["@findex"] = _OIndex;
        optionsMap[_O[item.columnKeys.optionValue]] = _O;
      });
      if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(item.selected)) {
        item.selected.forEach(function (_O) {
          if (optionsMap[_O[item.columnKeys.optionValue]]) {
            O.options[optionsMap[_O[item.columnKeys.optionValue]]["@index"]][item.columnKeys.optionSelected] = true;
          }
        });
      }
    })(item, O);

    item.options = O.options;

    alignAutocompleteDisplay.call(this);

    /// 템플릿에 전달할 오브젝트 선언
    data.id = item.id;
    data.theme = item.theme;
    data.multiple = item.multiple;
    data.lang = item.lang;
    data.options = item.options;
    this.activeautocompleteOptionGroup.find('[data-els="content"]').html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.options.call(this, item.columnKeys), data));

    focusWord.call(this, this.activeautocompleteQueueIndex, searchWord);
    alignAutocompleteOptionGroup.call(this);

    setTimeout(function () {
      alignAutocompleteOptionGroup.call(this);
    }.bind(this));
  }.bind(this));
};
const focusWord = function (queIdx, searchWord) {
  if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.
  let collect_options = [],
      i = -1,
      l = this.queue[queIdx].options.length - 1,
      n;
  if (searchWord != "") {
    while (l - i++) {
      n = this.queue[queIdx].options[i];

      if (('' + n.text).toLowerCase() == searchWord.toLowerCase()) {
        collect_options = [{ '@findex': n['@findex'], optionsSort: 0 }];
        break;
      } else {
        let sort = ('' + n.text).toLowerCase().search(searchWord.toLowerCase());
        if (sort > -1) {
          collect_options.push({ '@findex': n['@findex'], optionsSort: sort });
          if (collect_options.length > 2) break;
        }
        sort = null;
      }
    }
    collect_options.sort(function (a, b) {
      return a.optionsSort - b.optionsSort;
    });
  }

  if (collect_options && collect_options.length > 0) {
    focusMove.call(this, queIdx, undefined, collect_options[0]['@findex']);
  } else {
    focusClear.call(this, queIdx);
  }
};
const focusClear = function (queIdx) {
  if (this.activeautocompleteOptionGroup) {
    this.activeautocompleteOptionGroup.find('[data-option-focus-index]').removeClass("hover").removeAttr("data-option-selected");
  }

  this.queue[queIdx].optionFocusIndex = -1;
};
const focusMove = function (queIdx, direction, findex) {
  let _focusIndex, _prevFocusIndex, focusOptionEl, optionGroupScrollContainer;
  let item = this.queue[queIdx];

  if (this.activeautocompleteOptionGroup && item.options && item.options.length > 0) {

    if (typeof findex !== "undefined") {
      _focusIndex = findex;
    } else {
      _prevFocusIndex = item.optionFocusIndex == -1 ? item.optionSelectedIndex || -1 : item.optionFocusIndex;
      if (_prevFocusIndex == -1) {
        _focusIndex = 0;
        //_focusIndex = (direction > 0) ? 0 : item.optionItemLength - 1; // 맨 끝으로 보낼것인가 말 것인가.
      } else {
        _focusIndex = _prevFocusIndex + direction;
        if (_focusIndex < 0) _focusIndex = 0;else if (_focusIndex > item.optionItemLength - 1) _focusIndex = item.optionItemLength - 1;
      }
    }

    item.optionFocusIndex = _focusIndex;

    // 포커스 인덱스가 hide아이템을 만나면 hide 아이템이 안나올 때까지 루프를 순회 합니다.
    if (item.options[_focusIndex] && item.options[_focusIndex].hide) {
      // 옵션이 없는 값이 선택된 경우
      if (typeof direction === "undefined") {
        return this;
      } else {
        let isStrop = false;
        while (item.options[_focusIndex].hide) {
          _focusIndex = _focusIndex + direction;
          if (_focusIndex < 0) {
            _focusIndex = 0;
            break;
          } else if (_focusIndex > item.optionItemLength - 1) {
            _focusIndex = item.optionItemLength - 1;
            break;
          }
        }
      }
    }

    if (typeof _focusIndex !== "undefined") {
      this.activeautocompleteOptionGroup.find('[data-option-focus-index]').removeClass("hover");

      focusOptionEl = this.activeautocompleteOptionGroup.find('[data-option-focus-index="' + _focusIndex + '"]').addClass("hover");

      optionGroupScrollContainer = this.activeautocompleteOptionGroup.find('[data-els="content"]');

      if (focusOptionEl.get(0)) {
        let focusOptionElHeight = focusOptionEl.outerHeight(),
            optionGroupScrollContainerHeight = optionGroupScrollContainer.innerHeight(),
            optionGroupScrollContainerScrollTop = optionGroupScrollContainer.scrollTop(),
            focusOptionElTop = focusOptionEl.position().top + optionGroupScrollContainer.scrollTop();

        if (optionGroupScrollContainerHeight + optionGroupScrollContainerScrollTop < focusOptionElTop + focusOptionElHeight) {
          optionGroupScrollContainer.scrollTop(focusOptionElTop + focusOptionElHeight - optionGroupScrollContainerHeight);
        } else if (optionGroupScrollContainerScrollTop > focusOptionElTop) {
          optionGroupScrollContainer.scrollTop(focusOptionElTop);
        }
        // optionGroup scroll check

        if (typeof direction !== "undefined") {
          item.$displayLabelInput.val(item.options[_focusIndex].text);
        }
      }
    }
  }
};
const bindAutocompleteTarget = function (queIdx) {
  let item = this.queue[queIdx],
      data = {};
  const debouncedFocusWord = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].debounce(function (queIdx) {
    if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.
    onSearch.call(this, queIdx, this.queue[queIdx].$displayLabelInput.val());
  }, 100).bind(this);
  const autocompleteEvent = {
    'click': function (queIdx, e) {
      let clickEl = "";
      let target = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].findParentNode(e.target, function (target) {
        if (target.getAttribute("data-ax6ui-autocomplete-remove")) {
          clickEl = "optionItemRemove";
          return true;
        } else if (target.getAttribute("data-selected-clear")) {
          clickEl = "clear";
          return true;
        }
      });

      if (target) {
        if (clickEl === "optionItemRemove") {
          let removeIndex = target.getAttribute("data-ax6ui-autocomplete-remove-index");
          this.queue[queIdx].selected.splice(removeIndex, 1);
          syncLabel.call(this, queIdx);
          printLabel.call(this, queIdx);
          focusLabel.call(this, queIdx);
          alignAutocompleteDisplay.call(this);
          alignAutocompleteOptionGroup.call(this);
          __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
          return this;
        } else if (clickEl === "clear") {
          setSelected.call(this, queIdx, { clear: true });
          alignAutocompleteDisplay.call(this);
          alignAutocompleteOptionGroup.call(this);
        }
      } else {
        if (this.activeautocompleteQueueIndex == queIdx) {
          if (this.queue[queIdx].optionFocusIndex == -1) {
            // 아이템에 포커스가 활성화 된 후, 마우스 이벤트 이면 무시
            this.close();
          }
        } else {
          focusLabel.call(this, queIdx);
        }
      }
    },
    'keyUp': function (queIdx, e) {
      /// 약속된 키 이벤트가 발생하면 stopEvent를 통해 keyUp 이벤트가 발생되지 않도록 막아주는 센스
      if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.ESC && this.activeautocompleteQueueIndex === -1) {
        // ESC키를 누르고 옵션그룹이 열려있지 않은 경우
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
        return this;
      } else if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.TAB) {
        // nothing
        this.close();
        return this;
      } else if (this.activeautocompleteQueueIndex != queIdx && e.which != __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.BACKSPACE) {
        // 닫힌 상태 인경우
        this.open(queIdx); // open and align
        debouncedFocusWord(queIdx);
      }

      if (ctrlKeys[e.which]) {
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      } else {
        // backspace 감지 하여 input 값이 없으면 스탑이벤트 처리 할 것
        if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.BACKSPACE && this.queue[queIdx].$displayLabelInput.val() == "") {
          // 마지막 아이템을 제거.
          this.queue[queIdx].selected.pop();
          syncLabel.call(this, queIdx);
          printLabel.call(this, queIdx);
          focusLabel.call(this, queIdx);
          alignAutocompleteDisplay.call(this);
          alignAutocompleteOptionGroup.call(this);
          __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
        } else {
          debouncedFocusWord(queIdx);
        }
      }
    },
    'keyDown': function (queIdx, e) {
      let item = this.queue[queIdx];
      if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.ESC) {
        clearLabel.call(this, queIdx);
        this.close();
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      } else if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.RETURN) {
        let inputValue = item.$displayLabelInput.val();
        if (item.optionFocusIndex > -1) {
          setSelected.call(this, item.id, {
            optionIndex: {
              index: item.optionFocusIndex
            }
          }, undefined, "optionItemClick");
        } else if (inputValue != "") {
          setSelected.call(this, queIdx, inputValue, true);
        }
        clearLabel.call(this, queIdx);
        alignAutocompleteDisplay.call(this);
        this.close();

        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      } else if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.DOWN) {
        focusMove.call(this, queIdx, 1);
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      } else if (e.which == __WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].eventKeys.UP) {
        focusMove.call(this, queIdx, -1);
        __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
      }
    },
    'focus': function (queIdx, e) {
      // console.log(e);
    },
    'blur': function (queIdx, e) {
      blurLabel.call(this, queIdx);
      __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
    },
    'selectChange': function (queIdx, e) {
      setSelected.call(this, queIdx, { value: item.$select.val() }, true);
    }
  };
  const blurLabel = function (queIdx) {
    clearLabel.call(this, queIdx);
  };

  if (!item.$display) {
    /// 템플릿에 전달할 오브젝트 선언
    data.instanceId = this.instanceId;
    data.id = item.id;
    data.name = item.name;
    data.theme = item.theme;
    data.tabIndex = item.tabIndex;
    data.multiple = item.multiple;
    data.reset = item.reset;
    data.height = item.height;
    data.optionItemHeight = item.optionItemHeight;
    data.paddingLeft = (item.height - item.optionItemHeight) / 2;
    data.label = getLabel.call(this, queIdx);

    item.$display = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.autocompleteDisplay.call(this, item.columnKeys), data));
    item.$displayTable = item.$display.find('[data-els="display-table"]');
    item.$displayLabel = item.$display.find('[data-ax6ui-autocomplete-display="label"]');
    item.$displayLabelInput = item.$display.find('[data-ax6ui-autocomplete-display="input"]');

    if (item.$target.find("select").get(0)) {
      item.$select = item.$target.find("select");
      item.$select.attr("tabindex", "-1").attr("class", "form-control " + data.formSize);

      if (data.name) {
        item.$select.attr("name", "name");
      }
      item.$select.attr("multiple", "multiple");
    } else {
      item.$select = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.formSelect.call(this, item.columnKeys), data));
      item.$target.append(item.$select);
    }

    item.$target.append(item.$display);
  } else {
    printLabel.call(this, queIdx);
  }

  alignAutocompleteDisplay.call(this);

  item.$display.off('click.ax6ui-autocomplete').on('click.ax6ui-autocomplete', autocompleteEvent.click.bind(this, queIdx));

  // autocomplete 태그에 대한 이벤트 감시

  item.$displayLabelInput.off("focus.ax6ui-autocomplete").on("focus.ax6ui-autocomplete", autocompleteEvent.focus.bind(this, queIdx)).off("blur.ax6ui-autocomplete").on("blur.ax6ui-autocomplete", autocompleteEvent.blur.bind(this, queIdx)).off("keydown.ax6ui-autocomplete").on("keydown.ax6ui-autocomplete", autocompleteEvent.keyDown.bind(this, queIdx)).off("keyup.ax6ui-autocomplete").on("keyup.ax6ui-autocomplete", autocompleteEvent.keyUp.bind(this, queIdx));

  // select 태그에 대한 change 이벤트 감시

  /*
    item.$select
      .off('change.ax6ui-autocomplete')
      .on('change.ax6ui-autocomplete', autocompleteEvent.selectChange.bind(this, queIdx));
    */

  data = null;
  item = null;
  queIdx = null;
  return this;
};
const getQueIdx = function (boundID) {
  if (boundID instanceof __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a) {
    boundID = boundID.data("data-ax6ui-autocomplete-id");
  } else if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(boundID)) {
    boundID = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(boundID).data("data-ax6ui-autocomplete-id");
  }
  if (!__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(boundID)) {
    console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "402", "getQueIdx"));
    return;
  }
  return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(this.queue, function () {
    return this.id == boundID;
  });
};
const getSelected = function (_item, o, selected) {
  if (typeof selected === "undefined") {
    return _item.multiple ? !o : true;
  } else {
    return selected;
  }
};
const clearSelected = function (queIdx) {
  this.queue[queIdx].options.forEach(function (n) {
    if (n.optgroup) {
      n.options.forEach(function (nn) {
        nn.selected = false;
      });
    } else {
      n.selected = false;
    }
  });

  this.queue[queIdx].selected = [];
  this.queue[queIdx].$select.html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.formSelectOptions.call(this, this.queue[queIdx].columnKeys), {
    selected: this.queue[queIdx].selected
  }));
};
const setSelected = function (boundID, value, selected, _option) {
  const processor = {
    'selectedIndex': function (queIdx, value, selected, setValueType) {},
    'removeSelectedIndex': function (queIdx, value, selected, setValueType) {
      var item = this.queue[queIdx],
          addOptions = {};
      var newSelectedArray = [],
          optionIndex = 0;
      for (var i = 0; i < item.selected.length; i++) {
        if (item.selected[i]['@index'] != value.removeSelectedIndex.index) {
          addOptions = { '@index': optionIndex, '@findex': optionIndex };
          addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];
          addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];
          newSelectedArray.push(addOptions);
          optionIndex++;
        }
      }
      item.selected = newSelectedArray;
    },
    'optionIndex': function (queIdx, value, selected, setValueType) {
      var item = this.queue[queIdx],
          addOptions = {};
      var optionIndex = item.selected.length;
      var pushOk = true;

      addOptions = {
        '@index': optionIndex, '@findex': optionIndex
      };
      addOptions[item.columnKeys.optionValue] = item.options[value.optionIndex.index][item.columnKeys.optionValue];
      addOptions[item.columnKeys.optionText] = item.options[value.optionIndex.index][item.columnKeys.optionText];

      for (var i = 0; i < item.selected.length; i++) {
        if (item.selected[i][item.columnKeys.optionValue] == addOptions[item.columnKeys.optionValue]) {
          pushOk = false;
        }
      }
      if (pushOk) item.selected.push(addOptions);
    },
    'arr': function (queIdx, values, selected, setValueType) {
      values.forEach(function (value) {
        if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(value) || __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(value)) {
          processor.text.call(self, queIdx, value, selected, "justSetValue");
        } else {
          for (var key in processor) {
            if (value[key]) {
              processor[key].call(self, queIdx, value, selected, "justSetValue");
              break;
            }
          }
        }
      });
    },
    'value': function (queIdx, value, selected, setValueType) {
      var item = this.queue[queIdx];
      var addOptions;
      var optionIndex = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(item.options, function () {
        return this[item.columnKeys.optionValue] == value.value[item.columnKeys.optionValue];
      });

      if (optionIndex > -1) {
        item.options[optionIndex][item.columnKeys.optionSelected] = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);

        if (item.options[optionIndex][item.columnKeys.optionSelected]) {
          var appendOk = true;
          for (var i = 0; i < item.selected.length; i++) {
            if (item.selected[i][this.config.columnKeys.optionValue] == item.options[optionIndex][this.config.columnKeys.optionValue]) {
              appendOk = false;
              break;
            }
          }
          if (appendOk) {
            addOptions = {};
            addOptions[item.columnKeys.optionValue] = item.options[optionIndex][item.columnKeys.optionValue];
            addOptions[item.columnKeys.optionText] = item.options[optionIndex][item.columnKeys.optionText];
            item.selected.push(addOptions);
          }
        } else {
          var newSelectedArray = [];
          for (var i = 0; i < item.selected.length; i++) {
            if (item.selected[i][this.config.columnKeys.optionValue] == item.options[optionIndex][this.config.columnKeys.optionValue]) {} else {
              addOptions = {};
              addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];
              addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];
              newSelectedArray.push(addOptions);
            }
          }
          item.selected = newSelectedArray;
        }
      } else {
        // 새로운 값 추가
        var appendOk = true;
        for (var i = 0; i < item.selected.length; i++) {
          if (item.selected[i][this.config.columnKeys.optionValue] == value.value[this.config.columnKeys.optionValue]) {
            appendOk = false;
            break;
          }
        }

        if (appendOk) {
          addOptions = {};
          addOptions[item.columnKeys.optionValue] = value.value[this.config.columnKeys.optionValue];
          addOptions[item.columnKeys.optionText] = value.value[this.config.columnKeys.optionText];
          item.selected.push(addOptions);
        }
      }
    },
    'text': function (queIdx, value, selected, setValueType) {
      var item = this.queue[queIdx];
      var addOptions;
      var optionIndex = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(item.options, function () {
        return this[item.columnKeys.optionText] == value;
      });

      if (optionIndex > -1) {
        item.options[optionIndex][item.columnKeys.optionSelected] = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);

        if (item.options[optionIndex][item.columnKeys.optionSelected]) {
          var appendOk = true;
          for (var i = 0; i < item.selected.length; i++) {
            if (item.selected[i][this.config.columnKeys.optionText] == item.options[optionIndex][this.config.columnKeys.optionText]) {
              appendOk = false;
              break;
            }
          }
          if (appendOk) {
            addOptions = {};
            addOptions[item.columnKeys.optionValue] = item.options[optionIndex][item.columnKeys.optionValue];
            addOptions[item.columnKeys.optionText] = item.options[optionIndex][item.columnKeys.optionText];
            item.selected.push(addOptions);
          }
        } else {
          var newSelectedArray = [];
          for (var i = 0; i < item.selected.length; i++) {
            if (item.selected[i][this.config.columnKeys.optionText] == item.options[optionIndex][this.config.columnKeys.optionText]) {} else {
              addOptions = {};
              addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];
              addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];
              newSelectedArray.push(addOptions);
            }
          }
          item.selected = newSelectedArray;
        }
      } else {
        // 새로운 값 추가
        var appendOk = true;
        for (var i = 0; i < item.selected.length; i++) {
          if (item.selected[i][this.config.columnKeys.optionText] == value) {
            appendOk = false;
            break;
          }
        }

        if (appendOk) {
          addOptions = {};
          addOptions[item.columnKeys.optionValue] = value;
          addOptions[item.columnKeys.optionText] = value;
          item.selected.push(addOptions);
        }
      }
    },
    'clear': function (queIdx) {
      clearSelected.call(this, queIdx);
      focusClear.call(this, queIdx);

      if (this.activeautocompleteOptionGroup) {
        this.activeautocompleteOptionGroup.find('[data-option-index]').attr("data-option-Selected", "false");
      }
      this.queue[queIdx].optionSelectedIndex = -1;
    }
  };

  let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);
  if (queIdx === -1) {
    console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "402", "val"));
    return;
  }

  if (typeof value == "undefined") {
    throw "error not found value";
  } else if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(value)) {
    processor.clear.call(this, queIdx);
    processor.arr.call(this, queIdx, this.queue[queIdx].multiple || value.length == 0 ? value : [value[value.length - 1]], selected);
  } else if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isString(value) || __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(value)) {
    if (typeof value !== "undefined" && value !== null && !this.queue[queIdx].multiple) {
      clearSelected.call(this, queIdx);
    }
    processor.text.call(this, queIdx, value, selected);
  } else {
    if (value === null) {
      processor.clear.call(this, queIdx);
    } else {
      if (!this.queue[queIdx].multiple) {
        clearSelected.call(this, queIdx);
      }
      for (var key in processor) {
        if (value[key]) {
          processor[key].call(this, queIdx, value, selected);
          break;
        }
      }
    }
  }

  syncLabel.call(this, queIdx);
  printLabel.call(this, queIdx);
  focusLabel.call(this, queIdx);
  alignAutocompleteOptionGroup.call(this);

  if (typeof value !== "undefined") {
    if (_option && !_option.noStateChange) {
      onStateChanged.call(this, this.queue[queIdx], {
        self: this,
        item: this.queue[queIdx],
        state: "changeValue",
        value: this.queue[queIdx].selected
      });
    }
  }

  boundID = null;
  return this;
};

/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UIAutocomplete extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param [config.theme='default']
     * @param [config.animateTime=250]
     * @param [config.height=34]
     * @param [config.lang] - 메세지들
     * @param [config.lang.noSelected='']
     * @param [config.lang.noOptions='no options']
     * @param [config.lang.loading='now loading..']
     * @param [config.columnKeys] - 내부에서 사용 JSON key 정의
     * @param [config.columnKeys.optionValue='value']
     * @param [config.columnKeys.optionText='text']
     * @param [config.columnKeys.optionSelected='selected']
     */
    this.config = {
      theme: 'default',
      animateTime: 250,
      height: 34,
      optionItemHeight: 24,
      borderWidth: 1,
      removeIcon: 'U+00d7',
      lang: {
        noSelected: '',
        noOptions: 'no options',
        loading: 'Now Processing'
      },
      columnKeys: {
        optionValue: 'value',
        optionText: 'text',
        optionSelected: 'selected'
      }
    };
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, this.config, config);

    // 멤버 변수 초기화
    /**
     * bind를 통해 연결된 select가 저장되는 변수
     * @member {Array}
     */
    this.queue = [];
    /**
     * @member {Object}
     */
    this.activeautocompleteOptionGroup = null;
    /**
     * @member {Number}
     */
    this.activeautocompleteQueueIndex = -1;
    /**
     * @member {Object}
     */
    this.openTimer = null;
    /**
     * @member {Object}
     */
    this.closeTimer = null;
    /**
     * @member {Function}
     */
    this.waitOptionsCallback = null;
    /**
     * @member {Object}
     */
    this.keyUpTimer = null;
    /**
     * @member {Object}
     */
    this.xvar = {};

    this.init();
  }

  /**
   * @method
   * @param config
   */
  init() {
    this.onStateChanged = this.config.onStateChanged;
    delete this.config.onStateChanged;
    this.onChange = this.config.onChange;
    delete this.config.onChange;

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;

    // throttledResize
    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("resize.ax6ui-autocomplete-display-" + this.instanceId, __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].throttle(function (e) {
      alignAutocompleteDisplay.call(this, e || window.event);
      alignAutocompleteOptionGroup.call(this);
    }, 100).bind(this));
  }

  /**
   * bind autocomplete
   * @method
   * @param {Object} item
   * @param {String} [item.id]
   * @param {String} [item.theme]
   * @param {Boolean} [item.multiple]
   * @param {Element} item.target
   * @return {AX6UIAutocomplete}
   */
  bind(item) {
    let queIdx;
    item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.config, item);

    if (!item.target) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "401", "bind"));
      return this;
    }
    item.$target = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(item.target);

    if (!item.id) item.id = item.$target.data("data-ax6ui-autocomplete-id");
    if (!item.id) {
      item.id = 'ax6ui-autocomplete-' + __WEBPACK_IMPORTED_MODULE_1__AX6UICore_js__["a" /* default */].getInstanceId();
      item.$target.data("data-ax6ui-autocomplete-id", item.id);
    }
    item.name = item.$target.attr("data-ax6ui-autocomplete");

    item.options = [];
    item.selected = [];

    // target attribute data
    (function (data) {
      if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isObject(data) && !data.error) {
        item = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, item, data);
      }
    })(__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].parseJson(item.$target.attr("data-ax6ui-autocomplete-config"), true));

    queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].search(this.queue, function () {
      return this.id == item.id;
    });

    if (queIdx === -1) {
      this.queue.push(item);
      bindAutocompleteTarget.call(this, this.queue.length - 1);
    } else {
      this.queue[queIdx].selected = [];
      this.queue[queIdx].options = item.options;
      this.queue[queIdx] = __WEBPACK_IMPORTED_MODULE_0_jqmin___default.a.extend(true, {}, this.queue[queIdx], item);
      bindAutocompleteTarget.call(this, queIdx);
    }

    queIdx = null;
    return this;
  }

  /**
   * open the optionBox of autocomplete
   * @method
   * @param {(String|Number|Element)} boundID
   * @param {Number} [tryCount]
   * @return {AX6UIAutocomplete}
   */
  open(boundID, tryCount) {
    this.waitOptionsCallback = null;

    /**
     * open autocomplete from the outside
     */
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(boundID) ? boundID : getQueIdx.call(this, boundID),
        item = this.queue[queIdx],
        data = {},
        focusTop,
        selectedOptionEl;

    if (item.$display.attr("disabled")) return this;

    if (this.openTimer) clearTimeout(this.openTimer);
    if (this.activeautocompleteOptionGroup) {
      if (this.activeautocompleteQueueIndex == queIdx) {
        return this;
      }

      if (tryCount > 2) return this;
      this.close();
      this.openTimer = setTimeout(function () {
        this.open(queIdx, (tryCount || 0) + 1);
      }.bind(this), this.config.animateTime);

      return this;
    }

    item.optionFocusIndex = -1; // optionGroup이 열리면 포커스 인덱스 초기화 -1로
    if (item.selected && item.selected.length > 0) {
      item.optionSelectedIndex = item.selected[0]["@findex"];
    }

    /// 템플릿에 전달할 오브젝트 선언
    data.id = item.id;
    data.theme = item.theme;
    data.multiple = item.multiple;

    data.lang = item.lang;
    item.$display.attr("data-autocomplete-option-group-opened", "true");

    data.waitOptions = true; // 타이핑값으로 options을 구해야 하므로 대기
    data.options = [];

    this.activeautocompleteOptionGroup = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.optionGroup.call(this, item.columnKeys), data));
    this.activeautocompleteOptionGroup.find('[data-els="content"]').html(__WEBPACK_IMPORTED_MODULE_4__AX6Mustache__["a" /* default */].render(tmpl.options.call(this, item.columnKeys), data));
    this.activeautocompleteQueueIndex = queIdx;

    alignAutocompleteOptionGroup.call(this, "append"); // alignAutocompleteOptionGroup 에서 body append

    if (item.selected && item.selected.length > 0) {
      selectedOptionEl = this.activeautocompleteOptionGroup.find('[data-option-index="' + item.selected[0]["@index"] + '"]');
      if (selectedOptionEl.get(0)) {
        focusTop = selectedOptionEl.position().top - this.activeautocompleteOptionGroup.height() / 3;
        this.activeautocompleteOptionGroup.find('[data-els="content"]').scrollTop(focusTop);
      }
    }

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).on("click.ax6ui-autocomplete-" + this.instanceId, function (e) {
      e = e || window.event;
      onBodyClick.call(this, e);
      __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].stopEvent(e);
    }.bind(this));

    onStateChanged.call(this, item, {
      self: this,
      state: "open",
      item: item
    });

    data = null;
    focusTop = null;
    selectedOptionEl = null;
    return this;
  }

  /**
   * @method
   * @param {(jQueryObject|Element|Number)} _boundID
   * @param {(String|Array)} _value
   * @return {AX6UIAutocomplete}
   * @example
   * ```js
   * myAutocomplete.setValue(jQuery('[data-ax6ui-autocomplete="autocomplete1"]'), {value:"test", text:"test"});
   * myAutocomplete.setValue(jQuery('[data-ax6ui-autocomplete="autocomplete1"]'), [{value:"test1", text:"test1"}, {value:"test2", text:"test2"}]);
   * myAutocomplete.setValue(jQuery('[data-ax6ui-autocomplete="autocomplete1"]'), null);
   * ```
   */
  setValue(_boundID, _value) {
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);
    if (queIdx === -1) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "402", "val"));
      return;
    }

    clearSelected.call(this, queIdx);

    if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isArray(_value)) {
      let _values = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].map(_value, function () {
        return { value: this };
      });
      setSelected.call(this, queIdx, _values, true, { noStateChange: true });
    } else if (__WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isObject(_value)) {
      setSelected.call(this, queIdx, { value: _value }, true, { noStateChange: true });
    } else {
      printLabel.call(this, queIdx);
    }

    blurLabel.call(this, queIdx);
    alignAutocompleteDisplay.call(this);

    return this;
  }

  /**
   * @method
   * @param {(jQueryObject|Element|Number)} _boundID
   * @param {(String|Array)} _text
   * @return {AX6UIAutocomplete}
   * @example
   * ```js
   * myAutocomplete.setText(jQuery('[data-ax6ui-autocomplete="autocomplete1"]'), "string");
   * myAutocomplete.setText(jQuery('[data-ax6ui-autocomplete="autocomplete1"]'), ["substring", "search"]);
   * ```
   */
  setText(_boundID, _text) {
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);
    if (queIdx === -1) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "402", "val"));
      return;
    }

    this.queue[queIdx].selected = [];
    clearSelected.call(this, queIdx);
    setSelected.call(this, queIdx, _text, true, { noStateChange: true });
    blurLabel.call(this, queIdx);
    alignAutocompleteDisplay.call(this);

    return this;
  }

  /**
   * @method
   * @param {(jQueryObject|Element|Number)} _boundID
   * @returns {Array}
   */
  getSelectedOption(_boundID) {
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);
    if (queIdx === -1) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "402", "val"));
      return;
    }
    return __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].deepCopy(this.queue[queIdx].selected);
  }

  /**
   * @method
   * @return {AX6UIAutocomplete}
   */
  close(item) {
    if (this.closeTimer) clearTimeout(this.closeTimer);
    if (!this.activeautocompleteOptionGroup) return this;

    item = this.queue[this.activeautocompleteQueueIndex];
    item.optionFocusIndex = -1;
    item.$display.removeAttr("data-autocomplete-option-group-opened").trigger("focus");

    this.activeautocompleteOptionGroup.addClass("destroy");

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(window).off("resize.ax6ui-autocomplete-" + this.instanceId).off("click.ax6ui-autocomplete-" + this.instanceId).off("keyup.ax6ui-autocomplete-" + this.instanceId);

    this.closeTimer = setTimeout(function () {
      if (this.activeautocompleteOptionGroup) this.activeautocompleteOptionGroup.remove();
      this.activeautocompleteOptionGroup = null;
      this.activeautocompleteQueueIndex = -1;

      onStateChanged.call(this, item, {
        self: this,
        state: "close"
      });
    }.bind(this), this.config.animateTime);
    this.waitOptionsCallback = null;
    return this;
  }

  /**
   * @method
   * @param {(jQueryObject|Element|Number)} _boundID
   * @return {AX6UIAutocomplete}
   */
  blur(_boundID) {
    let queIdx = __WEBPACK_IMPORTED_MODULE_3__AX6Util__["a" /* default */].isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);
    if (queIdx === -1) {
      console.log(__WEBPACK_IMPORTED_MODULE_2__AX6Info__["a" /* default */].getError("ax6ui-autocomplete", "402", "val"));
      return;
    }

    blurLabel.call(this, queIdx);
    return this;
  }

  /**
   * @method
   * @param {(jQueryObject|Element|Number)} _boundID
   * @return {AX6UIAutocomplete}
   */
  enable(_boundID) {
    let queIdx = getQueIdx.call(this, _boundID);

    if (typeof queIdx !== "undefined") {
      this.queue[queIdx].disable = false;
      if (this.queue[queIdx].$display[0]) {
        this.queue[queIdx].$display.removeAttr("disabled");
        this.queue[queIdx].$displayLabelInput.removeAttr("disabled");
      }
      if (this.queue[queIdx].$select[0]) {
        this.queue[queIdx].$select.removeAttr("disabled");
      }

      onStateChanged.call(this, this.queue[queIdx], {
        self: this,
        state: "enable"
      });
    }

    return this;
  }

  /**
   * @method
   * @param {(jQueryObject|Element|Number)} _boundID
   * @return {AX6UIAutocomplete}
   */
  disable(_boundID) {
    let queIdx = getQueIdx.call(this, _boundID);

    if (typeof queIdx !== "undefined") {
      this.queue[queIdx].disable = true;
      if (this.queue[queIdx].$display[0]) {
        this.queue[queIdx].$display.attr("disabled", "disabled");
        this.queue[queIdx].$displayLabelInput.attr("disabled", "disabled");
      }
      if (this.queue[queIdx].$select[0]) {
        this.queue[queIdx].$select.attr("disabled", "disabled");
      }

      onStateChanged.call(this, this.queue[queIdx], {
        self: this,
        state: "disable"
      });
    }

    return this;
  }

  /**
   * @method
   * @return {AX6UIAutocomplete}
   */
  align() {
    alignAutocompleteDisplay.call(this);
    return this;
  }

}

/* harmony default export */ __webpack_exports__["a"] = (AX6UIAutocomplete);

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jqmin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jqmin__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AX6UICore__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AX6Util__ = __webpack_require__(0);



/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */

/* ~~~~~~~~~~~~~~~~~~ end of private  ~~~~~~~~~~~~~~~~~~~~ */

/**
 * @class
 */
class AX6UISideNav extends __WEBPACK_IMPORTED_MODULE_1__AX6UICore__["a" /* default */] {
  /**
   * @constructor
   * @param config
   */
  constructor(config) {
    super();

    /**
     * @member {JSON}
     * @param config
     * @param config.menu
     * @param [config.menu.width=256]
     * @param [config.menu.position='left']
     * @param config.menu.target
     * @param config.panel
     * @param config.panel.target
     *
     */
    this.config = {
      menu: {
        width: 256,
        position: "left"
      },
      panel: {},
      transition: {
        duration: 300,
        easing: 'ease'
      }

    };
    __WEBPACK_IMPORTED_MODULE_2__AX6Util__["a" /* default */].extend(true, this.config, config);

    // 멤버 변수 초기화
    this.$targetMenu = null;
    this.$targetPanel = null;

    this.animating = false;
    this.opened = false;

    if (typeof config !== "undefined") this.init();
  }

  /**
   * @method
   */
  init() {
    if (!this.config.menu.target || !this.config.panel.target) {
      console.error('Can not found config.menu.target, config.panel.target');
    }

    this.$targetMenu = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.menu.target);
    this.$targetPanel = __WEBPACK_IMPORTED_MODULE_0_jqmin___default()(this.config.panel.target);

    this.$targetMenu.css({ width: this.config.menu.width }).attr("data-ax6ui-sidenav-position", this.config.menu.position);
    this.$targetPanel.attr("data-ax6ui-sidenav-position", this.config.menu.position).on('click', e => {
      if (this.opened) this.close();
    });

    // init 호출 여부
    this.initOnce();
  }

  /**
   * @method
   */
  initOnce() {
    if (this.initialized) return this;
    this.initialized = true;
  }

  open() {
    if (this.animating) return this;

    __WEBPACK_IMPORTED_MODULE_0_jqmin___default()('html').attr('data-ax6ui-sidenav-open', 'true');

    this.$targetPanel.css({
      'transform': 'translateX(' + this.config.menu.width + 'px)',
      '-webkit-transition': 'transform ' + this.config.transition.duration + 'ms ' + this.config.transition.easing
    });

    setTimeout(() => {
      this.opened = true;
    }, this.config.transition.duration);

    return this;
  }

  close() {
    if (this.animating) return this;

    this.$targetPanel.css({
      'transform': 'translateX(0px)',
      '-webkit-transition': 'transform ' + this.config.transition.duration + 'ms ' + this.config.transition.easing
    });

    setTimeout(() => {
      __WEBPACK_IMPORTED_MODULE_0_jqmin___default()('html').attr('data-ax6ui-sidenav-open', null);
      this.opened = false;
    }, this.config.transition.duration);

    return this;
  }
}

/* harmony default export */ __webpack_exports__["a"] = (AX6UISideNav);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(35);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../css-loader/index.js!../../sass-loader/lib/loader.js!./style.scss", function() {
			var newContent = require("!!../../css-loader/index.js!../../sass-loader/lib/loader.js!./style.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(7)(undefined);
// imports


// module
exports.push([module.i, "html[data-ax6ui-sidenav-open] {\n  overflow: hidden; }\n  html[data-ax6ui-sidenav-open] [data-ax6ui-sidenav-menu] {\n    display: block; }\n  html[data-ax6ui-sidenav-open] [data-ax6ui-sidenav-panel] {\n    overflow: hidden; }\n\n[data-ax6ui-sidenav-panel] {\n  position: relative;\n  z-index: 1;\n  will-change: transform;\n  min-height: 100%; }\n\n[data-ax6ui-sidenav-menu] {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  width: 256px;\n  height: 100%;\n  min-height: 100%;\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  z-index: 0;\n  display: none;\n  margin: 0; }\n  [data-ax6ui-sidenav-menu][data-ax6ui-sidenav-position=\"left\"] {\n    left: 0; }\n  [data-ax6ui-sidenav-menu][data-ax6ui-sidenav-position=\"right\"] {\n    right: 0; }\n", ""]);

// exports


/***/ }),
/* 36 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(38);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(11)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./sample.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./sample.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(7)(undefined);
// imports
exports.i(__webpack_require__(39), "");

// module
exports.push([module.i, ".materialize-red {\n  background-color: #e51c23 !important; }\n\n.materialize-red-text {\n  color: #e51c23 !important; }\n\n.materialize-red.lighten-5 {\n  background-color: #fdeaeb !important; }\n\n.materialize-red-text.text-lighten-5 {\n  color: #fdeaeb !important; }\n\n.materialize-red.lighten-4 {\n  background-color: #f8c1c3 !important; }\n\n.materialize-red-text.text-lighten-4 {\n  color: #f8c1c3 !important; }\n\n.materialize-red.lighten-3 {\n  background-color: #f3989b !important; }\n\n.materialize-red-text.text-lighten-3 {\n  color: #f3989b !important; }\n\n.materialize-red.lighten-2 {\n  background-color: #ee6e73 !important; }\n\n.materialize-red-text.text-lighten-2 {\n  color: #ee6e73 !important; }\n\n.materialize-red.lighten-1 {\n  background-color: #ea454b !important; }\n\n.materialize-red-text.text-lighten-1 {\n  color: #ea454b !important; }\n\n.materialize-red.darken-1 {\n  background-color: #d0181e !important; }\n\n.materialize-red-text.text-darken-1 {\n  color: #d0181e !important; }\n\n.materialize-red.darken-2 {\n  background-color: #b9151b !important; }\n\n.materialize-red-text.text-darken-2 {\n  color: #b9151b !important; }\n\n.materialize-red.darken-3 {\n  background-color: #a21318 !important; }\n\n.materialize-red-text.text-darken-3 {\n  color: #a21318 !important; }\n\n.materialize-red.darken-4 {\n  background-color: #8b1014 !important; }\n\n.materialize-red-text.text-darken-4 {\n  color: #8b1014 !important; }\n\n.red {\n  background-color: #F44336 !important; }\n\n.red-text {\n  color: #F44336 !important; }\n\n.red.lighten-5 {\n  background-color: #FFEBEE !important; }\n\n.red-text.text-lighten-5 {\n  color: #FFEBEE !important; }\n\n.red.lighten-4 {\n  background-color: #FFCDD2 !important; }\n\n.red-text.text-lighten-4 {\n  color: #FFCDD2 !important; }\n\n.red.lighten-3 {\n  background-color: #EF9A9A !important; }\n\n.red-text.text-lighten-3 {\n  color: #EF9A9A !important; }\n\n.red.lighten-2 {\n  background-color: #E57373 !important; }\n\n.red-text.text-lighten-2 {\n  color: #E57373 !important; }\n\n.red.lighten-1 {\n  background-color: #EF5350 !important; }\n\n.red-text.text-lighten-1 {\n  color: #EF5350 !important; }\n\n.red.darken-1 {\n  background-color: #E53935 !important; }\n\n.red-text.text-darken-1 {\n  color: #E53935 !important; }\n\n.red.darken-2 {\n  background-color: #D32F2F !important; }\n\n.red-text.text-darken-2 {\n  color: #D32F2F !important; }\n\n.red.darken-3 {\n  background-color: #C62828 !important; }\n\n.red-text.text-darken-3 {\n  color: #C62828 !important; }\n\n.red.darken-4 {\n  background-color: #B71C1C !important; }\n\n.red-text.text-darken-4 {\n  color: #B71C1C !important; }\n\n.red.accent-1 {\n  background-color: #FF8A80 !important; }\n\n.red-text.text-accent-1 {\n  color: #FF8A80 !important; }\n\n.red.accent-2 {\n  background-color: #FF5252 !important; }\n\n.red-text.text-accent-2 {\n  color: #FF5252 !important; }\n\n.red.accent-3 {\n  background-color: #FF1744 !important; }\n\n.red-text.text-accent-3 {\n  color: #FF1744 !important; }\n\n.red.accent-4 {\n  background-color: #D50000 !important; }\n\n.red-text.text-accent-4 {\n  color: #D50000 !important; }\n\n.pink {\n  background-color: #e91e63 !important; }\n\n.pink-text {\n  color: #e91e63 !important; }\n\n.pink.lighten-5 {\n  background-color: #fce4ec !important; }\n\n.pink-text.text-lighten-5 {\n  color: #fce4ec !important; }\n\n.pink.lighten-4 {\n  background-color: #f8bbd0 !important; }\n\n.pink-text.text-lighten-4 {\n  color: #f8bbd0 !important; }\n\n.pink.lighten-3 {\n  background-color: #f48fb1 !important; }\n\n.pink-text.text-lighten-3 {\n  color: #f48fb1 !important; }\n\n.pink.lighten-2 {\n  background-color: #f06292 !important; }\n\n.pink-text.text-lighten-2 {\n  color: #f06292 !important; }\n\n.pink.lighten-1 {\n  background-color: #ec407a !important; }\n\n.pink-text.text-lighten-1 {\n  color: #ec407a !important; }\n\n.pink.darken-1 {\n  background-color: #d81b60 !important; }\n\n.pink-text.text-darken-1 {\n  color: #d81b60 !important; }\n\n.pink.darken-2 {\n  background-color: #c2185b !important; }\n\n.pink-text.text-darken-2 {\n  color: #c2185b !important; }\n\n.pink.darken-3 {\n  background-color: #ad1457 !important; }\n\n.pink-text.text-darken-3 {\n  color: #ad1457 !important; }\n\n.pink.darken-4 {\n  background-color: #880e4f !important; }\n\n.pink-text.text-darken-4 {\n  color: #880e4f !important; }\n\n.pink.accent-1 {\n  background-color: #ff80ab !important; }\n\n.pink-text.text-accent-1 {\n  color: #ff80ab !important; }\n\n.pink.accent-2 {\n  background-color: #ff4081 !important; }\n\n.pink-text.text-accent-2 {\n  color: #ff4081 !important; }\n\n.pink.accent-3 {\n  background-color: #f50057 !important; }\n\n.pink-text.text-accent-3 {\n  color: #f50057 !important; }\n\n.pink.accent-4 {\n  background-color: #c51162 !important; }\n\n.pink-text.text-accent-4 {\n  color: #c51162 !important; }\n\n.purple {\n  background-color: #9c27b0 !important; }\n\n.purple-text {\n  color: #9c27b0 !important; }\n\n.purple.lighten-5 {\n  background-color: #f3e5f5 !important; }\n\n.purple-text.text-lighten-5 {\n  color: #f3e5f5 !important; }\n\n.purple.lighten-4 {\n  background-color: #e1bee7 !important; }\n\n.purple-text.text-lighten-4 {\n  color: #e1bee7 !important; }\n\n.purple.lighten-3 {\n  background-color: #ce93d8 !important; }\n\n.purple-text.text-lighten-3 {\n  color: #ce93d8 !important; }\n\n.purple.lighten-2 {\n  background-color: #ba68c8 !important; }\n\n.purple-text.text-lighten-2 {\n  color: #ba68c8 !important; }\n\n.purple.lighten-1 {\n  background-color: #ab47bc !important; }\n\n.purple-text.text-lighten-1 {\n  color: #ab47bc !important; }\n\n.purple.darken-1 {\n  background-color: #8e24aa !important; }\n\n.purple-text.text-darken-1 {\n  color: #8e24aa !important; }\n\n.purple.darken-2 {\n  background-color: #7b1fa2 !important; }\n\n.purple-text.text-darken-2 {\n  color: #7b1fa2 !important; }\n\n.purple.darken-3 {\n  background-color: #6a1b9a !important; }\n\n.purple-text.text-darken-3 {\n  color: #6a1b9a !important; }\n\n.purple.darken-4 {\n  background-color: #4a148c !important; }\n\n.purple-text.text-darken-4 {\n  color: #4a148c !important; }\n\n.purple.accent-1 {\n  background-color: #ea80fc !important; }\n\n.purple-text.text-accent-1 {\n  color: #ea80fc !important; }\n\n.purple.accent-2 {\n  background-color: #e040fb !important; }\n\n.purple-text.text-accent-2 {\n  color: #e040fb !important; }\n\n.purple.accent-3 {\n  background-color: #d500f9 !important; }\n\n.purple-text.text-accent-3 {\n  color: #d500f9 !important; }\n\n.purple.accent-4 {\n  background-color: #aa00ff !important; }\n\n.purple-text.text-accent-4 {\n  color: #aa00ff !important; }\n\n.deep-purple {\n  background-color: #673ab7 !important; }\n\n.deep-purple-text {\n  color: #673ab7 !important; }\n\n.deep-purple.lighten-5 {\n  background-color: #ede7f6 !important; }\n\n.deep-purple-text.text-lighten-5 {\n  color: #ede7f6 !important; }\n\n.deep-purple.lighten-4 {\n  background-color: #d1c4e9 !important; }\n\n.deep-purple-text.text-lighten-4 {\n  color: #d1c4e9 !important; }\n\n.deep-purple.lighten-3 {\n  background-color: #b39ddb !important; }\n\n.deep-purple-text.text-lighten-3 {\n  color: #b39ddb !important; }\n\n.deep-purple.lighten-2 {\n  background-color: #9575cd !important; }\n\n.deep-purple-text.text-lighten-2 {\n  color: #9575cd !important; }\n\n.deep-purple.lighten-1 {\n  background-color: #7e57c2 !important; }\n\n.deep-purple-text.text-lighten-1 {\n  color: #7e57c2 !important; }\n\n.deep-purple.darken-1 {\n  background-color: #5e35b1 !important; }\n\n.deep-purple-text.text-darken-1 {\n  color: #5e35b1 !important; }\n\n.deep-purple.darken-2 {\n  background-color: #512da8 !important; }\n\n.deep-purple-text.text-darken-2 {\n  color: #512da8 !important; }\n\n.deep-purple.darken-3 {\n  background-color: #4527a0 !important; }\n\n.deep-purple-text.text-darken-3 {\n  color: #4527a0 !important; }\n\n.deep-purple.darken-4 {\n  background-color: #311b92 !important; }\n\n.deep-purple-text.text-darken-4 {\n  color: #311b92 !important; }\n\n.deep-purple.accent-1 {\n  background-color: #b388ff !important; }\n\n.deep-purple-text.text-accent-1 {\n  color: #b388ff !important; }\n\n.deep-purple.accent-2 {\n  background-color: #7c4dff !important; }\n\n.deep-purple-text.text-accent-2 {\n  color: #7c4dff !important; }\n\n.deep-purple.accent-3 {\n  background-color: #651fff !important; }\n\n.deep-purple-text.text-accent-3 {\n  color: #651fff !important; }\n\n.deep-purple.accent-4 {\n  background-color: #6200ea !important; }\n\n.deep-purple-text.text-accent-4 {\n  color: #6200ea !important; }\n\n.indigo {\n  background-color: #3f51b5 !important; }\n\n.indigo-text {\n  color: #3f51b5 !important; }\n\n.indigo.lighten-5 {\n  background-color: #e8eaf6 !important; }\n\n.indigo-text.text-lighten-5 {\n  color: #e8eaf6 !important; }\n\n.indigo.lighten-4 {\n  background-color: #c5cae9 !important; }\n\n.indigo-text.text-lighten-4 {\n  color: #c5cae9 !important; }\n\n.indigo.lighten-3 {\n  background-color: #9fa8da !important; }\n\n.indigo-text.text-lighten-3 {\n  color: #9fa8da !important; }\n\n.indigo.lighten-2 {\n  background-color: #7986cb !important; }\n\n.indigo-text.text-lighten-2 {\n  color: #7986cb !important; }\n\n.indigo.lighten-1 {\n  background-color: #5c6bc0 !important; }\n\n.indigo-text.text-lighten-1 {\n  color: #5c6bc0 !important; }\n\n.indigo.darken-1 {\n  background-color: #3949ab !important; }\n\n.indigo-text.text-darken-1 {\n  color: #3949ab !important; }\n\n.indigo.darken-2 {\n  background-color: #303f9f !important; }\n\n.indigo-text.text-darken-2 {\n  color: #303f9f !important; }\n\n.indigo.darken-3 {\n  background-color: #283593 !important; }\n\n.indigo-text.text-darken-3 {\n  color: #283593 !important; }\n\n.indigo.darken-4 {\n  background-color: #1a237e !important; }\n\n.indigo-text.text-darken-4 {\n  color: #1a237e !important; }\n\n.indigo.accent-1 {\n  background-color: #8c9eff !important; }\n\n.indigo-text.text-accent-1 {\n  color: #8c9eff !important; }\n\n.indigo.accent-2 {\n  background-color: #536dfe !important; }\n\n.indigo-text.text-accent-2 {\n  color: #536dfe !important; }\n\n.indigo.accent-3 {\n  background-color: #3d5afe !important; }\n\n.indigo-text.text-accent-3 {\n  color: #3d5afe !important; }\n\n.indigo.accent-4 {\n  background-color: #304ffe !important; }\n\n.indigo-text.text-accent-4 {\n  color: #304ffe !important; }\n\n.blue {\n  background-color: #2196F3 !important; }\n\n.blue-text {\n  color: #2196F3 !important; }\n\n.blue.lighten-5 {\n  background-color: #E3F2FD !important; }\n\n.blue-text.text-lighten-5 {\n  color: #E3F2FD !important; }\n\n.blue.lighten-4 {\n  background-color: #BBDEFB !important; }\n\n.blue-text.text-lighten-4 {\n  color: #BBDEFB !important; }\n\n.blue.lighten-3 {\n  background-color: #90CAF9 !important; }\n\n.blue-text.text-lighten-3 {\n  color: #90CAF9 !important; }\n\n.blue.lighten-2 {\n  background-color: #64B5F6 !important; }\n\n.blue-text.text-lighten-2 {\n  color: #64B5F6 !important; }\n\n.blue.lighten-1 {\n  background-color: #42A5F5 !important; }\n\n.blue-text.text-lighten-1 {\n  color: #42A5F5 !important; }\n\n.blue.darken-1 {\n  background-color: #1E88E5 !important; }\n\n.blue-text.text-darken-1 {\n  color: #1E88E5 !important; }\n\n.blue.darken-2 {\n  background-color: #1976D2 !important; }\n\n.blue-text.text-darken-2 {\n  color: #1976D2 !important; }\n\n.blue.darken-3 {\n  background-color: #1565C0 !important; }\n\n.blue-text.text-darken-3 {\n  color: #1565C0 !important; }\n\n.blue.darken-4 {\n  background-color: #0D47A1 !important; }\n\n.blue-text.text-darken-4 {\n  color: #0D47A1 !important; }\n\n.blue.accent-1 {\n  background-color: #82B1FF !important; }\n\n.blue-text.text-accent-1 {\n  color: #82B1FF !important; }\n\n.blue.accent-2 {\n  background-color: #448AFF !important; }\n\n.blue-text.text-accent-2 {\n  color: #448AFF !important; }\n\n.blue.accent-3 {\n  background-color: #2979FF !important; }\n\n.blue-text.text-accent-3 {\n  color: #2979FF !important; }\n\n.blue.accent-4 {\n  background-color: #2962FF !important; }\n\n.blue-text.text-accent-4 {\n  color: #2962FF !important; }\n\n.light-blue {\n  background-color: #03a9f4 !important; }\n\n.light-blue-text {\n  color: #03a9f4 !important; }\n\n.light-blue.lighten-5 {\n  background-color: #e1f5fe !important; }\n\n.light-blue-text.text-lighten-5 {\n  color: #e1f5fe !important; }\n\n.light-blue.lighten-4 {\n  background-color: #b3e5fc !important; }\n\n.light-blue-text.text-lighten-4 {\n  color: #b3e5fc !important; }\n\n.light-blue.lighten-3 {\n  background-color: #81d4fa !important; }\n\n.light-blue-text.text-lighten-3 {\n  color: #81d4fa !important; }\n\n.light-blue.lighten-2 {\n  background-color: #4fc3f7 !important; }\n\n.light-blue-text.text-lighten-2 {\n  color: #4fc3f7 !important; }\n\n.light-blue.lighten-1 {\n  background-color: #29b6f6 !important; }\n\n.light-blue-text.text-lighten-1 {\n  color: #29b6f6 !important; }\n\n.light-blue.darken-1 {\n  background-color: #039be5 !important; }\n\n.light-blue-text.text-darken-1 {\n  color: #039be5 !important; }\n\n.light-blue.darken-2 {\n  background-color: #0288d1 !important; }\n\n.light-blue-text.text-darken-2 {\n  color: #0288d1 !important; }\n\n.light-blue.darken-3 {\n  background-color: #0277bd !important; }\n\n.light-blue-text.text-darken-3 {\n  color: #0277bd !important; }\n\n.light-blue.darken-4 {\n  background-color: #01579b !important; }\n\n.light-blue-text.text-darken-4 {\n  color: #01579b !important; }\n\n.light-blue.accent-1 {\n  background-color: #80d8ff !important; }\n\n.light-blue-text.text-accent-1 {\n  color: #80d8ff !important; }\n\n.light-blue.accent-2 {\n  background-color: #40c4ff !important; }\n\n.light-blue-text.text-accent-2 {\n  color: #40c4ff !important; }\n\n.light-blue.accent-3 {\n  background-color: #00b0ff !important; }\n\n.light-blue-text.text-accent-3 {\n  color: #00b0ff !important; }\n\n.light-blue.accent-4 {\n  background-color: #0091ea !important; }\n\n.light-blue-text.text-accent-4 {\n  color: #0091ea !important; }\n\n.cyan {\n  background-color: #00bcd4 !important; }\n\n.cyan-text {\n  color: #00bcd4 !important; }\n\n.cyan.lighten-5 {\n  background-color: #e0f7fa !important; }\n\n.cyan-text.text-lighten-5 {\n  color: #e0f7fa !important; }\n\n.cyan.lighten-4 {\n  background-color: #b2ebf2 !important; }\n\n.cyan-text.text-lighten-4 {\n  color: #b2ebf2 !important; }\n\n.cyan.lighten-3 {\n  background-color: #80deea !important; }\n\n.cyan-text.text-lighten-3 {\n  color: #80deea !important; }\n\n.cyan.lighten-2 {\n  background-color: #4dd0e1 !important; }\n\n.cyan-text.text-lighten-2 {\n  color: #4dd0e1 !important; }\n\n.cyan.lighten-1 {\n  background-color: #26c6da !important; }\n\n.cyan-text.text-lighten-1 {\n  color: #26c6da !important; }\n\n.cyan.darken-1 {\n  background-color: #00acc1 !important; }\n\n.cyan-text.text-darken-1 {\n  color: #00acc1 !important; }\n\n.cyan.darken-2 {\n  background-color: #0097a7 !important; }\n\n.cyan-text.text-darken-2 {\n  color: #0097a7 !important; }\n\n.cyan.darken-3 {\n  background-color: #00838f !important; }\n\n.cyan-text.text-darken-3 {\n  color: #00838f !important; }\n\n.cyan.darken-4 {\n  background-color: #006064 !important; }\n\n.cyan-text.text-darken-4 {\n  color: #006064 !important; }\n\n.cyan.accent-1 {\n  background-color: #84ffff !important; }\n\n.cyan-text.text-accent-1 {\n  color: #84ffff !important; }\n\n.cyan.accent-2 {\n  background-color: #18ffff !important; }\n\n.cyan-text.text-accent-2 {\n  color: #18ffff !important; }\n\n.cyan.accent-3 {\n  background-color: #00e5ff !important; }\n\n.cyan-text.text-accent-3 {\n  color: #00e5ff !important; }\n\n.cyan.accent-4 {\n  background-color: #00b8d4 !important; }\n\n.cyan-text.text-accent-4 {\n  color: #00b8d4 !important; }\n\n.teal {\n  background-color: #009688 !important; }\n\n.teal-text {\n  color: #009688 !important; }\n\n.teal.lighten-5 {\n  background-color: #e0f2f1 !important; }\n\n.teal-text.text-lighten-5 {\n  color: #e0f2f1 !important; }\n\n.teal.lighten-4 {\n  background-color: #b2dfdb !important; }\n\n.teal-text.text-lighten-4 {\n  color: #b2dfdb !important; }\n\n.teal.lighten-3 {\n  background-color: #80cbc4 !important; }\n\n.teal-text.text-lighten-3 {\n  color: #80cbc4 !important; }\n\n.teal.lighten-2 {\n  background-color: #4db6ac !important; }\n\n.teal-text.text-lighten-2 {\n  color: #4db6ac !important; }\n\n.teal.lighten-1 {\n  background-color: #26a69a !important; }\n\n.teal-text.text-lighten-1 {\n  color: #26a69a !important; }\n\n.teal.darken-1 {\n  background-color: #00897b !important; }\n\n.teal-text.text-darken-1 {\n  color: #00897b !important; }\n\n.teal.darken-2 {\n  background-color: #00796b !important; }\n\n.teal-text.text-darken-2 {\n  color: #00796b !important; }\n\n.teal.darken-3 {\n  background-color: #00695c !important; }\n\n.teal-text.text-darken-3 {\n  color: #00695c !important; }\n\n.teal.darken-4 {\n  background-color: #004d40 !important; }\n\n.teal-text.text-darken-4 {\n  color: #004d40 !important; }\n\n.teal.accent-1 {\n  background-color: #a7ffeb !important; }\n\n.teal-text.text-accent-1 {\n  color: #a7ffeb !important; }\n\n.teal.accent-2 {\n  background-color: #64ffda !important; }\n\n.teal-text.text-accent-2 {\n  color: #64ffda !important; }\n\n.teal.accent-3 {\n  background-color: #1de9b6 !important; }\n\n.teal-text.text-accent-3 {\n  color: #1de9b6 !important; }\n\n.teal.accent-4 {\n  background-color: #00bfa5 !important; }\n\n.teal-text.text-accent-4 {\n  color: #00bfa5 !important; }\n\n.green {\n  background-color: #4CAF50 !important; }\n\n.green-text {\n  color: #4CAF50 !important; }\n\n.green.lighten-5 {\n  background-color: #E8F5E9 !important; }\n\n.green-text.text-lighten-5 {\n  color: #E8F5E9 !important; }\n\n.green.lighten-4 {\n  background-color: #C8E6C9 !important; }\n\n.green-text.text-lighten-4 {\n  color: #C8E6C9 !important; }\n\n.green.lighten-3 {\n  background-color: #A5D6A7 !important; }\n\n.green-text.text-lighten-3 {\n  color: #A5D6A7 !important; }\n\n.green.lighten-2 {\n  background-color: #81C784 !important; }\n\n.green-text.text-lighten-2 {\n  color: #81C784 !important; }\n\n.green.lighten-1 {\n  background-color: #66BB6A !important; }\n\n.green-text.text-lighten-1 {\n  color: #66BB6A !important; }\n\n.green.darken-1 {\n  background-color: #43A047 !important; }\n\n.green-text.text-darken-1 {\n  color: #43A047 !important; }\n\n.green.darken-2 {\n  background-color: #388E3C !important; }\n\n.green-text.text-darken-2 {\n  color: #388E3C !important; }\n\n.green.darken-3 {\n  background-color: #2E7D32 !important; }\n\n.green-text.text-darken-3 {\n  color: #2E7D32 !important; }\n\n.green.darken-4 {\n  background-color: #1B5E20 !important; }\n\n.green-text.text-darken-4 {\n  color: #1B5E20 !important; }\n\n.green.accent-1 {\n  background-color: #B9F6CA !important; }\n\n.green-text.text-accent-1 {\n  color: #B9F6CA !important; }\n\n.green.accent-2 {\n  background-color: #69F0AE !important; }\n\n.green-text.text-accent-2 {\n  color: #69F0AE !important; }\n\n.green.accent-3 {\n  background-color: #00E676 !important; }\n\n.green-text.text-accent-3 {\n  color: #00E676 !important; }\n\n.green.accent-4 {\n  background-color: #00C853 !important; }\n\n.green-text.text-accent-4 {\n  color: #00C853 !important; }\n\n.light-green {\n  background-color: #8bc34a !important; }\n\n.light-green-text {\n  color: #8bc34a !important; }\n\n.light-green.lighten-5 {\n  background-color: #f1f8e9 !important; }\n\n.light-green-text.text-lighten-5 {\n  color: #f1f8e9 !important; }\n\n.light-green.lighten-4 {\n  background-color: #dcedc8 !important; }\n\n.light-green-text.text-lighten-4 {\n  color: #dcedc8 !important; }\n\n.light-green.lighten-3 {\n  background-color: #c5e1a5 !important; }\n\n.light-green-text.text-lighten-3 {\n  color: #c5e1a5 !important; }\n\n.light-green.lighten-2 {\n  background-color: #aed581 !important; }\n\n.light-green-text.text-lighten-2 {\n  color: #aed581 !important; }\n\n.light-green.lighten-1 {\n  background-color: #9ccc65 !important; }\n\n.light-green-text.text-lighten-1 {\n  color: #9ccc65 !important; }\n\n.light-green.darken-1 {\n  background-color: #7cb342 !important; }\n\n.light-green-text.text-darken-1 {\n  color: #7cb342 !important; }\n\n.light-green.darken-2 {\n  background-color: #689f38 !important; }\n\n.light-green-text.text-darken-2 {\n  color: #689f38 !important; }\n\n.light-green.darken-3 {\n  background-color: #558b2f !important; }\n\n.light-green-text.text-darken-3 {\n  color: #558b2f !important; }\n\n.light-green.darken-4 {\n  background-color: #33691e !important; }\n\n.light-green-text.text-darken-4 {\n  color: #33691e !important; }\n\n.light-green.accent-1 {\n  background-color: #ccff90 !important; }\n\n.light-green-text.text-accent-1 {\n  color: #ccff90 !important; }\n\n.light-green.accent-2 {\n  background-color: #b2ff59 !important; }\n\n.light-green-text.text-accent-2 {\n  color: #b2ff59 !important; }\n\n.light-green.accent-3 {\n  background-color: #76ff03 !important; }\n\n.light-green-text.text-accent-3 {\n  color: #76ff03 !important; }\n\n.light-green.accent-4 {\n  background-color: #64dd17 !important; }\n\n.light-green-text.text-accent-4 {\n  color: #64dd17 !important; }\n\n.lime {\n  background-color: #cddc39 !important; }\n\n.lime-text {\n  color: #cddc39 !important; }\n\n.lime.lighten-5 {\n  background-color: #f9fbe7 !important; }\n\n.lime-text.text-lighten-5 {\n  color: #f9fbe7 !important; }\n\n.lime.lighten-4 {\n  background-color: #f0f4c3 !important; }\n\n.lime-text.text-lighten-4 {\n  color: #f0f4c3 !important; }\n\n.lime.lighten-3 {\n  background-color: #e6ee9c !important; }\n\n.lime-text.text-lighten-3 {\n  color: #e6ee9c !important; }\n\n.lime.lighten-2 {\n  background-color: #dce775 !important; }\n\n.lime-text.text-lighten-2 {\n  color: #dce775 !important; }\n\n.lime.lighten-1 {\n  background-color: #d4e157 !important; }\n\n.lime-text.text-lighten-1 {\n  color: #d4e157 !important; }\n\n.lime.darken-1 {\n  background-color: #c0ca33 !important; }\n\n.lime-text.text-darken-1 {\n  color: #c0ca33 !important; }\n\n.lime.darken-2 {\n  background-color: #afb42b !important; }\n\n.lime-text.text-darken-2 {\n  color: #afb42b !important; }\n\n.lime.darken-3 {\n  background-color: #9e9d24 !important; }\n\n.lime-text.text-darken-3 {\n  color: #9e9d24 !important; }\n\n.lime.darken-4 {\n  background-color: #827717 !important; }\n\n.lime-text.text-darken-4 {\n  color: #827717 !important; }\n\n.lime.accent-1 {\n  background-color: #f4ff81 !important; }\n\n.lime-text.text-accent-1 {\n  color: #f4ff81 !important; }\n\n.lime.accent-2 {\n  background-color: #eeff41 !important; }\n\n.lime-text.text-accent-2 {\n  color: #eeff41 !important; }\n\n.lime.accent-3 {\n  background-color: #c6ff00 !important; }\n\n.lime-text.text-accent-3 {\n  color: #c6ff00 !important; }\n\n.lime.accent-4 {\n  background-color: #aeea00 !important; }\n\n.lime-text.text-accent-4 {\n  color: #aeea00 !important; }\n\n.yellow {\n  background-color: #ffeb3b !important; }\n\n.yellow-text {\n  color: #ffeb3b !important; }\n\n.yellow.lighten-5 {\n  background-color: #fffde7 !important; }\n\n.yellow-text.text-lighten-5 {\n  color: #fffde7 !important; }\n\n.yellow.lighten-4 {\n  background-color: #fff9c4 !important; }\n\n.yellow-text.text-lighten-4 {\n  color: #fff9c4 !important; }\n\n.yellow.lighten-3 {\n  background-color: #fff59d !important; }\n\n.yellow-text.text-lighten-3 {\n  color: #fff59d !important; }\n\n.yellow.lighten-2 {\n  background-color: #fff176 !important; }\n\n.yellow-text.text-lighten-2 {\n  color: #fff176 !important; }\n\n.yellow.lighten-1 {\n  background-color: #ffee58 !important; }\n\n.yellow-text.text-lighten-1 {\n  color: #ffee58 !important; }\n\n.yellow.darken-1 {\n  background-color: #fdd835 !important; }\n\n.yellow-text.text-darken-1 {\n  color: #fdd835 !important; }\n\n.yellow.darken-2 {\n  background-color: #fbc02d !important; }\n\n.yellow-text.text-darken-2 {\n  color: #fbc02d !important; }\n\n.yellow.darken-3 {\n  background-color: #f9a825 !important; }\n\n.yellow-text.text-darken-3 {\n  color: #f9a825 !important; }\n\n.yellow.darken-4 {\n  background-color: #f57f17 !important; }\n\n.yellow-text.text-darken-4 {\n  color: #f57f17 !important; }\n\n.yellow.accent-1 {\n  background-color: #ffff8d !important; }\n\n.yellow-text.text-accent-1 {\n  color: #ffff8d !important; }\n\n.yellow.accent-2 {\n  background-color: #ffff00 !important; }\n\n.yellow-text.text-accent-2 {\n  color: #ffff00 !important; }\n\n.yellow.accent-3 {\n  background-color: #ffea00 !important; }\n\n.yellow-text.text-accent-3 {\n  color: #ffea00 !important; }\n\n.yellow.accent-4 {\n  background-color: #ffd600 !important; }\n\n.yellow-text.text-accent-4 {\n  color: #ffd600 !important; }\n\n.amber {\n  background-color: #ffc107 !important; }\n\n.amber-text {\n  color: #ffc107 !important; }\n\n.amber.lighten-5 {\n  background-color: #fff8e1 !important; }\n\n.amber-text.text-lighten-5 {\n  color: #fff8e1 !important; }\n\n.amber.lighten-4 {\n  background-color: #ffecb3 !important; }\n\n.amber-text.text-lighten-4 {\n  color: #ffecb3 !important; }\n\n.amber.lighten-3 {\n  background-color: #ffe082 !important; }\n\n.amber-text.text-lighten-3 {\n  color: #ffe082 !important; }\n\n.amber.lighten-2 {\n  background-color: #ffd54f !important; }\n\n.amber-text.text-lighten-2 {\n  color: #ffd54f !important; }\n\n.amber.lighten-1 {\n  background-color: #ffca28 !important; }\n\n.amber-text.text-lighten-1 {\n  color: #ffca28 !important; }\n\n.amber.darken-1 {\n  background-color: #ffb300 !important; }\n\n.amber-text.text-darken-1 {\n  color: #ffb300 !important; }\n\n.amber.darken-2 {\n  background-color: #ffa000 !important; }\n\n.amber-text.text-darken-2 {\n  color: #ffa000 !important; }\n\n.amber.darken-3 {\n  background-color: #ff8f00 !important; }\n\n.amber-text.text-darken-3 {\n  color: #ff8f00 !important; }\n\n.amber.darken-4 {\n  background-color: #ff6f00 !important; }\n\n.amber-text.text-darken-4 {\n  color: #ff6f00 !important; }\n\n.amber.accent-1 {\n  background-color: #ffe57f !important; }\n\n.amber-text.text-accent-1 {\n  color: #ffe57f !important; }\n\n.amber.accent-2 {\n  background-color: #ffd740 !important; }\n\n.amber-text.text-accent-2 {\n  color: #ffd740 !important; }\n\n.amber.accent-3 {\n  background-color: #ffc400 !important; }\n\n.amber-text.text-accent-3 {\n  color: #ffc400 !important; }\n\n.amber.accent-4 {\n  background-color: #ffab00 !important; }\n\n.amber-text.text-accent-4 {\n  color: #ffab00 !important; }\n\n.orange {\n  background-color: #ff9800 !important; }\n\n.orange-text {\n  color: #ff9800 !important; }\n\n.orange.lighten-5 {\n  background-color: #fff3e0 !important; }\n\n.orange-text.text-lighten-5 {\n  color: #fff3e0 !important; }\n\n.orange.lighten-4 {\n  background-color: #ffe0b2 !important; }\n\n.orange-text.text-lighten-4 {\n  color: #ffe0b2 !important; }\n\n.orange.lighten-3 {\n  background-color: #ffcc80 !important; }\n\n.orange-text.text-lighten-3 {\n  color: #ffcc80 !important; }\n\n.orange.lighten-2 {\n  background-color: #ffb74d !important; }\n\n.orange-text.text-lighten-2 {\n  color: #ffb74d !important; }\n\n.orange.lighten-1 {\n  background-color: #ffa726 !important; }\n\n.orange-text.text-lighten-1 {\n  color: #ffa726 !important; }\n\n.orange.darken-1 {\n  background-color: #fb8c00 !important; }\n\n.orange-text.text-darken-1 {\n  color: #fb8c00 !important; }\n\n.orange.darken-2 {\n  background-color: #f57c00 !important; }\n\n.orange-text.text-darken-2 {\n  color: #f57c00 !important; }\n\n.orange.darken-3 {\n  background-color: #ef6c00 !important; }\n\n.orange-text.text-darken-3 {\n  color: #ef6c00 !important; }\n\n.orange.darken-4 {\n  background-color: #e65100 !important; }\n\n.orange-text.text-darken-4 {\n  color: #e65100 !important; }\n\n.orange.accent-1 {\n  background-color: #ffd180 !important; }\n\n.orange-text.text-accent-1 {\n  color: #ffd180 !important; }\n\n.orange.accent-2 {\n  background-color: #ffab40 !important; }\n\n.orange-text.text-accent-2 {\n  color: #ffab40 !important; }\n\n.orange.accent-3 {\n  background-color: #ff9100 !important; }\n\n.orange-text.text-accent-3 {\n  color: #ff9100 !important; }\n\n.orange.accent-4 {\n  background-color: #ff6d00 !important; }\n\n.orange-text.text-accent-4 {\n  color: #ff6d00 !important; }\n\n.deep-orange {\n  background-color: #ff5722 !important; }\n\n.deep-orange-text {\n  color: #ff5722 !important; }\n\n.deep-orange.lighten-5 {\n  background-color: #fbe9e7 !important; }\n\n.deep-orange-text.text-lighten-5 {\n  color: #fbe9e7 !important; }\n\n.deep-orange.lighten-4 {\n  background-color: #ffccbc !important; }\n\n.deep-orange-text.text-lighten-4 {\n  color: #ffccbc !important; }\n\n.deep-orange.lighten-3 {\n  background-color: #ffab91 !important; }\n\n.deep-orange-text.text-lighten-3 {\n  color: #ffab91 !important; }\n\n.deep-orange.lighten-2 {\n  background-color: #ff8a65 !important; }\n\n.deep-orange-text.text-lighten-2 {\n  color: #ff8a65 !important; }\n\n.deep-orange.lighten-1 {\n  background-color: #ff7043 !important; }\n\n.deep-orange-text.text-lighten-1 {\n  color: #ff7043 !important; }\n\n.deep-orange.darken-1 {\n  background-color: #f4511e !important; }\n\n.deep-orange-text.text-darken-1 {\n  color: #f4511e !important; }\n\n.deep-orange.darken-2 {\n  background-color: #e64a19 !important; }\n\n.deep-orange-text.text-darken-2 {\n  color: #e64a19 !important; }\n\n.deep-orange.darken-3 {\n  background-color: #d84315 !important; }\n\n.deep-orange-text.text-darken-3 {\n  color: #d84315 !important; }\n\n.deep-orange.darken-4 {\n  background-color: #bf360c !important; }\n\n.deep-orange-text.text-darken-4 {\n  color: #bf360c !important; }\n\n.deep-orange.accent-1 {\n  background-color: #ff9e80 !important; }\n\n.deep-orange-text.text-accent-1 {\n  color: #ff9e80 !important; }\n\n.deep-orange.accent-2 {\n  background-color: #ff6e40 !important; }\n\n.deep-orange-text.text-accent-2 {\n  color: #ff6e40 !important; }\n\n.deep-orange.accent-3 {\n  background-color: #ff3d00 !important; }\n\n.deep-orange-text.text-accent-3 {\n  color: #ff3d00 !important; }\n\n.deep-orange.accent-4 {\n  background-color: #dd2c00 !important; }\n\n.deep-orange-text.text-accent-4 {\n  color: #dd2c00 !important; }\n\n.brown {\n  background-color: #795548 !important; }\n\n.brown-text {\n  color: #795548 !important; }\n\n.brown.lighten-5 {\n  background-color: #efebe9 !important; }\n\n.brown-text.text-lighten-5 {\n  color: #efebe9 !important; }\n\n.brown.lighten-4 {\n  background-color: #d7ccc8 !important; }\n\n.brown-text.text-lighten-4 {\n  color: #d7ccc8 !important; }\n\n.brown.lighten-3 {\n  background-color: #bcaaa4 !important; }\n\n.brown-text.text-lighten-3 {\n  color: #bcaaa4 !important; }\n\n.brown.lighten-2 {\n  background-color: #a1887f !important; }\n\n.brown-text.text-lighten-2 {\n  color: #a1887f !important; }\n\n.brown.lighten-1 {\n  background-color: #8d6e63 !important; }\n\n.brown-text.text-lighten-1 {\n  color: #8d6e63 !important; }\n\n.brown.darken-1 {\n  background-color: #6d4c41 !important; }\n\n.brown-text.text-darken-1 {\n  color: #6d4c41 !important; }\n\n.brown.darken-2 {\n  background-color: #5d4037 !important; }\n\n.brown-text.text-darken-2 {\n  color: #5d4037 !important; }\n\n.brown.darken-3 {\n  background-color: #4e342e !important; }\n\n.brown-text.text-darken-3 {\n  color: #4e342e !important; }\n\n.brown.darken-4 {\n  background-color: #3e2723 !important; }\n\n.brown-text.text-darken-4 {\n  color: #3e2723 !important; }\n\n.blue-grey {\n  background-color: #607d8b !important; }\n\n.blue-grey-text {\n  color: #607d8b !important; }\n\n.blue-grey.lighten-5 {\n  background-color: #eceff1 !important; }\n\n.blue-grey-text.text-lighten-5 {\n  color: #eceff1 !important; }\n\n.blue-grey.lighten-4 {\n  background-color: #cfd8dc !important; }\n\n.blue-grey-text.text-lighten-4 {\n  color: #cfd8dc !important; }\n\n.blue-grey.lighten-3 {\n  background-color: #b0bec5 !important; }\n\n.blue-grey-text.text-lighten-3 {\n  color: #b0bec5 !important; }\n\n.blue-grey.lighten-2 {\n  background-color: #90a4ae !important; }\n\n.blue-grey-text.text-lighten-2 {\n  color: #90a4ae !important; }\n\n.blue-grey.lighten-1 {\n  background-color: #78909c !important; }\n\n.blue-grey-text.text-lighten-1 {\n  color: #78909c !important; }\n\n.blue-grey.darken-1 {\n  background-color: #546e7a !important; }\n\n.blue-grey-text.text-darken-1 {\n  color: #546e7a !important; }\n\n.blue-grey.darken-2 {\n  background-color: #455a64 !important; }\n\n.blue-grey-text.text-darken-2 {\n  color: #455a64 !important; }\n\n.blue-grey.darken-3 {\n  background-color: #37474f !important; }\n\n.blue-grey-text.text-darken-3 {\n  color: #37474f !important; }\n\n.blue-grey.darken-4 {\n  background-color: #263238 !important; }\n\n.blue-grey-text.text-darken-4 {\n  color: #263238 !important; }\n\n.grey {\n  background-color: #9e9e9e !important; }\n\n.grey-text {\n  color: #9e9e9e !important; }\n\n.grey.lighten-5 {\n  background-color: #fafafa !important; }\n\n.grey-text.text-lighten-5 {\n  color: #fafafa !important; }\n\n.grey.lighten-4 {\n  background-color: #f5f5f5 !important; }\n\n.grey-text.text-lighten-4 {\n  color: #f5f5f5 !important; }\n\n.grey.lighten-3 {\n  background-color: #eeeeee !important; }\n\n.grey-text.text-lighten-3 {\n  color: #eeeeee !important; }\n\n.grey.lighten-2 {\n  background-color: #e0e0e0 !important; }\n\n.grey-text.text-lighten-2 {\n  color: #e0e0e0 !important; }\n\n.grey.lighten-1 {\n  background-color: #bdbdbd !important; }\n\n.grey-text.text-lighten-1 {\n  color: #bdbdbd !important; }\n\n.grey.darken-1 {\n  background-color: #757575 !important; }\n\n.grey-text.text-darken-1 {\n  color: #757575 !important; }\n\n.grey.darken-2 {\n  background-color: #616161 !important; }\n\n.grey-text.text-darken-2 {\n  color: #616161 !important; }\n\n.grey.darken-3 {\n  background-color: #424242 !important; }\n\n.grey-text.text-darken-3 {\n  color: #424242 !important; }\n\n.grey.darken-4 {\n  background-color: #212121 !important; }\n\n.grey-text.text-darken-4 {\n  color: #212121 !important; }\n\n.black {\n  background-color: #000000 !important; }\n\n.black-text {\n  color: #000000 !important; }\n\n.white {\n  background-color: #FFFFFF !important; }\n\n.white-text {\n  color: #FFFFFF !important; }\n\n.transparent {\n  background-color: transparent !important; }\n\n.transparent-text {\n  color: transparent !important; }\n\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\nhtml {\n  font-family: sans-serif;\n  /* 1 */\n  -ms-text-size-adjust: 100%;\n  /* 2 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */ }\n\n/**\n * Remove default margin.\n */\nbody {\n  margin: 0; }\n\n/* HTML5 display definitions\n   ========================================================================== */\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block; }\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  /* 1 */\n  vertical-align: baseline;\n  /* 2 */ }\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\naudio:not([controls]) {\n  display: none;\n  height: 0; }\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n[hidden],\ntemplate {\n  display: none; }\n\n/* Links\n   ========================================================================== */\n/**\n * Remove the gray background color from active links in IE 10.\n */\na {\n  background-color: transparent; }\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\na:active,\na:hover {\n  outline: 0; }\n\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\nabbr[title] {\n  border-bottom: 1px dotted; }\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\nb,\nstrong {\n  font-weight: bold; }\n\n/**\n * Address styling not present in Safari and Chrome.\n */\ndfn {\n  font-style: italic; }\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; }\n\n/**\n * Address styling not present in IE 8/9.\n */\nmark {\n  background: #ff0;\n  color: #000; }\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\nsmall {\n  font-size: 80%; }\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsup {\n  top: -0.5em; }\n\nsub {\n  bottom: -0.25em; }\n\n/* Embedded content\n   ========================================================================== */\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\nimg {\n  border: 0; }\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\nsvg:not(:root) {\n  overflow: hidden; }\n\n/* Grouping content\n   ========================================================================== */\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\nfigure {\n  margin: 1em 40px; }\n\n/**\n * Address differences between Firefox and other browsers.\n */\nhr {\n  box-sizing: content-box;\n  height: 0; }\n\n/**\n * Contain overflow in all browsers.\n */\npre {\n  overflow: auto; }\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em; }\n\n/* Forms\n   ========================================================================== */\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n  margin: 0;\n  /* 3 */ }\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\nbutton {\n  overflow: visible; }\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\nbutton,\nselect {\n  text-transform: none; }\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  /* 2 */\n  cursor: pointer;\n  /* 3 */ }\n\n/**\n * Re-set default cursor for disabled elements.\n */\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default; }\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0; }\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\ninput {\n  line-height: normal; }\n\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto; }\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  box-sizing: content-box;\n  /* 2 */ }\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\n/**\n * Define consistent border, margin, and padding.\n */\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em; }\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\nlegend {\n  border: 0;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\ntextarea {\n  overflow: auto; }\n\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\noptgroup {\n  font-weight: bold; }\n\n/* Tables\n   ========================================================================== */\n/**\n * Remove most spacing between table cells.\n */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\ntd,\nth {\n  padding: 0; }\n\nhtml {\n  box-sizing: border-box; }\n\n*, *:before, *:after {\n  box-sizing: inherit; }\n\nul:not(.browser-default) {\n  padding-left: 0;\n  list-style-type: none; }\n  ul:not(.browser-default) > li {\n    list-style-type: none; }\n\na {\n  color: #039be5;\n  text-decoration: none;\n  -webkit-tap-highlight-color: transparent; }\n\n.valign-wrapper {\n  display: flex;\n  align-items: center; }\n\n.clearfix {\n  clear: both; }\n\n.z-depth-0 {\n  box-shadow: none !important; }\n\n.z-depth-1, nav, .card-panel, .card, .btn, .btn-large, .btn-floating {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2); }\n\n.z-depth-1-half, .btn:hover, .btn-large:hover, .btn-floating:hover {\n  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2); }\n\n.z-depth-2 {\n  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3); }\n\n.z-depth-3 {\n  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.3); }\n\n.z-depth-4 {\n  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.3); }\n\n.z-depth-5 {\n  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.3); }\n\n.hoverable {\n  transition: box-shadow .25s; }\n  .hoverable:hover {\n    box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); }\n\n.divider {\n  height: 1px;\n  overflow: hidden;\n  background-color: #e0e0e0; }\n\nblockquote {\n  margin: 20px 0;\n  padding-left: 1.5rem;\n  border-left: 5px solid #ee6e73; }\n\ni {\n  line-height: inherit; }\n  i.left {\n    float: left;\n    margin-right: 15px; }\n  i.right {\n    float: right;\n    margin-left: 15px; }\n  i.tiny {\n    font-size: 1rem; }\n  i.small {\n    font-size: 2rem; }\n  i.medium {\n    font-size: 4rem; }\n  i.large {\n    font-size: 6rem; }\n\nimg.responsive-img,\nvideo.responsive-video {\n  max-width: 100%;\n  height: auto; }\n\n.pagination li {\n  display: inline-block;\n  border-radius: 2px;\n  text-align: center;\n  vertical-align: top;\n  height: 30px; }\n  .pagination li a {\n    color: #444;\n    display: inline-block;\n    font-size: 1.2rem;\n    padding: 0 10px;\n    line-height: 30px; }\n  .pagination li.active a {\n    color: #fff; }\n  .pagination li.active {\n    background-color: #ee6e73; }\n  .pagination li.disabled a {\n    cursor: default;\n    color: #999; }\n  .pagination li i {\n    font-size: 2rem; }\n\n.pagination li.pages ul li {\n  display: inline-block;\n  float: none; }\n\n@media only screen and (max-width: 992px) {\n  .pagination {\n    width: 100%; }\n    .pagination li.prev,\n    .pagination li.next {\n      width: 10%; }\n    .pagination li.pages {\n      width: 80%;\n      overflow: hidden;\n      white-space: nowrap; } }\n\n.breadcrumb {\n  font-size: 18px;\n  color: rgba(255, 255, 255, 0.7); }\n  .breadcrumb i,\n  .breadcrumb [class^=\"mdi-\"], .breadcrumb [class*=\"mdi-\"],\n  .breadcrumb i.material-icons {\n    display: inline-block;\n    float: left;\n    font-size: 24px; }\n  .breadcrumb:before {\n    content: '\\E5CC';\n    color: rgba(255, 255, 255, 0.7);\n    vertical-align: top;\n    display: inline-block;\n    font-family: 'Material Icons';\n    font-weight: normal;\n    font-style: normal;\n    font-size: 25px;\n    margin: 0 10px 0 8px;\n    -webkit-font-smoothing: antialiased; }\n  .breadcrumb:first-child:before {\n    display: none; }\n  .breadcrumb:last-child {\n    color: #fff; }\n\n.parallax-container {\n  position: relative;\n  overflow: hidden;\n  height: 500px; }\n  .parallax-container .parallax {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1; }\n    .parallax-container .parallax img {\n      display: none;\n      position: absolute;\n      left: 50%;\n      bottom: 0;\n      min-width: 100%;\n      min-height: 100%;\n      transform: translate3d(0, 0, 0);\n      transform: translateX(-50%); }\n\n.pin-top, .pin-bottom {\n  position: relative; }\n\n.pinned {\n  position: fixed !important; }\n\n/*********************\n  Transition Classes\n**********************/\nul.staggered-list li {\n  opacity: 0; }\n\n.fade-in {\n  opacity: 0;\n  transform-origin: 0 50%; }\n\n/*********************\n  Media Query Classes\n**********************/\n@media only screen and (max-width: 600px) {\n  .hide-on-small-only, .hide-on-small-and-down {\n    display: none !important; } }\n\n@media only screen and (max-width: 992px) {\n  .hide-on-med-and-down {\n    display: none !important; } }\n\n@media only screen and (min-width: 601px) {\n  .hide-on-med-and-up {\n    display: none !important; } }\n\n@media only screen and (min-width: 600px) and (max-width: 992px) {\n  .hide-on-med-only {\n    display: none !important; } }\n\n@media only screen and (min-width: 993px) {\n  .hide-on-large-only {\n    display: none !important; } }\n\n@media only screen and (min-width: 993px) {\n  .show-on-large {\n    display: block !important; } }\n\n@media only screen and (min-width: 600px) and (max-width: 992px) {\n  .show-on-medium {\n    display: block !important; } }\n\n@media only screen and (max-width: 600px) {\n  .show-on-small {\n    display: block !important; } }\n\n@media only screen and (min-width: 601px) {\n  .show-on-medium-and-up {\n    display: block !important; } }\n\n@media only screen and (max-width: 992px) {\n  .show-on-medium-and-down {\n    display: block !important; } }\n\n@media only screen and (max-width: 600px) {\n  .center-on-small-only {\n    text-align: center; } }\n\n.page-footer {\n  padding-top: 20px;\n  color: #fff;\n  background-color: #ee6e73; }\n  .page-footer .footer-copyright {\n    overflow: hidden;\n    min-height: 50px;\n    display: flex;\n    align-items: center;\n    padding: 10px 0px;\n    color: rgba(255, 255, 255, 0.8);\n    background-color: rgba(51, 51, 51, 0.08); }\n\ntable, th, td {\n  border: none; }\n\ntable {\n  width: 100%;\n  display: table; }\n  table.bordered > thead > tr,\n  table.bordered > tbody > tr {\n    border-bottom: 1px solid #d0d0d0; }\n  table.striped > tbody > tr:nth-child(odd) {\n    background-color: #f2f2f2; }\n  table.striped > tbody > tr > td {\n    border-radius: 0; }\n  table.highlight > tbody > tr {\n    transition: background-color .25s ease; }\n    table.highlight > tbody > tr:hover {\n      background-color: #f2f2f2; }\n  table.centered thead tr th, table.centered tbody tr td {\n    text-align: center; }\n\nthead {\n  border-bottom: 1px solid #d0d0d0; }\n\ntd, th {\n  padding: 15px 5px;\n  display: table-cell;\n  text-align: left;\n  vertical-align: middle;\n  border-radius: 2px; }\n\n@media only screen and (max-width: 992px) {\n  table.responsive-table {\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n    display: block;\n    position: relative;\n    /* sort out borders */ }\n    table.responsive-table td:empty:before {\n      content: '\\A0'; }\n    table.responsive-table th,\n    table.responsive-table td {\n      margin: 0;\n      vertical-align: top; }\n    table.responsive-table th {\n      text-align: left; }\n    table.responsive-table thead {\n      display: block;\n      float: left; }\n      table.responsive-table thead tr {\n        display: block;\n        padding: 0 10px 0 0; }\n        table.responsive-table thead tr th::before {\n          content: \"\\A0\"; }\n    table.responsive-table tbody {\n      display: block;\n      width: auto;\n      position: relative;\n      overflow-x: auto;\n      white-space: nowrap; }\n      table.responsive-table tbody tr {\n        display: inline-block;\n        vertical-align: top; }\n    table.responsive-table th {\n      display: block;\n      text-align: right; }\n    table.responsive-table td {\n      display: block;\n      min-height: 1.25em;\n      text-align: left; }\n    table.responsive-table tr {\n      padding: 0 10px; }\n    table.responsive-table thead {\n      border: 0;\n      border-right: 1px solid #d0d0d0; }\n    table.responsive-table.bordered th {\n      border-bottom: 0;\n      border-left: 0; }\n    table.responsive-table.bordered td {\n      border-left: 0;\n      border-right: 0;\n      border-bottom: 0; }\n    table.responsive-table.bordered tr {\n      border: 0; }\n    table.responsive-table.bordered tbody tr {\n      border-right: 1px solid #d0d0d0; } }\n\n.collection {\n  margin: 0.5rem 0 1rem 0;\n  border: 1px solid #e0e0e0;\n  border-radius: 2px;\n  overflow: hidden;\n  position: relative; }\n  .collection .collection-item {\n    background-color: #fff;\n    line-height: 1.5rem;\n    padding: 10px 20px;\n    margin: 0;\n    border-bottom: 1px solid #e0e0e0; }\n    .collection .collection-item.avatar {\n      min-height: 84px;\n      padding-left: 72px;\n      position: relative; }\n      .collection .collection-item.avatar:not(.circle-clipper) > .circle,\n      .collection .collection-item.avatar :not(.circle-clipper) > .circle {\n        position: absolute;\n        width: 42px;\n        height: 42px;\n        overflow: hidden;\n        left: 15px;\n        display: inline-block;\n        vertical-align: middle; }\n      .collection .collection-item.avatar i.circle {\n        font-size: 18px;\n        line-height: 42px;\n        color: #fff;\n        background-color: #999;\n        text-align: center; }\n      .collection .collection-item.avatar .title {\n        font-size: 16px; }\n      .collection .collection-item.avatar p {\n        margin: 0; }\n      .collection .collection-item.avatar .secondary-content {\n        position: absolute;\n        top: 16px;\n        right: 16px; }\n    .collection .collection-item:last-child {\n      border-bottom: none; }\n    .collection .collection-item.active {\n      background-color: #26a69a;\n      color: #eafaf9; }\n      .collection .collection-item.active .secondary-content {\n        color: #fff; }\n  .collection a.collection-item {\n    display: block;\n    transition: .25s;\n    color: #26a69a; }\n    .collection a.collection-item:not(.active):hover {\n      background-color: #ddd; }\n  .collection.with-header .collection-header {\n    background-color: #fff;\n    border-bottom: 1px solid #e0e0e0;\n    padding: 10px 20px; }\n  .collection.with-header .collection-item {\n    padding-left: 30px; }\n  .collection.with-header .collection-item.avatar {\n    padding-left: 72px; }\n\n.secondary-content {\n  float: right;\n  color: #26a69a; }\n\n.collapsible .collection {\n  margin: 0;\n  border: none; }\n\n.video-container {\n  position: relative;\n  padding-bottom: 56.25%;\n  height: 0;\n  overflow: hidden; }\n  .video-container iframe, .video-container object, .video-container embed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%; }\n\n.progress {\n  position: relative;\n  height: 4px;\n  display: block;\n  width: 100%;\n  background-color: #acece6;\n  border-radius: 2px;\n  margin: 0.5rem 0 1rem 0;\n  overflow: hidden; }\n  .progress .determinate {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    background-color: #26a69a;\n    transition: width .3s linear; }\n  .progress .indeterminate {\n    background-color: #26a69a; }\n    .progress .indeterminate:before {\n      content: '';\n      position: absolute;\n      background-color: inherit;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      will-change: left, right;\n      animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite; }\n    .progress .indeterminate:after {\n      content: '';\n      position: absolute;\n      background-color: inherit;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      will-change: left, right;\n      animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;\n      animation-delay: 1.15s; }\n\n@keyframes indeterminate {\n  0% {\n    left: -35%;\n    right: 100%; }\n  60% {\n    left: 100%;\n    right: -90%; }\n  100% {\n    left: 100%;\n    right: -90%; } }\n\n@keyframes indeterminate-short {\n  0% {\n    left: -200%;\n    right: 100%; }\n  60% {\n    left: 107%;\n    right: -8%; }\n  100% {\n    left: 107%;\n    right: -8%; } }\n\n/*******************\n  Utility Classes\n*******************/\n.hide {\n  display: none !important; }\n\n.left-align {\n  text-align: left; }\n\n.right-align {\n  text-align: right; }\n\n.center, .center-align {\n  text-align: center; }\n\n.left {\n  float: left !important; }\n\n.right {\n  float: right !important; }\n\n.no-select, input[type=range],\ninput[type=range] + .thumb {\n  user-select: none; }\n\n.circle {\n  border-radius: 50%; }\n\n.center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto; }\n\n.truncate {\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.no-padding {\n  padding: 0 !important; }\n\n.container {\n  margin: 0 auto;\n  max-width: 1280px;\n  width: 90%; }\n\n@media only screen and (min-width: 601px) {\n  .container {\n    width: 85%; } }\n\n@media only screen and (min-width: 993px) {\n  .container {\n    width: 70%; } }\n\n.container .row {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem; }\n\n.section {\n  padding-top: 1rem;\n  padding-bottom: 1rem; }\n  .section.no-pad {\n    padding: 0; }\n  .section.no-pad-bot {\n    padding-bottom: 0; }\n  .section.no-pad-top {\n    padding-top: 0; }\n\n.row {\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px; }\n  .row:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .row .col {\n    float: left;\n    box-sizing: border-box;\n    padding: 0 0.75rem;\n    min-height: 1px; }\n    .row .col[class*=\"push-\"], .row .col[class*=\"pull-\"] {\n      position: relative; }\n    .row .col.s1 {\n      width: 8.33333%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s2 {\n      width: 16.66667%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s3 {\n      width: 25%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s4 {\n      width: 33.33333%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s5 {\n      width: 41.66667%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s6 {\n      width: 50%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s7 {\n      width: 58.33333%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s8 {\n      width: 66.66667%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s9 {\n      width: 75%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s10 {\n      width: 83.33333%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s11 {\n      width: 91.66667%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.s12 {\n      width: 100%;\n      margin-left: auto;\n      left: auto;\n      right: auto; }\n    .row .col.offset-s1 {\n      margin-left: 8.33333%; }\n    .row .col.pull-s1 {\n      right: 8.33333%; }\n    .row .col.push-s1 {\n      left: 8.33333%; }\n    .row .col.offset-s2 {\n      margin-left: 16.66667%; }\n    .row .col.pull-s2 {\n      right: 16.66667%; }\n    .row .col.push-s2 {\n      left: 16.66667%; }\n    .row .col.offset-s3 {\n      margin-left: 25%; }\n    .row .col.pull-s3 {\n      right: 25%; }\n    .row .col.push-s3 {\n      left: 25%; }\n    .row .col.offset-s4 {\n      margin-left: 33.33333%; }\n    .row .col.pull-s4 {\n      right: 33.33333%; }\n    .row .col.push-s4 {\n      left: 33.33333%; }\n    .row .col.offset-s5 {\n      margin-left: 41.66667%; }\n    .row .col.pull-s5 {\n      right: 41.66667%; }\n    .row .col.push-s5 {\n      left: 41.66667%; }\n    .row .col.offset-s6 {\n      margin-left: 50%; }\n    .row .col.pull-s6 {\n      right: 50%; }\n    .row .col.push-s6 {\n      left: 50%; }\n    .row .col.offset-s7 {\n      margin-left: 58.33333%; }\n    .row .col.pull-s7 {\n      right: 58.33333%; }\n    .row .col.push-s7 {\n      left: 58.33333%; }\n    .row .col.offset-s8 {\n      margin-left: 66.66667%; }\n    .row .col.pull-s8 {\n      right: 66.66667%; }\n    .row .col.push-s8 {\n      left: 66.66667%; }\n    .row .col.offset-s9 {\n      margin-left: 75%; }\n    .row .col.pull-s9 {\n      right: 75%; }\n    .row .col.push-s9 {\n      left: 75%; }\n    .row .col.offset-s10 {\n      margin-left: 83.33333%; }\n    .row .col.pull-s10 {\n      right: 83.33333%; }\n    .row .col.push-s10 {\n      left: 83.33333%; }\n    .row .col.offset-s11 {\n      margin-left: 91.66667%; }\n    .row .col.pull-s11 {\n      right: 91.66667%; }\n    .row .col.push-s11 {\n      left: 91.66667%; }\n    .row .col.offset-s12 {\n      margin-left: 100%; }\n    .row .col.pull-s12 {\n      right: 100%; }\n    .row .col.push-s12 {\n      left: 100%; }\n    @media only screen and (min-width: 601px) {\n      .row .col.m1 {\n        width: 8.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m2 {\n        width: 16.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m3 {\n        width: 25%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m4 {\n        width: 33.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m5 {\n        width: 41.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m6 {\n        width: 50%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m7 {\n        width: 58.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m8 {\n        width: 66.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m9 {\n        width: 75%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m10 {\n        width: 83.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m11 {\n        width: 91.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.m12 {\n        width: 100%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.offset-m1 {\n        margin-left: 8.33333%; }\n      .row .col.pull-m1 {\n        right: 8.33333%; }\n      .row .col.push-m1 {\n        left: 8.33333%; }\n      .row .col.offset-m2 {\n        margin-left: 16.66667%; }\n      .row .col.pull-m2 {\n        right: 16.66667%; }\n      .row .col.push-m2 {\n        left: 16.66667%; }\n      .row .col.offset-m3 {\n        margin-left: 25%; }\n      .row .col.pull-m3 {\n        right: 25%; }\n      .row .col.push-m3 {\n        left: 25%; }\n      .row .col.offset-m4 {\n        margin-left: 33.33333%; }\n      .row .col.pull-m4 {\n        right: 33.33333%; }\n      .row .col.push-m4 {\n        left: 33.33333%; }\n      .row .col.offset-m5 {\n        margin-left: 41.66667%; }\n      .row .col.pull-m5 {\n        right: 41.66667%; }\n      .row .col.push-m5 {\n        left: 41.66667%; }\n      .row .col.offset-m6 {\n        margin-left: 50%; }\n      .row .col.pull-m6 {\n        right: 50%; }\n      .row .col.push-m6 {\n        left: 50%; }\n      .row .col.offset-m7 {\n        margin-left: 58.33333%; }\n      .row .col.pull-m7 {\n        right: 58.33333%; }\n      .row .col.push-m7 {\n        left: 58.33333%; }\n      .row .col.offset-m8 {\n        margin-left: 66.66667%; }\n      .row .col.pull-m8 {\n        right: 66.66667%; }\n      .row .col.push-m8 {\n        left: 66.66667%; }\n      .row .col.offset-m9 {\n        margin-left: 75%; }\n      .row .col.pull-m9 {\n        right: 75%; }\n      .row .col.push-m9 {\n        left: 75%; }\n      .row .col.offset-m10 {\n        margin-left: 83.33333%; }\n      .row .col.pull-m10 {\n        right: 83.33333%; }\n      .row .col.push-m10 {\n        left: 83.33333%; }\n      .row .col.offset-m11 {\n        margin-left: 91.66667%; }\n      .row .col.pull-m11 {\n        right: 91.66667%; }\n      .row .col.push-m11 {\n        left: 91.66667%; }\n      .row .col.offset-m12 {\n        margin-left: 100%; }\n      .row .col.pull-m12 {\n        right: 100%; }\n      .row .col.push-m12 {\n        left: 100%; } }\n    @media only screen and (min-width: 993px) {\n      .row .col.l1 {\n        width: 8.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l2 {\n        width: 16.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l3 {\n        width: 25%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l4 {\n        width: 33.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l5 {\n        width: 41.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l6 {\n        width: 50%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l7 {\n        width: 58.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l8 {\n        width: 66.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l9 {\n        width: 75%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l10 {\n        width: 83.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l11 {\n        width: 91.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.l12 {\n        width: 100%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.offset-l1 {\n        margin-left: 8.33333%; }\n      .row .col.pull-l1 {\n        right: 8.33333%; }\n      .row .col.push-l1 {\n        left: 8.33333%; }\n      .row .col.offset-l2 {\n        margin-left: 16.66667%; }\n      .row .col.pull-l2 {\n        right: 16.66667%; }\n      .row .col.push-l2 {\n        left: 16.66667%; }\n      .row .col.offset-l3 {\n        margin-left: 25%; }\n      .row .col.pull-l3 {\n        right: 25%; }\n      .row .col.push-l3 {\n        left: 25%; }\n      .row .col.offset-l4 {\n        margin-left: 33.33333%; }\n      .row .col.pull-l4 {\n        right: 33.33333%; }\n      .row .col.push-l4 {\n        left: 33.33333%; }\n      .row .col.offset-l5 {\n        margin-left: 41.66667%; }\n      .row .col.pull-l5 {\n        right: 41.66667%; }\n      .row .col.push-l5 {\n        left: 41.66667%; }\n      .row .col.offset-l6 {\n        margin-left: 50%; }\n      .row .col.pull-l6 {\n        right: 50%; }\n      .row .col.push-l6 {\n        left: 50%; }\n      .row .col.offset-l7 {\n        margin-left: 58.33333%; }\n      .row .col.pull-l7 {\n        right: 58.33333%; }\n      .row .col.push-l7 {\n        left: 58.33333%; }\n      .row .col.offset-l8 {\n        margin-left: 66.66667%; }\n      .row .col.pull-l8 {\n        right: 66.66667%; }\n      .row .col.push-l8 {\n        left: 66.66667%; }\n      .row .col.offset-l9 {\n        margin-left: 75%; }\n      .row .col.pull-l9 {\n        right: 75%; }\n      .row .col.push-l9 {\n        left: 75%; }\n      .row .col.offset-l10 {\n        margin-left: 83.33333%; }\n      .row .col.pull-l10 {\n        right: 83.33333%; }\n      .row .col.push-l10 {\n        left: 83.33333%; }\n      .row .col.offset-l11 {\n        margin-left: 91.66667%; }\n      .row .col.pull-l11 {\n        right: 91.66667%; }\n      .row .col.push-l11 {\n        left: 91.66667%; }\n      .row .col.offset-l12 {\n        margin-left: 100%; }\n      .row .col.pull-l12 {\n        right: 100%; }\n      .row .col.push-l12 {\n        left: 100%; } }\n    @media only screen and (min-width: 1201px) {\n      .row .col.xl1 {\n        width: 8.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl2 {\n        width: 16.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl3 {\n        width: 25%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl4 {\n        width: 33.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl5 {\n        width: 41.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl6 {\n        width: 50%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl7 {\n        width: 58.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl8 {\n        width: 66.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl9 {\n        width: 75%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl10 {\n        width: 83.33333%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl11 {\n        width: 91.66667%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.xl12 {\n        width: 100%;\n        margin-left: auto;\n        left: auto;\n        right: auto; }\n      .row .col.offset-xl1 {\n        margin-left: 8.33333%; }\n      .row .col.pull-xl1 {\n        right: 8.33333%; }\n      .row .col.push-xl1 {\n        left: 8.33333%; }\n      .row .col.offset-xl2 {\n        margin-left: 16.66667%; }\n      .row .col.pull-xl2 {\n        right: 16.66667%; }\n      .row .col.push-xl2 {\n        left: 16.66667%; }\n      .row .col.offset-xl3 {\n        margin-left: 25%; }\n      .row .col.pull-xl3 {\n        right: 25%; }\n      .row .col.push-xl3 {\n        left: 25%; }\n      .row .col.offset-xl4 {\n        margin-left: 33.33333%; }\n      .row .col.pull-xl4 {\n        right: 33.33333%; }\n      .row .col.push-xl4 {\n        left: 33.33333%; }\n      .row .col.offset-xl5 {\n        margin-left: 41.66667%; }\n      .row .col.pull-xl5 {\n        right: 41.66667%; }\n      .row .col.push-xl5 {\n        left: 41.66667%; }\n      .row .col.offset-xl6 {\n        margin-left: 50%; }\n      .row .col.pull-xl6 {\n        right: 50%; }\n      .row .col.push-xl6 {\n        left: 50%; }\n      .row .col.offset-xl7 {\n        margin-left: 58.33333%; }\n      .row .col.pull-xl7 {\n        right: 58.33333%; }\n      .row .col.push-xl7 {\n        left: 58.33333%; }\n      .row .col.offset-xl8 {\n        margin-left: 66.66667%; }\n      .row .col.pull-xl8 {\n        right: 66.66667%; }\n      .row .col.push-xl8 {\n        left: 66.66667%; }\n      .row .col.offset-xl9 {\n        margin-left: 75%; }\n      .row .col.pull-xl9 {\n        right: 75%; }\n      .row .col.push-xl9 {\n        left: 75%; }\n      .row .col.offset-xl10 {\n        margin-left: 83.33333%; }\n      .row .col.pull-xl10 {\n        right: 83.33333%; }\n      .row .col.push-xl10 {\n        left: 83.33333%; }\n      .row .col.offset-xl11 {\n        margin-left: 91.66667%; }\n      .row .col.pull-xl11 {\n        right: 91.66667%; }\n      .row .col.push-xl11 {\n        left: 91.66667%; }\n      .row .col.offset-xl12 {\n        margin-left: 100%; }\n      .row .col.pull-xl12 {\n        right: 100%; }\n      .row .col.push-xl12 {\n        left: 100%; } }\n\nnav {\n  color: #fff;\n  background-color: #ee6e73;\n  width: 100%;\n  height: 56px;\n  line-height: 56px; }\n  nav.nav-extended {\n    height: auto; }\n    nav.nav-extended .nav-wrapper {\n      min-height: 56px;\n      height: auto; }\n    nav.nav-extended .nav-content {\n      position: relative;\n      line-height: normal; }\n  nav a {\n    color: #fff; }\n  nav i,\n  nav [class^=\"mdi-\"], nav [class*=\"mdi-\"],\n  nav i.material-icons {\n    display: block;\n    font-size: 24px;\n    height: 56px;\n    line-height: 56px; }\n  nav .nav-wrapper {\n    position: relative;\n    height: 100%; }\n  @media only screen and (min-width: 993px) {\n    nav a.button-collapse {\n      display: none; } }\n  nav .button-collapse {\n    float: left;\n    position: relative;\n    z-index: 1;\n    height: 56px;\n    margin: 0 18px; }\n    nav .button-collapse i {\n      height: 56px;\n      line-height: 56px; }\n  nav .brand-logo {\n    position: absolute;\n    color: #fff;\n    display: inline-block;\n    font-size: 2.1rem;\n    padding: 0; }\n    nav .brand-logo.center {\n      left: 50%;\n      transform: translateX(-50%); }\n    @media only screen and (max-width: 992px) {\n      nav .brand-logo {\n        left: 50%;\n        transform: translateX(-50%); }\n        nav .brand-logo.left, nav .brand-logo.right {\n          padding: 0;\n          transform: none; }\n        nav .brand-logo.left {\n          left: 0.5rem; }\n        nav .brand-logo.right {\n          right: 0.5rem;\n          left: auto; } }\n    nav .brand-logo.right {\n      right: 0.5rem;\n      padding: 0; }\n    nav .brand-logo i,\n    nav .brand-logo [class^=\"mdi-\"], nav .brand-logo [class*=\"mdi-\"],\n    nav .brand-logo i.material-icons {\n      float: left;\n      margin-right: 15px; }\n  nav .nav-title {\n    display: inline-block;\n    font-size: 32px;\n    padding: 28px 0; }\n  nav ul {\n    margin: 0; }\n    nav ul li {\n      transition: background-color .3s;\n      float: left;\n      padding: 0; }\n      nav ul li.active {\n        background-color: rgba(0, 0, 0, 0.1); }\n    nav ul a {\n      transition: background-color .3s;\n      font-size: 1rem;\n      color: #fff;\n      display: block;\n      padding: 0 15px;\n      cursor: pointer; }\n      nav ul a.btn, nav ul a.btn-large, nav ul a.btn-large, nav ul a.btn-flat, nav ul a.btn-floating {\n        margin-top: -2px;\n        margin-left: 15px;\n        margin-right: 15px; }\n        nav ul a.btn > .material-icons, nav ul a.btn-large > .material-icons, nav ul a.btn-large > .material-icons, nav ul a.btn-flat > .material-icons, nav ul a.btn-floating > .material-icons {\n          height: inherit;\n          line-height: inherit; }\n      nav ul a:hover {\n        background-color: rgba(0, 0, 0, 0.1); }\n    nav ul.left {\n      float: left; }\n  nav form {\n    height: 100%; }\n  nav .input-field {\n    margin: 0;\n    height: 100%; }\n    nav .input-field input {\n      height: 100%;\n      font-size: 1.2rem;\n      border: none;\n      padding-left: 2rem; }\n      nav .input-field input:focus, nav .input-field input[type=text]:valid, nav .input-field input[type=password]:valid, nav .input-field input[type=email]:valid, nav .input-field input[type=url]:valid, nav .input-field input[type=date]:valid {\n        border: none;\n        box-shadow: none; }\n    nav .input-field label {\n      top: 0;\n      left: 0; }\n      nav .input-field label i {\n        color: rgba(255, 255, 255, 0.7);\n        transition: color .3s; }\n      nav .input-field label.active i {\n        color: #fff; }\n\n.navbar-fixed {\n  position: relative;\n  height: 56px;\n  z-index: 997; }\n  .navbar-fixed nav {\n    position: fixed; }\n\n@media only screen and (min-width: 601px) {\n  nav.nav-extended .nav-wrapper {\n    min-height: 64px; }\n  nav, nav .nav-wrapper i, nav a.button-collapse, nav a.button-collapse i {\n    height: 64px;\n    line-height: 64px; }\n  .navbar-fixed {\n    height: 64px; } }\n\na {\n  text-decoration: none; }\n\nhtml {\n  line-height: 1.5;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: normal;\n  color: rgba(0, 0, 0, 0.87); }\n  @media only screen and (min-width: 0) {\n    html {\n      font-size: 14px; } }\n  @media only screen and (min-width: 992px) {\n    html {\n      font-size: 14.5px; } }\n  @media only screen and (min-width: 1200px) {\n    html {\n      font-size: 15px; } }\n\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 400;\n  line-height: 1.1; }\n\nh1 a, h2 a, h3 a, h4 a, h5 a, h6 a {\n  font-weight: inherit; }\n\nh1 {\n  font-size: 4.2rem;\n  line-height: 110%;\n  margin: 2.1rem 0 1.68rem 0; }\n\nh2 {\n  font-size: 3.56rem;\n  line-height: 110%;\n  margin: 1.78rem 0 1.424rem 0; }\n\nh3 {\n  font-size: 2.92rem;\n  line-height: 110%;\n  margin: 1.46rem 0 1.168rem 0; }\n\nh4 {\n  font-size: 2.28rem;\n  line-height: 110%;\n  margin: 1.14rem 0 0.912rem 0; }\n\nh5 {\n  font-size: 1.64rem;\n  line-height: 110%;\n  margin: 0.82rem 0 0.656rem 0; }\n\nh6 {\n  font-size: 1rem;\n  line-height: 110%;\n  margin: 0.5rem 0 0.4rem 0; }\n\nem {\n  font-style: italic; }\n\nstrong {\n  font-weight: 500; }\n\nsmall {\n  font-size: 75%; }\n\n.light, .page-footer .footer-copyright {\n  font-weight: 300; }\n\n.thin {\n  font-weight: 200; }\n\n.flow-text {\n  font-weight: 300; }\n  @media only screen and (min-width: 360px) {\n    .flow-text {\n      font-size: 1.2rem; } }\n  @media only screen and (min-width: 390px) {\n    .flow-text {\n      font-size: 1.224rem; } }\n  @media only screen and (min-width: 420px) {\n    .flow-text {\n      font-size: 1.248rem; } }\n  @media only screen and (min-width: 450px) {\n    .flow-text {\n      font-size: 1.272rem; } }\n  @media only screen and (min-width: 480px) {\n    .flow-text {\n      font-size: 1.296rem; } }\n  @media only screen and (min-width: 510px) {\n    .flow-text {\n      font-size: 1.32rem; } }\n  @media only screen and (min-width: 540px) {\n    .flow-text {\n      font-size: 1.344rem; } }\n  @media only screen and (min-width: 570px) {\n    .flow-text {\n      font-size: 1.368rem; } }\n  @media only screen and (min-width: 600px) {\n    .flow-text {\n      font-size: 1.392rem; } }\n  @media only screen and (min-width: 630px) {\n    .flow-text {\n      font-size: 1.416rem; } }\n  @media only screen and (min-width: 660px) {\n    .flow-text {\n      font-size: 1.44rem; } }\n  @media only screen and (min-width: 690px) {\n    .flow-text {\n      font-size: 1.464rem; } }\n  @media only screen and (min-width: 720px) {\n    .flow-text {\n      font-size: 1.488rem; } }\n  @media only screen and (min-width: 750px) {\n    .flow-text {\n      font-size: 1.512rem; } }\n  @media only screen and (min-width: 780px) {\n    .flow-text {\n      font-size: 1.536rem; } }\n  @media only screen and (min-width: 810px) {\n    .flow-text {\n      font-size: 1.56rem; } }\n  @media only screen and (min-width: 840px) {\n    .flow-text {\n      font-size: 1.584rem; } }\n  @media only screen and (min-width: 870px) {\n    .flow-text {\n      font-size: 1.608rem; } }\n  @media only screen and (min-width: 900px) {\n    .flow-text {\n      font-size: 1.632rem; } }\n  @media only screen and (min-width: 930px) {\n    .flow-text {\n      font-size: 1.656rem; } }\n  @media only screen and (min-width: 960px) {\n    .flow-text {\n      font-size: 1.68rem; } }\n  @media only screen and (max-width: 360px) {\n    .flow-text {\n      font-size: 1.2rem; } }\n\n.card-panel {\n  transition: box-shadow .25s;\n  padding: 24px;\n  margin: 0.5rem 0 1rem 0;\n  border-radius: 2px;\n  background-color: #fff; }\n\n.card {\n  position: relative;\n  margin: 0.5rem 0 1rem 0;\n  background-color: #fff;\n  transition: box-shadow .25s;\n  border-radius: 2px; }\n  .card .card-title {\n    font-size: 24px;\n    font-weight: 300; }\n    .card .card-title.activator {\n      cursor: pointer; }\n  .card.small, .card.medium, .card.large {\n    position: relative; }\n    .card.small .card-image, .card.medium .card-image, .card.large .card-image {\n      max-height: 60%;\n      overflow: hidden; }\n    .card.small .card-image + .card-content, .card.medium .card-image + .card-content, .card.large .card-image + .card-content {\n      max-height: 40%; }\n    .card.small .card-content, .card.medium .card-content, .card.large .card-content {\n      max-height: 100%;\n      overflow: hidden; }\n    .card.small .card-action, .card.medium .card-action, .card.large .card-action {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0; }\n  .card.small {\n    height: 300px; }\n  .card.medium {\n    height: 400px; }\n  .card.large {\n    height: 500px; }\n  .card.horizontal {\n    display: flex; }\n    .card.horizontal.small .card-image, .card.horizontal.medium .card-image, .card.horizontal.large .card-image {\n      height: 100%;\n      max-height: none;\n      overflow: visible; }\n      .card.horizontal.small .card-image img, .card.horizontal.medium .card-image img, .card.horizontal.large .card-image img {\n        height: 100%; }\n    .card.horizontal .card-image {\n      max-width: 50%; }\n      .card.horizontal .card-image img {\n        border-radius: 2px 0 0 2px;\n        max-width: 100%;\n        width: auto; }\n    .card.horizontal .card-stacked {\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      position: relative; }\n      .card.horizontal .card-stacked .card-content {\n        flex-grow: 1; }\n  .card.sticky-action .card-action {\n    z-index: 2; }\n  .card.sticky-action .card-reveal {\n    z-index: 1;\n    padding-bottom: 64px; }\n  .card .card-image {\n    position: relative; }\n    .card .card-image img {\n      display: block;\n      border-radius: 2px 2px 0 0;\n      position: relative;\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 100%; }\n    .card .card-image .card-title {\n      color: #fff;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      max-width: 100%;\n      padding: 24px; }\n  .card .card-content {\n    padding: 24px;\n    border-radius: 0 0 2px 2px; }\n    .card .card-content p {\n      margin: 0;\n      color: inherit; }\n    .card .card-content .card-title {\n      display: block;\n      line-height: 32px;\n      margin-bottom: 8px; }\n      .card .card-content .card-title i {\n        line-height: 32px; }\n  .card .card-action {\n    position: relative;\n    background-color: inherit;\n    border-top: 1px solid rgba(160, 160, 160, 0.2);\n    padding: 16px 24px; }\n    .card .card-action:last-child {\n      border-radius: 0 0 2px 2px; }\n    .card .card-action a:not(.btn):not(.btn-large):not(.btn-large):not(.btn-floating) {\n      color: #ffab40;\n      margin-right: 24px;\n      transition: color .3s ease;\n      text-transform: uppercase; }\n      .card .card-action a:not(.btn):not(.btn-large):not(.btn-large):not(.btn-floating):hover {\n        color: #ffd8a6; }\n  .card .card-reveal {\n    padding: 24px;\n    position: absolute;\n    background-color: #fff;\n    width: 100%;\n    overflow-y: auto;\n    left: 0;\n    top: 100%;\n    height: 100%;\n    z-index: 3;\n    display: none; }\n    .card .card-reveal .card-title {\n      cursor: pointer;\n      display: block; }\n\n.btn, .btn-large,\n.btn-flat {\n  border: none;\n  border-radius: 2px;\n  display: inline-block;\n  height: 36px;\n  line-height: 36px;\n  padding: 0 2rem;\n  text-transform: uppercase;\n  vertical-align: middle;\n  -webkit-tap-highlight-color: transparent; }\n\n.btn.disabled, .disabled.btn-large,\n.btn-floating.disabled,\n.btn-large.disabled,\n.btn-flat.disabled,\n.btn:disabled,\n.btn-large:disabled,\n.btn-floating:disabled,\n.btn-large:disabled,\n.btn-flat:disabled,\n.btn[disabled],\n[disabled].btn-large,\n.btn-floating[disabled],\n.btn-large[disabled],\n.btn-flat[disabled] {\n  pointer-events: none;\n  background-color: #DFDFDF !important;\n  box-shadow: none;\n  color: #9F9F9F !important;\n  cursor: default; }\n  .btn.disabled:hover, .disabled.btn-large:hover,\n  .btn-floating.disabled:hover,\n  .btn-large.disabled:hover,\n  .btn-flat.disabled:hover,\n  .btn:disabled:hover,\n  .btn-large:disabled:hover,\n  .btn-floating:disabled:hover,\n  .btn-large:disabled:hover,\n  .btn-flat:disabled:hover,\n  .btn[disabled]:hover,\n  [disabled].btn-large:hover,\n  .btn-floating[disabled]:hover,\n  .btn-large[disabled]:hover,\n  .btn-flat[disabled]:hover {\n    background-color: #DFDFDF !important;\n    color: #9F9F9F !important; }\n\n.btn, .btn-large,\n.btn-floating,\n.btn-large,\n.btn-flat {\n  font-size: 1rem;\n  outline: 0; }\n  .btn i, .btn-large i,\n  .btn-floating i,\n  .btn-large i,\n  .btn-flat i {\n    font-size: 1.3rem;\n    line-height: inherit; }\n\n.btn:focus, .btn-large:focus,\n.btn-floating:focus {\n  background-color: #1d7d74; }\n\n.btn, .btn-large {\n  text-decoration: none;\n  color: #fff;\n  background-color: #26a69a;\n  text-align: center;\n  letter-spacing: .5px;\n  transition: .2s ease-out;\n  cursor: pointer; }\n  .btn:hover, .btn-large:hover {\n    background-color: #2bbbad; }\n\n.btn-floating {\n  display: inline-block;\n  color: #fff;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n  width: 40px;\n  height: 40px;\n  line-height: 40px;\n  padding: 0;\n  background-color: #26a69a;\n  border-radius: 50%;\n  transition: .3s;\n  cursor: pointer;\n  vertical-align: middle; }\n  .btn-floating:hover {\n    background-color: #26a69a; }\n  .btn-floating:before {\n    border-radius: 0; }\n  .btn-floating.btn-large {\n    width: 56px;\n    height: 56px; }\n    .btn-floating.btn-large.halfway-fab {\n      bottom: -28px; }\n    .btn-floating.btn-large i {\n      line-height: 56px; }\n  .btn-floating.halfway-fab {\n    position: absolute;\n    right: 24px;\n    bottom: -20px; }\n    .btn-floating.halfway-fab.left {\n      right: auto;\n      left: 24px; }\n  .btn-floating i {\n    width: inherit;\n    display: inline-block;\n    text-align: center;\n    color: #fff;\n    font-size: 1.6rem;\n    line-height: 40px; }\n\nbutton.btn-floating {\n  border: none; }\n\n.fixed-action-btn {\n  position: fixed;\n  right: 23px;\n  bottom: 23px;\n  padding-top: 15px;\n  margin-bottom: 0;\n  z-index: 997; }\n  .fixed-action-btn.active ul {\n    visibility: visible; }\n  .fixed-action-btn.horizontal {\n    padding: 0 0 0 15px; }\n    .fixed-action-btn.horizontal ul {\n      text-align: right;\n      right: 64px;\n      top: 50%;\n      transform: translateY(-50%);\n      height: 100%;\n      left: auto;\n      width: 500px;\n      /*width 100% only goes to width of button container */ }\n      .fixed-action-btn.horizontal ul li {\n        display: inline-block;\n        margin: 15px 15px 0 0; }\n  .fixed-action-btn.toolbar {\n    padding: 0;\n    height: 56px; }\n    .fixed-action-btn.toolbar.active > a i {\n      opacity: 0; }\n    .fixed-action-btn.toolbar ul {\n      display: flex;\n      top: 0;\n      bottom: 0;\n      z-index: 1; }\n      .fixed-action-btn.toolbar ul li {\n        flex: 1;\n        display: inline-block;\n        margin: 0;\n        height: 100%;\n        transition: none; }\n        .fixed-action-btn.toolbar ul li a {\n          display: block;\n          overflow: hidden;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          background-color: transparent;\n          box-shadow: none;\n          color: #fff;\n          line-height: 56px;\n          z-index: 1; }\n          .fixed-action-btn.toolbar ul li a i {\n            line-height: inherit; }\n  .fixed-action-btn ul {\n    left: 0;\n    right: 0;\n    text-align: center;\n    position: absolute;\n    bottom: 64px;\n    margin: 0;\n    visibility: hidden; }\n    .fixed-action-btn ul li {\n      margin-bottom: 15px; }\n    .fixed-action-btn ul a.btn-floating {\n      opacity: 0; }\n  .fixed-action-btn .fab-backdrop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    width: 40px;\n    height: 40px;\n    background-color: #26a69a;\n    border-radius: 50%;\n    transform: scale(0); }\n\n.btn-flat {\n  box-shadow: none;\n  background-color: transparent;\n  color: #343434;\n  cursor: pointer;\n  transition: background-color .2s; }\n  .btn-flat:focus, .btn-flat:hover {\n    box-shadow: none; }\n  .btn-flat:focus {\n    background-color: rgba(0, 0, 0, 0.1); }\n  .btn-flat.disabled {\n    background-color: transparent !important;\n    color: #b3b3b3 !important;\n    cursor: default; }\n\n.btn-large {\n  height: 54px;\n  line-height: 54px; }\n  .btn-large i {\n    font-size: 1.6rem; }\n\n.btn-block {\n  display: block; }\n\n/*!\n * Waves v0.6.0\n * http://fian.my.id/Waves\n *\n * Copyright 2014 Alfiana E. Sibuea and other contributors\n * Released under the MIT license\n * https://github.com/fians/Waves/blob/master/LICENSE\n */\n.waves-effect {\n  position: relative;\n  cursor: pointer;\n  display: inline-block;\n  overflow: hidden;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  vertical-align: middle;\n  z-index: 1;\n  transition: .3s ease-out; }\n  .waves-effect .waves-ripple {\n    position: absolute;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    margin-top: -10px;\n    margin-left: -10px;\n    opacity: 0;\n    background: rgba(0, 0, 0, 0.2);\n    transition: all 0.7s ease-out;\n    transition-property: transform, opacity;\n    transform: scale(0);\n    pointer-events: none; }\n  .waves-effect.waves-light .waves-ripple {\n    background-color: rgba(255, 255, 255, 0.45); }\n  .waves-effect.waves-red .waves-ripple {\n    background-color: rgba(244, 67, 54, 0.7); }\n  .waves-effect.waves-yellow .waves-ripple {\n    background-color: rgba(255, 235, 59, 0.7); }\n  .waves-effect.waves-orange .waves-ripple {\n    background-color: rgba(255, 152, 0, 0.7); }\n  .waves-effect.waves-purple .waves-ripple {\n    background-color: rgba(156, 39, 176, 0.7); }\n  .waves-effect.waves-green .waves-ripple {\n    background-color: rgba(76, 175, 80, 0.7); }\n  .waves-effect.waves-teal .waves-ripple {\n    background-color: rgba(0, 150, 136, 0.7); }\n  .waves-effect input[type=\"button\"], .waves-effect input[type=\"reset\"], .waves-effect input[type=\"submit\"] {\n    border: 0;\n    font-style: normal;\n    font-size: inherit;\n    text-transform: inherit;\n    background: none; }\n  .waves-effect img {\n    position: relative;\n    z-index: -1; }\n\n.waves-notransition {\n  transition: none !important; }\n\n.waves-circle {\n  transform: translateZ(0);\n  -webkit-mask-image: -webkit-radial-gradient(circle, white 100%, black 100%); }\n\n.waves-input-wrapper {\n  border-radius: 0.2em;\n  vertical-align: bottom; }\n  .waves-input-wrapper .waves-button-input {\n    position: relative;\n    top: 0;\n    left: 0;\n    z-index: 1; }\n\n.waves-circle {\n  text-align: center;\n  width: 2.5em;\n  height: 2.5em;\n  line-height: 2.5em;\n  border-radius: 50%;\n  -webkit-mask-image: none; }\n\n.waves-block {\n  display: block; }\n\n/* Firefox Bug: link not triggered */\n.waves-effect .waves-ripple {\n  z-index: -1; }\n\nselect:focus {\n  outline: 1px solid #c9f3ef; }\n\nbutton:focus {\n  outline: none;\n  background-color: #2ab7a9; }\n\nlabel {\n  font-size: 0.8rem;\n  color: #9e9e9e; }\n\n/* Text Inputs + Textarea\n   ========================================================================== */\n/* Style Placeholders */\n::placeholder {\n  color: #d1d1d1; }\n\n/* Text inputs */\ninput:not([type]),\ninput[type=text]:not(.browser-default),\ninput[type=password]:not(.browser-default),\ninput[type=email]:not(.browser-default),\ninput[type=url]:not(.browser-default),\ninput[type=time]:not(.browser-default),\ninput[type=date]:not(.browser-default),\ninput[type=datetime]:not(.browser-default),\ninput[type=datetime-local]:not(.browser-default),\ninput[type=tel]:not(.browser-default),\ninput[type=number]:not(.browser-default),\ninput[type=search]:not(.browser-default),\ntextarea.materialize-textarea {\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid #9e9e9e;\n  border-radius: 0;\n  outline: none;\n  height: 3rem;\n  width: 100%;\n  font-size: 1rem;\n  margin: 0 0 20px 0;\n  padding: 0;\n  box-shadow: none;\n  box-sizing: content-box;\n  transition: all 0.3s; }\n  input:not([type]):disabled, input:not([type])[readonly=\"readonly\"],\n  input[type=text]:not(.browser-default):disabled,\n  input[type=text]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=password]:not(.browser-default):disabled,\n  input[type=password]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=email]:not(.browser-default):disabled,\n  input[type=email]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=url]:not(.browser-default):disabled,\n  input[type=url]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=time]:not(.browser-default):disabled,\n  input[type=time]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=date]:not(.browser-default):disabled,\n  input[type=date]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=datetime]:not(.browser-default):disabled,\n  input[type=datetime]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=datetime-local]:not(.browser-default):disabled,\n  input[type=datetime-local]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=tel]:not(.browser-default):disabled,\n  input[type=tel]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=number]:not(.browser-default):disabled,\n  input[type=number]:not(.browser-default)[readonly=\"readonly\"],\n  input[type=search]:not(.browser-default):disabled,\n  input[type=search]:not(.browser-default)[readonly=\"readonly\"],\n  textarea.materialize-textarea:disabled,\n  textarea.materialize-textarea[readonly=\"readonly\"] {\n    color: rgba(0, 0, 0, 0.42);\n    border-bottom: 1px dotted rgba(0, 0, 0, 0.42); }\n  input:not([type]):disabled + label,\n  input:not([type])[readonly=\"readonly\"] + label,\n  input[type=text]:not(.browser-default):disabled + label,\n  input[type=text]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=password]:not(.browser-default):disabled + label,\n  input[type=password]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=email]:not(.browser-default):disabled + label,\n  input[type=email]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=url]:not(.browser-default):disabled + label,\n  input[type=url]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=time]:not(.browser-default):disabled + label,\n  input[type=time]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=date]:not(.browser-default):disabled + label,\n  input[type=date]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=datetime]:not(.browser-default):disabled + label,\n  input[type=datetime]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=datetime-local]:not(.browser-default):disabled + label,\n  input[type=datetime-local]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=tel]:not(.browser-default):disabled + label,\n  input[type=tel]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=number]:not(.browser-default):disabled + label,\n  input[type=number]:not(.browser-default)[readonly=\"readonly\"] + label,\n  input[type=search]:not(.browser-default):disabled + label,\n  input[type=search]:not(.browser-default)[readonly=\"readonly\"] + label,\n  textarea.materialize-textarea:disabled + label,\n  textarea.materialize-textarea[readonly=\"readonly\"] + label {\n    color: rgba(0, 0, 0, 0.42); }\n  input:not([type]):focus:not([readonly]),\n  input[type=text]:not(.browser-default):focus:not([readonly]),\n  input[type=password]:not(.browser-default):focus:not([readonly]),\n  input[type=email]:not(.browser-default):focus:not([readonly]),\n  input[type=url]:not(.browser-default):focus:not([readonly]),\n  input[type=time]:not(.browser-default):focus:not([readonly]),\n  input[type=date]:not(.browser-default):focus:not([readonly]),\n  input[type=datetime]:not(.browser-default):focus:not([readonly]),\n  input[type=datetime-local]:not(.browser-default):focus:not([readonly]),\n  input[type=tel]:not(.browser-default):focus:not([readonly]),\n  input[type=number]:not(.browser-default):focus:not([readonly]),\n  input[type=search]:not(.browser-default):focus:not([readonly]),\n  textarea.materialize-textarea:focus:not([readonly]) {\n    border-bottom: 1px solid #26a69a;\n    box-shadow: 0 1px 0 0 #26a69a; }\n  input:not([type]):focus:not([readonly]) + label,\n  input[type=text]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=password]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=email]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=url]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=time]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=date]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=datetime]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=datetime-local]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=tel]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=number]:not(.browser-default):focus:not([readonly]) + label,\n  input[type=search]:not(.browser-default):focus:not([readonly]) + label,\n  textarea.materialize-textarea:focus:not([readonly]) + label {\n    color: #26a69a; }\n  input:not([type]).validate + label,\n  input[type=text]:not(.browser-default).validate + label,\n  input[type=password]:not(.browser-default).validate + label,\n  input[type=email]:not(.browser-default).validate + label,\n  input[type=url]:not(.browser-default).validate + label,\n  input[type=time]:not(.browser-default).validate + label,\n  input[type=date]:not(.browser-default).validate + label,\n  input[type=datetime]:not(.browser-default).validate + label,\n  input[type=datetime-local]:not(.browser-default).validate + label,\n  input[type=tel]:not(.browser-default).validate + label,\n  input[type=number]:not(.browser-default).validate + label,\n  input[type=search]:not(.browser-default).validate + label,\n  textarea.materialize-textarea.validate + label {\n    width: 100%; }\n  input:not([type]).invalid + label:after,\n  input:not([type]).valid + label:after,\n  input[type=text]:not(.browser-default).invalid + label:after,\n  input[type=text]:not(.browser-default).valid + label:after,\n  input[type=password]:not(.browser-default).invalid + label:after,\n  input[type=password]:not(.browser-default).valid + label:after,\n  input[type=email]:not(.browser-default).invalid + label:after,\n  input[type=email]:not(.browser-default).valid + label:after,\n  input[type=url]:not(.browser-default).invalid + label:after,\n  input[type=url]:not(.browser-default).valid + label:after,\n  input[type=time]:not(.browser-default).invalid + label:after,\n  input[type=time]:not(.browser-default).valid + label:after,\n  input[type=date]:not(.browser-default).invalid + label:after,\n  input[type=date]:not(.browser-default).valid + label:after,\n  input[type=datetime]:not(.browser-default).invalid + label:after,\n  input[type=datetime]:not(.browser-default).valid + label:after,\n  input[type=datetime-local]:not(.browser-default).invalid + label:after,\n  input[type=datetime-local]:not(.browser-default).valid + label:after,\n  input[type=tel]:not(.browser-default).invalid + label:after,\n  input[type=tel]:not(.browser-default).valid + label:after,\n  input[type=number]:not(.browser-default).invalid + label:after,\n  input[type=number]:not(.browser-default).valid + label:after,\n  input[type=search]:not(.browser-default).invalid + label:after,\n  input[type=search]:not(.browser-default).valid + label:after,\n  textarea.materialize-textarea.invalid + label:after,\n  textarea.materialize-textarea.valid + label:after {\n    display: none; }\n  input:not([type]).invalid + label.active:after,\n  input:not([type]).valid + label.active:after,\n  input[type=text]:not(.browser-default).invalid + label.active:after,\n  input[type=text]:not(.browser-default).valid + label.active:after,\n  input[type=password]:not(.browser-default).invalid + label.active:after,\n  input[type=password]:not(.browser-default).valid + label.active:after,\n  input[type=email]:not(.browser-default).invalid + label.active:after,\n  input[type=email]:not(.browser-default).valid + label.active:after,\n  input[type=url]:not(.browser-default).invalid + label.active:after,\n  input[type=url]:not(.browser-default).valid + label.active:after,\n  input[type=time]:not(.browser-default).invalid + label.active:after,\n  input[type=time]:not(.browser-default).valid + label.active:after,\n  input[type=date]:not(.browser-default).invalid + label.active:after,\n  input[type=date]:not(.browser-default).valid + label.active:after,\n  input[type=datetime]:not(.browser-default).invalid + label.active:after,\n  input[type=datetime]:not(.browser-default).valid + label.active:after,\n  input[type=datetime-local]:not(.browser-default).invalid + label.active:after,\n  input[type=datetime-local]:not(.browser-default).valid + label.active:after,\n  input[type=tel]:not(.browser-default).invalid + label.active:after,\n  input[type=tel]:not(.browser-default).valid + label.active:after,\n  input[type=number]:not(.browser-default).invalid + label.active:after,\n  input[type=number]:not(.browser-default).valid + label.active:after,\n  input[type=search]:not(.browser-default).invalid + label.active:after,\n  input[type=search]:not(.browser-default).valid + label.active:after,\n  textarea.materialize-textarea.invalid + label.active:after,\n  textarea.materialize-textarea.valid + label.active:after {\n    display: block; }\n\n/* Validation Sass Placeholders */\ninput.valid:not([type]), input.valid:not([type]):focus,\ninput[type=text].valid:not(.browser-default),\ninput[type=text].valid:not(.browser-default):focus,\ninput[type=password].valid:not(.browser-default),\ninput[type=password].valid:not(.browser-default):focus,\ninput[type=email].valid:not(.browser-default),\ninput[type=email].valid:not(.browser-default):focus,\ninput[type=url].valid:not(.browser-default),\ninput[type=url].valid:not(.browser-default):focus,\ninput[type=time].valid:not(.browser-default),\ninput[type=time].valid:not(.browser-default):focus,\ninput[type=date].valid:not(.browser-default),\ninput[type=date].valid:not(.browser-default):focus,\ninput[type=datetime].valid:not(.browser-default),\ninput[type=datetime].valid:not(.browser-default):focus,\ninput[type=datetime-local].valid:not(.browser-default),\ninput[type=datetime-local].valid:not(.browser-default):focus,\ninput[type=tel].valid:not(.browser-default),\ninput[type=tel].valid:not(.browser-default):focus,\ninput[type=number].valid:not(.browser-default),\ninput[type=number].valid:not(.browser-default):focus,\ninput[type=search].valid:not(.browser-default),\ninput[type=search].valid:not(.browser-default):focus,\ntextarea.materialize-textarea.valid,\ntextarea.materialize-textarea.valid:focus, .select-wrapper.valid > input.select-dropdown {\n  border-bottom: 1px solid #4CAF50;\n  box-shadow: 0 1px 0 0 #4CAF50; }\n\ninput.invalid:not([type]), input.invalid:not([type]):focus,\ninput[type=text].invalid:not(.browser-default),\ninput[type=text].invalid:not(.browser-default):focus,\ninput[type=password].invalid:not(.browser-default),\ninput[type=password].invalid:not(.browser-default):focus,\ninput[type=email].invalid:not(.browser-default),\ninput[type=email].invalid:not(.browser-default):focus,\ninput[type=url].invalid:not(.browser-default),\ninput[type=url].invalid:not(.browser-default):focus,\ninput[type=time].invalid:not(.browser-default),\ninput[type=time].invalid:not(.browser-default):focus,\ninput[type=date].invalid:not(.browser-default),\ninput[type=date].invalid:not(.browser-default):focus,\ninput[type=datetime].invalid:not(.browser-default),\ninput[type=datetime].invalid:not(.browser-default):focus,\ninput[type=datetime-local].invalid:not(.browser-default),\ninput[type=datetime-local].invalid:not(.browser-default):focus,\ninput[type=tel].invalid:not(.browser-default),\ninput[type=tel].invalid:not(.browser-default):focus,\ninput[type=number].invalid:not(.browser-default),\ninput[type=number].invalid:not(.browser-default):focus,\ninput[type=search].invalid:not(.browser-default),\ninput[type=search].invalid:not(.browser-default):focus,\ntextarea.materialize-textarea.invalid,\ntextarea.materialize-textarea.invalid:focus, .select-wrapper.invalid > input.select-dropdown {\n  border-bottom: 1px solid #F44336;\n  box-shadow: 0 1px 0 0 #F44336; }\n\ninput:not([type]).valid + label:after,\ninput:not([type]):focus.valid + label:after,\ninput[type=text]:not(.browser-default).valid + label:after,\ninput[type=text]:not(.browser-default):focus.valid + label:after,\ninput[type=password]:not(.browser-default).valid + label:after,\ninput[type=password]:not(.browser-default):focus.valid + label:after,\ninput[type=email]:not(.browser-default).valid + label:after,\ninput[type=email]:not(.browser-default):focus.valid + label:after,\ninput[type=url]:not(.browser-default).valid + label:after,\ninput[type=url]:not(.browser-default):focus.valid + label:after,\ninput[type=time]:not(.browser-default).valid + label:after,\ninput[type=time]:not(.browser-default):focus.valid + label:after,\ninput[type=date]:not(.browser-default).valid + label:after,\ninput[type=date]:not(.browser-default):focus.valid + label:after,\ninput[type=datetime]:not(.browser-default).valid + label:after,\ninput[type=datetime]:not(.browser-default):focus.valid + label:after,\ninput[type=datetime-local]:not(.browser-default).valid + label:after,\ninput[type=datetime-local]:not(.browser-default):focus.valid + label:after,\ninput[type=tel]:not(.browser-default).valid + label:after,\ninput[type=tel]:not(.browser-default):focus.valid + label:after,\ninput[type=number]:not(.browser-default).valid + label:after,\ninput[type=number]:not(.browser-default):focus.valid + label:after,\ninput[type=search]:not(.browser-default).valid + label:after,\ninput[type=search]:not(.browser-default):focus.valid + label:after,\ntextarea.materialize-textarea.valid + label:after,\ntextarea.materialize-textarea:focus.valid + label:after, .select-wrapper.valid + label:after {\n  content: attr(data-success);\n  color: #4CAF50;\n  opacity: 1;\n  transform: translateY(9px); }\n\ninput:not([type]).invalid + label:after,\ninput:not([type]):focus.invalid + label:after,\ninput[type=text]:not(.browser-default).invalid + label:after,\ninput[type=text]:not(.browser-default):focus.invalid + label:after,\ninput[type=password]:not(.browser-default).invalid + label:after,\ninput[type=password]:not(.browser-default):focus.invalid + label:after,\ninput[type=email]:not(.browser-default).invalid + label:after,\ninput[type=email]:not(.browser-default):focus.invalid + label:after,\ninput[type=url]:not(.browser-default).invalid + label:after,\ninput[type=url]:not(.browser-default):focus.invalid + label:after,\ninput[type=time]:not(.browser-default).invalid + label:after,\ninput[type=time]:not(.browser-default):focus.invalid + label:after,\ninput[type=date]:not(.browser-default).invalid + label:after,\ninput[type=date]:not(.browser-default):focus.invalid + label:after,\ninput[type=datetime]:not(.browser-default).invalid + label:after,\ninput[type=datetime]:not(.browser-default):focus.invalid + label:after,\ninput[type=datetime-local]:not(.browser-default).invalid + label:after,\ninput[type=datetime-local]:not(.browser-default):focus.invalid + label:after,\ninput[type=tel]:not(.browser-default).invalid + label:after,\ninput[type=tel]:not(.browser-default):focus.invalid + label:after,\ninput[type=number]:not(.browser-default).invalid + label:after,\ninput[type=number]:not(.browser-default):focus.invalid + label:after,\ninput[type=search]:not(.browser-default).invalid + label:after,\ninput[type=search]:not(.browser-default):focus.invalid + label:after,\ntextarea.materialize-textarea.invalid + label:after,\ntextarea.materialize-textarea:focus.invalid + label:after, .select-wrapper.invalid + label:after {\n  content: attr(data-error);\n  color: #F44336;\n  opacity: 1;\n  transform: translateY(9px); }\n\ninput:not([type]) + label:after,\ninput[type=text]:not(.browser-default) + label:after,\ninput[type=password]:not(.browser-default) + label:after,\ninput[type=email]:not(.browser-default) + label:after,\ninput[type=url]:not(.browser-default) + label:after,\ninput[type=time]:not(.browser-default) + label:after,\ninput[type=date]:not(.browser-default) + label:after,\ninput[type=datetime]:not(.browser-default) + label:after,\ninput[type=datetime-local]:not(.browser-default) + label:after,\ninput[type=tel]:not(.browser-default) + label:after,\ninput[type=number]:not(.browser-default) + label:after,\ninput[type=search]:not(.browser-default) + label:after,\ntextarea.materialize-textarea + label:after, .select-wrapper + label:after {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 100%;\n  left: 0;\n  opacity: 0;\n  transition: .2s opacity ease-out, .2s color ease-out; }\n\n.input-field {\n  position: relative;\n  margin-top: 1rem; }\n  .input-field.inline {\n    display: inline-block;\n    vertical-align: middle;\n    margin-left: 5px; }\n    .input-field.inline input,\n    .input-field.inline .select-dropdown {\n      margin-bottom: 1rem; }\n  .input-field.col label {\n    left: 0.75rem; }\n  .input-field.col .prefix ~ label,\n  .input-field.col .prefix ~ .validate ~ label {\n    width: calc(100% - 3rem - 1.5rem); }\n  .input-field label {\n    color: #9e9e9e;\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    font-size: 1rem;\n    cursor: text;\n    transition: transform .2s ease-out;\n    transform-origin: 0% 100%;\n    text-align: initial;\n    transform: translateY(12px);\n    pointer-events: none; }\n    .input-field label:not(.label-icon).active {\n      transform: translateY(-14px) scale(0.8);\n      transform-origin: 0 0; }\n  .input-field .prefix {\n    position: absolute;\n    width: 3rem;\n    font-size: 2rem;\n    transition: color .2s; }\n    .input-field .prefix.active {\n      color: #26a69a; }\n  .input-field .prefix ~ input,\n  .input-field .prefix ~ textarea,\n  .input-field .prefix ~ label,\n  .input-field .prefix ~ .validate ~ label,\n  .input-field .prefix ~ .autocomplete-content {\n    margin-left: 3rem;\n    width: 92%;\n    width: calc(100% - 3rem); }\n  .input-field .prefix ~ label {\n    margin-left: 3rem; }\n  @media only screen and (max-width: 992px) {\n    .input-field .prefix ~ input {\n      width: 86%;\n      width: calc(100% - 3rem); } }\n  @media only screen and (max-width: 600px) {\n    .input-field .prefix ~ input {\n      width: 80%;\n      width: calc(100% - 3rem); } }\n\n/* Search Field */\n.input-field input[type=search] {\n  display: block;\n  line-height: inherit; }\n  .nav-wrapper .input-field input[type=search] {\n    height: inherit;\n    padding-left: 4rem;\n    width: calc(100% - 4rem);\n    border: 0;\n    box-shadow: none; }\n  .input-field input[type=search]:focus {\n    background-color: #fff;\n    border: 0;\n    box-shadow: none;\n    color: #444; }\n    .input-field input[type=search]:focus + label i,\n    .input-field input[type=search]:focus ~ .mdi-navigation-close,\n    .input-field input[type=search]:focus ~ .material-icons {\n      color: #444; }\n  .input-field input[type=search] + label {\n    left: 1rem; }\n  .input-field input[type=search] ~ .mdi-navigation-close,\n  .input-field input[type=search] ~ .material-icons {\n    position: absolute;\n    top: 0;\n    right: 1rem;\n    color: transparent;\n    cursor: pointer;\n    font-size: 2rem;\n    transition: .3s color; }\n\n/* Textarea */\ntextarea {\n  width: 100%;\n  height: 3rem;\n  background-color: transparent; }\n  textarea.materialize-textarea {\n    overflow-y: hidden;\n    /* prevents scroll bar flash */\n    padding: .8rem 0 1.6rem 0;\n    /* prevents text jump on Enter keypress */\n    resize: none;\n    min-height: 3rem; }\n    textarea.materialize-textarea.validate + label {\n      height: 100%; }\n      textarea.materialize-textarea.validate + label::after {\n        top: calc(100% - 12px); }\n      textarea.materialize-textarea.validate + label:not(.label-icon).active {\n        transform: translateY(-25px); }\n\n.hiddendiv {\n  display: none;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  /* future version of deprecated 'word-wrap' */\n  padding-top: 1.2rem;\n  /* prevents text jump on Enter keypress */\n  position: absolute;\n  top: 0; }\n\n/* Autocomplete */\n.autocomplete-content {\n  margin-top: -20px;\n  margin-bottom: 20px;\n  display: block;\n  opacity: 1;\n  position: static; }\n  .autocomplete-content li .highlight {\n    color: #444; }\n  .autocomplete-content li img {\n    height: 40px;\n    width: 40px;\n    margin: 5px 15px; }\n\n/* Radio Buttons\n   ========================================================================== */\n[type=\"radio\"]:not(:checked),\n[type=\"radio\"]:checked {\n  position: absolute;\n  opacity: 0;\n  pointer-events: none; }\n\n[type=\"radio\"]:not(:checked) + label,\n[type=\"radio\"]:checked + label {\n  position: relative;\n  padding-left: 35px;\n  cursor: pointer;\n  display: inline-block;\n  height: 25px;\n  line-height: 25px;\n  font-size: 1rem;\n  transition: .28s ease;\n  user-select: none; }\n\n[type=\"radio\"] + label:before,\n[type=\"radio\"] + label:after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  margin: 4px;\n  width: 16px;\n  height: 16px;\n  z-index: 0;\n  transition: .28s ease; }\n\n/* Unchecked styles */\n[type=\"radio\"]:not(:checked) + label:before,\n[type=\"radio\"]:not(:checked) + label:after,\n[type=\"radio\"]:checked + label:before,\n[type=\"radio\"]:checked + label:after,\n[type=\"radio\"].with-gap:checked + label:before,\n[type=\"radio\"].with-gap:checked + label:after {\n  border-radius: 50%; }\n\n[type=\"radio\"]:not(:checked) + label:before,\n[type=\"radio\"]:not(:checked) + label:after {\n  border: 2px solid #5a5a5a; }\n\n[type=\"radio\"]:not(:checked) + label:after {\n  transform: scale(0); }\n\n/* Checked styles */\n[type=\"radio\"]:checked + label:before {\n  border: 2px solid transparent; }\n\n[type=\"radio\"]:checked + label:after,\n[type=\"radio\"].with-gap:checked + label:before,\n[type=\"radio\"].with-gap:checked + label:after {\n  border: 2px solid #26a69a; }\n\n[type=\"radio\"]:checked + label:after,\n[type=\"radio\"].with-gap:checked + label:after {\n  background-color: #26a69a; }\n\n[type=\"radio\"]:checked + label:after {\n  transform: scale(1.02); }\n\n/* Radio With gap */\n[type=\"radio\"].with-gap:checked + label:after {\n  transform: scale(0.5); }\n\n/* Focused styles */\n[type=\"radio\"].tabbed:focus + label:before {\n  box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1); }\n\n/* Disabled Radio With gap */\n[type=\"radio\"].with-gap:disabled:checked + label:before {\n  border: 2px solid rgba(0, 0, 0, 0.42); }\n\n[type=\"radio\"].with-gap:disabled:checked + label:after {\n  border: none;\n  background-color: rgba(0, 0, 0, 0.42); }\n\n/* Disabled style */\n[type=\"radio\"]:disabled:not(:checked) + label:before,\n[type=\"radio\"]:disabled:checked + label:before {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.42); }\n\n[type=\"radio\"]:disabled + label {\n  color: rgba(0, 0, 0, 0.42); }\n\n[type=\"radio\"]:disabled:not(:checked) + label:before {\n  border-color: rgba(0, 0, 0, 0.42); }\n\n[type=\"radio\"]:disabled:checked + label:after {\n  background-color: rgba(0, 0, 0, 0.42);\n  border-color: #949494; }\n\n/* Checkboxes\n   ========================================================================== */\n/* CUSTOM CSS CHECKBOXES */\nform p {\n  margin-bottom: 10px;\n  text-align: left; }\n\nform p:last-child {\n  margin-bottom: 0; }\n\n/* Remove default checkbox */\n[type=\"checkbox\"]:not(:checked),\n[type=\"checkbox\"]:checked {\n  position: absolute;\n  opacity: 0;\n  pointer-events: none; }\n\n[type=\"checkbox\"] {\n  /* checkbox aspect */ }\n  [type=\"checkbox\"] + label {\n    position: relative;\n    padding-left: 35px;\n    cursor: pointer;\n    display: inline-block;\n    height: 25px;\n    line-height: 25px;\n    font-size: 1rem;\n    user-select: none; }\n  [type=\"checkbox\"] + label:before,\n  [type=\"checkbox\"]:not(.filled-in) + label:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 18px;\n    height: 18px;\n    z-index: 0;\n    border: 2px solid #5a5a5a;\n    border-radius: 1px;\n    margin-top: 2px;\n    transition: .2s; }\n  [type=\"checkbox\"]:not(.filled-in) + label:after {\n    border: 0;\n    transform: scale(0); }\n  [type=\"checkbox\"]:not(:checked):disabled + label:before {\n    border: none;\n    background-color: rgba(0, 0, 0, 0.42); }\n  [type=\"checkbox\"].tabbed:focus + label:after {\n    transform: scale(1);\n    border: 0;\n    border-radius: 50%;\n    box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n    background-color: rgba(0, 0, 0, 0.1); }\n\n[type=\"checkbox\"]:checked + label:before {\n  top: -4px;\n  left: -5px;\n  width: 12px;\n  height: 22px;\n  border-top: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-right: 2px solid #26a69a;\n  border-bottom: 2px solid #26a69a;\n  transform: rotate(40deg);\n  backface-visibility: hidden;\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"]:checked:disabled + label:before {\n  border-right: 2px solid rgba(0, 0, 0, 0.42);\n  border-bottom: 2px solid rgba(0, 0, 0, 0.42); }\n\n/* Indeterminate checkbox */\n[type=\"checkbox\"]:indeterminate + label:before {\n  top: -11px;\n  left: -12px;\n  width: 10px;\n  height: 22px;\n  border-top: none;\n  border-left: none;\n  border-right: 2px solid #26a69a;\n  border-bottom: none;\n  transform: rotate(90deg);\n  backface-visibility: hidden;\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"]:indeterminate:disabled + label:before {\n  border-right: 2px solid rgba(0, 0, 0, 0.42);\n  background-color: transparent; }\n\n[type=\"checkbox\"].filled-in + label:after {\n  border-radius: 2px; }\n\n[type=\"checkbox\"].filled-in + label:before,\n[type=\"checkbox\"].filled-in + label:after {\n  content: '';\n  left: 0;\n  position: absolute;\n  /* .1s delay is for check animation */\n  transition: border .25s, background-color .25s, width .20s .1s, height .20s .1s, top .20s .1s, left .20s .1s;\n  z-index: 1; }\n\n[type=\"checkbox\"].filled-in:not(:checked) + label:before {\n  width: 0;\n  height: 0;\n  border: 3px solid transparent;\n  left: 6px;\n  top: 10px;\n  transform: rotateZ(37deg);\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"].filled-in:not(:checked) + label:after {\n  height: 20px;\n  width: 20px;\n  background-color: transparent;\n  border: 2px solid #5a5a5a;\n  top: 0px;\n  z-index: 0; }\n\n[type=\"checkbox\"].filled-in:checked + label:before {\n  top: 0;\n  left: 1px;\n  width: 8px;\n  height: 13px;\n  border-top: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-right: 2px solid #fff;\n  border-bottom: 2px solid #fff;\n  transform: rotateZ(37deg);\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"].filled-in:checked + label:after {\n  top: 0;\n  width: 20px;\n  height: 20px;\n  border: 2px solid #26a69a;\n  background-color: #26a69a;\n  z-index: 0; }\n\n[type=\"checkbox\"].filled-in.tabbed:focus + label:after {\n  border-radius: 2px;\n  border-color: #5a5a5a;\n  background-color: rgba(0, 0, 0, 0.1); }\n\n[type=\"checkbox\"].filled-in.tabbed:checked:focus + label:after {\n  border-radius: 2px;\n  background-color: #26a69a;\n  border-color: #26a69a; }\n\n[type=\"checkbox\"].filled-in:disabled:not(:checked) + label:before {\n  background-color: transparent;\n  border: 2px solid transparent; }\n\n[type=\"checkbox\"].filled-in:disabled:not(:checked) + label:after {\n  border-color: transparent;\n  background-color: #949494; }\n\n[type=\"checkbox\"].filled-in:disabled:checked + label:before {\n  background-color: transparent; }\n\n[type=\"checkbox\"].filled-in:disabled:checked + label:after {\n  background-color: #949494;\n  border-color: #949494; }\n\n/* Switch\n   ========================================================================== */\n.switch,\n.switch * {\n  -webkit-tap-highlight-color: transparent;\n  user-select: none; }\n\n.switch label {\n  cursor: pointer; }\n\n.switch label input[type=checkbox] {\n  opacity: 0;\n  width: 0;\n  height: 0; }\n  .switch label input[type=checkbox]:checked + .lever {\n    background-color: #84c7c1; }\n    .switch label input[type=checkbox]:checked + .lever:before, .switch label input[type=checkbox]:checked + .lever:after {\n      left: 18px; }\n    .switch label input[type=checkbox]:checked + .lever:after {\n      background-color: #26a69a; }\n\n.switch label .lever {\n  content: \"\";\n  display: inline-block;\n  position: relative;\n  width: 36px;\n  height: 14px;\n  background-color: rgba(0, 0, 0, 0.38);\n  border-radius: 15px;\n  margin-right: 10px;\n  transition: background 0.3s ease;\n  vertical-align: middle;\n  margin: 0 16px; }\n  .switch label .lever:before, .switch label .lever:after {\n    content: \"\";\n    position: absolute;\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    left: 0;\n    top: -3px;\n    transition: left 0.3s ease, background .3s ease, box-shadow 0.1s ease, transform .1s ease; }\n  .switch label .lever:before {\n    background-color: rgba(38, 166, 154, 0.15); }\n  .switch label .lever:after {\n    background-color: #F1F1F1;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }\n\ninput[type=checkbox]:checked:not(:disabled) ~ .lever:active::before,\ninput[type=checkbox]:checked:not(:disabled).tabbed:focus ~ .lever::before {\n  transform: scale(2.4);\n  background-color: rgba(38, 166, 154, 0.15); }\n\ninput[type=checkbox]:not(:disabled) ~ .lever:active:before,\ninput[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before {\n  transform: scale(2.4);\n  background-color: rgba(0, 0, 0, 0.08); }\n\n.switch input[type=checkbox][disabled] + .lever {\n  cursor: default;\n  background-color: rgba(0, 0, 0, 0.12); }\n\n.switch label input[type=checkbox][disabled] + .lever:after,\n.switch label input[type=checkbox][disabled]:checked + .lever:after {\n  background-color: #949494; }\n\n/* Select Field\n   ========================================================================== */\nselect {\n  display: none; }\n\nselect.browser-default {\n  display: block; }\n\nselect {\n  background-color: rgba(255, 255, 255, 0.9);\n  width: 100%;\n  padding: 5px;\n  border: 1px solid #f2f2f2;\n  border-radius: 2px;\n  height: 3rem; }\n\n.input-field select {\n  display: block;\n  position: absolute;\n  width: 0;\n  pointer-events: none;\n  height: 0;\n  top: 0;\n  left: 0;\n  opacity: 0; }\n\n.select-label {\n  position: absolute; }\n\n.select-wrapper {\n  position: relative; }\n  .select-wrapper.valid + label,\n  .select-wrapper.invalid + label {\n    width: 100%;\n    pointer-events: none; }\n  .select-wrapper input.select-dropdown {\n    position: relative;\n    cursor: pointer;\n    background-color: transparent;\n    border: none;\n    border-bottom: 1px solid #9e9e9e;\n    outline: none;\n    height: 3rem;\n    line-height: 3rem;\n    width: 100%;\n    font-size: 1rem;\n    margin: 0 0 20px 0;\n    padding: 0;\n    display: block;\n    user-select: none; }\n  .select-wrapper span.caret {\n    color: initial;\n    position: absolute;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    height: 10px;\n    margin: auto 0;\n    font-size: 10px;\n    line-height: 10px; }\n  .select-wrapper + label {\n    position: absolute;\n    top: -26px;\n    font-size: 0.8rem; }\n\nselect:disabled {\n  color: rgba(0, 0, 0, 0.42); }\n\n.select-wrapper.disabled span.caret,\n.select-wrapper.disabled + label {\n  color: rgba(0, 0, 0, 0.42); }\n\n.select-wrapper input.select-dropdown:disabled {\n  color: rgba(0, 0, 0, 0.42);\n  cursor: default;\n  user-select: none; }\n\n.select-wrapper i {\n  color: rgba(0, 0, 0, 0.3); }\n\n.select-dropdown li.disabled,\n.select-dropdown li.disabled > span,\n.select-dropdown li.optgroup {\n  color: rgba(0, 0, 0, 0.3);\n  background-color: transparent; }\n\n.select-dropdown.dropdown-content li.active {\n  background-color: transparent; }\n\n.select-dropdown.dropdown-content li:hover {\n  background-color: rgba(0, 0, 0, 0.06); }\n\n.select-dropdown.dropdown-content li.selected {\n  background-color: rgba(0, 0, 0, 0.03); }\n\n.prefix ~ .select-wrapper {\n  margin-left: 3rem;\n  width: 92%;\n  width: calc(100% - 3rem); }\n\n.prefix ~ label {\n  margin-left: 3rem; }\n\n.select-dropdown li img {\n  height: 40px;\n  width: 40px;\n  margin: 5px 15px;\n  float: right; }\n\n.select-dropdown li.optgroup {\n  border-top: 1px solid #eee; }\n  .select-dropdown li.optgroup.selected > span {\n    color: rgba(0, 0, 0, 0.7); }\n  .select-dropdown li.optgroup > span {\n    color: rgba(0, 0, 0, 0.4); }\n  .select-dropdown li.optgroup ~ li.optgroup-option {\n    padding-left: 1rem; }\n\n/* File Input\n   ========================================================================== */\n.file-field {\n  position: relative; }\n  .file-field .file-path-wrapper {\n    overflow: hidden;\n    padding-left: 10px; }\n  .file-field input.file-path {\n    width: 100%; }\n  .file-field .btn, .file-field .btn-large {\n    float: left;\n    height: 3rem;\n    line-height: 3rem; }\n  .file-field span {\n    cursor: pointer; }\n  .file-field input[type=file] {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-size: 20px;\n    cursor: pointer;\n    opacity: 0;\n    filter: alpha(opacity=0); }\n    .file-field input[type=file]::-webkit-file-upload-button {\n      display: none; }\n\n/* Range\n   ========================================================================== */\n.range-field {\n  position: relative; }\n\ninput[type=range],\ninput[type=range] + .thumb {\n  cursor: pointer; }\n\ninput[type=range] {\n  position: relative;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  width: 100%;\n  margin: 15px 0;\n  padding: 0; }\n  input[type=range]:focus {\n    outline: none; }\n\ninput[type=range] + .thumb {\n  position: absolute;\n  top: 10px;\n  left: 0;\n  border: none;\n  height: 0;\n  width: 0;\n  border-radius: 50%;\n  background-color: #26a69a;\n  margin-left: 7px;\n  transform-origin: 50% 50%;\n  transform: rotate(-45deg); }\n  input[type=range] + .thumb .value {\n    display: block;\n    width: 30px;\n    text-align: center;\n    color: #26a69a;\n    font-size: 0;\n    transform: rotate(45deg); }\n  input[type=range] + .thumb.active {\n    border-radius: 50% 50% 50% 0; }\n    input[type=range] + .thumb.active .value {\n      color: #fff;\n      margin-left: -1px;\n      margin-top: 8px;\n      font-size: 10px; }\n\ninput[type=range] {\n  -webkit-appearance: none; }\n\ninput[type=range]::-webkit-slider-runnable-track {\n  height: 3px;\n  background: #c2c0c2;\n  border: none; }\n\ninput[type=range]::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  border: none;\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  background-color: #26a69a;\n  transform-origin: 50% 50%;\n  margin: -5px 0 0 0;\n  transition: .3s; }\n\ninput[type=range]:focus::-webkit-slider-runnable-track {\n  background: #ccc; }\n\ninput[type=range] {\n  /* fix for FF unable to apply focus style bug  */\n  border: 1px solid white;\n  /*required for proper track sizing in FF*/ }\n\ninput[type=range]::-moz-range-track {\n  height: 3px;\n  background: #ddd;\n  border: none; }\n\ninput[type=range]::-moz-range-thumb {\n  border: none;\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  background: #26a69a;\n  margin-top: -5px; }\n\ninput[type=range]:-moz-focusring {\n  outline: 1px solid #fff;\n  outline-offset: -1px; }\n\ninput[type=range]:focus::-moz-range-track {\n  background: #ccc; }\n\ninput[type=range]::-ms-track {\n  height: 3px;\n  background: transparent;\n  border-color: transparent;\n  border-width: 6px 0;\n  /*remove default tick marks*/\n  color: transparent; }\n\ninput[type=range]::-ms-fill-lower {\n  background: #777; }\n\ninput[type=range]::-ms-fill-upper {\n  background: #ddd; }\n\ninput[type=range]::-ms-thumb {\n  border: none;\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  background: #26a69a; }\n\ninput[type=range]:focus::-ms-fill-lower {\n  background: #888; }\n\ninput[type=range]:focus::-ms-fill-upper {\n  background: #ccc; }\n\nhtml, body {\n  height: 100%; }\n\nnav {\n  background: #000; }\n  nav .nav-wrapper .container {\n    margin: 0 auto;\n    max-width: 1280px;\n    width: 100%; }\n  @media only screen and (min-width: 601px) {\n    nav .nav-wrapper .container {\n      width: 85%; } }\n  @media only screen and (min-width: 993px) {\n    nav .nav-wrapper .container {\n      width: 70%; } }\n\n.material-icons {\n  vertical-align: middle;\n  line-height: inherit; }\n\n.btn, .btn-large {\n  height: 2em;\n  line-height: 2em;\n  padding: 0 0.8em; }\n\n[data-ax6ui-sidenav-panel] {\n  background: #fff; }\n\n[data-ax6ui-sidenav-menu] {\n  background: #eee; }\n  [data-ax6ui-sidenav-menu] .sidenav {\n    padding: 10px 0; }\n    [data-ax6ui-sidenav-menu] .sidenav ul {\n      margin: 0; }\n      [data-ax6ui-sidenav-menu] .sidenav ul li a {\n        display: block;\n        padding: 7px 10px; }\n        [data-ax6ui-sidenav-menu] .sidenav ul li a:hover {\n          background: #ccc; }\n\nhtml[data-ax6ui-sidenav-open] [data-ax6ui-sidenav-panel] {\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5); }\n", ""]);

// exports


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(7)(undefined);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + __webpack_require__(40) + "); /* For IE6-8 */\n  src: local('Material Icons'),\n       local('MaterialIcons-Regular'),\n       url(" + __webpack_require__(41) + ") format('woff2'),\n       url(" + __webpack_require__(42) + ") format('woff'),\n       url(" + __webpack_require__(43) + ") format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n", ""]);

// exports


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e79bfd88537def476913f3ed52f4f4b3.eot";

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "570eb83859dc23dd0eec423a49e147fe.woff2";

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "012cf6a10129e2275d79d6adac7f3b02.woff";

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "a37b0c01c0baf1888ca812cc0508f6e2.ttf";

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,